import{_ as e,c as s,a as r,b as t,d as a,f as o,r as h,o as g,e as n}from"./app-chPKMbRn.js";const d={};function c(m,l){const i=h("RouteLink");return g(),s("div",null,[l[25]||(l[25]=r("h1",{id:"搜索算法",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#搜索算法"},[r("span",null,"搜索算法")])],-1)),l[26]||(l[26]=r("h1",{id:"搜索算法目录",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#搜索算法目录"},[r("span",null,"搜索算法目录")])],-1)),r("ul",null,[r("li",null,[t(i,{to:"/md/article/algorithm/search/linear_search.html"},{default:a(()=>l[0]||(l[0]=[n("线性搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/binary_search.html"},{default:a(()=>l[1]||(l[1]=[n("二分搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/interpolation_search.html"},{default:a(()=>l[2]||(l[2]=[n("插值搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/jump_search.html"},{default:a(()=>l[3]||(l[3]=[n("跳跃搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/exponential_search.html"},{default:a(()=>l[4]||(l[4]=[n("指数搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/block_search.html"},{default:a(()=>l[5]||(l[5]=[n("分块搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/depth_first_search.html"},{default:a(()=>l[6]||(l[6]=[n("深度优先搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/breadth_first_search.html"},{default:a(()=>l[7]||(l[7]=[n("广度优先搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/a_star_search.html"},{default:a(()=>l[8]||(l[8]=[n("A* 搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/dijkstra_algorithm.html"},{default:a(()=>l[9]||(l[9]=[n("Dijkstra 算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/bellman_ford_algorithm.html"},{default:a(()=>l[10]||(l[10]=[n("贝尔曼-福特算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/floyd_warshall_algorithm.html"},{default:a(()=>l[11]||(l[11]=[n("Floyd-Warshall 算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/hash_search.html"},{default:a(()=>l[12]||(l[12]=[n("哈希查找")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/branch_and_bound.html"},{default:a(()=>l[13]||(l[13]=[n("分支限界搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/iterative_deepening_depth_first_search.html"},{default:a(()=>l[14]||(l[14]=[n("IDDFS")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/bidirectional_search.html"},{default:a(()=>l[15]||(l[15]=[n("双向搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/iterative_deepening_a_star.html"},{default:a(()=>l[16]||(l[16]=[n("迭代加深 A*")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/greedy_best_first_search.html"},{default:a(()=>l[17]||(l[17]=[n("贪心搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/uniform_cost_search.html"},{default:a(()=>l[18]||(l[18]=[n("统一代价搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/constraint_satisfaction_problem.html"},{default:a(()=>l[19]||(l[19]=[n("约束满足问题搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/simulated_annealing.html"},{default:a(()=>l[20]||(l[20]=[n("模拟退火")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/genetic_algorithm.html"},{default:a(()=>l[21]||(l[21]=[n("遗传算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/ant_colony_optimization.html"},{default:a(()=>l[22]||(l[22]=[n("蚁群算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/particle_swarm_optimization.html"},{default:a(()=>l[23]||(l[23]=[n("粒子群优化")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/search/deep_reinforcement_learning.html"},{default:a(()=>l[24]||(l[24]=[n("深度强化学习")])),_:1})])]),l[27]||(l[27]=o('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="_1-线性搜索-linear-search" tabindex="-1"><a class="header-anchor" href="#_1-线性搜索-linear-search"><span>1. 线性搜索 (Linear Search)</span></a></h3><ul><li><strong>描述</strong>：逐个检查每个元素，直到找到目标元素或遍历完整个数据结构。</li><li><strong>时间复杂度</strong>：O(n)</li><li><strong>空间复杂度</strong>：O(1)</li></ul><h3 id="_2-二分搜索-binary-search" tabindex="-1"><a class="header-anchor" href="#_2-二分搜索-binary-search"><span>2. 二分搜索 (Binary Search)</span></a></h3><ul><li><strong>描述</strong>：在有序数组中查找元素，通过反复将搜索范围减半来查找目标元素。</li><li><strong>时间复杂度</strong>：O(log n)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>前提条件</strong>：数据必须是有序的</li></ul><h3 id="_3-插值搜索-interpolation-search" tabindex="-1"><a class="header-anchor" href="#_3-插值搜索-interpolation-search"><span>3. 插值搜索 (Interpolation Search)</span></a></h3><ul><li><strong>描述</strong>：改进的二分搜索，通过估计目标元素的位置来缩小搜索范围。</li><li><strong>时间复杂度</strong>：O(log log n) 平均，O(n) 最坏</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>前提条件</strong>：数据必须是有序的，且分布均匀</li></ul><h3 id="_4-跳跃搜索-jump-search" tabindex="-1"><a class="header-anchor" href="#_4-跳跃搜索-jump-search"><span>4. 跳跃搜索 (Jump Search)</span></a></h3><ul><li><strong>描述</strong>：在有序数组中查找元素，通过跳跃固定步长来缩小搜索范围，然后进行线性搜索。</li><li><strong>时间复杂度</strong>：O(√n)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>前提条件</strong>：数据必须是有序的</li></ul><h3 id="_5-指数搜索-exponential-search" tabindex="-1"><a class="header-anchor" href="#_5-指数搜索-exponential-search"><span>5. 指数搜索 (Exponential Search)</span></a></h3><ul><li><strong>描述</strong>：在有序数组中查找元素，通过指数增长的步长来找到搜索范围，然后进行二分搜索。</li><li><strong>时间复杂度</strong>：O(log n)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>前提条件</strong>：数据必须是有序的</li></ul><h3 id="_6-分块搜索-block-search" tabindex="-1"><a class="header-anchor" href="#_6-分块搜索-block-search"><span>6. 分块搜索 (Block Search)</span></a></h3><ul><li><strong>描述</strong>：将数据分成块，每块内进行线性搜索，块之间进行二分搜索。</li><li><strong>时间复杂度</strong>：O(√n)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>前提条件</strong>：数据必须是有序的</li></ul><h3 id="_7-深度优先搜索-depth-first-search-dfs" tabindex="-1"><a class="header-anchor" href="#_7-深度优先搜索-depth-first-search-dfs"><span>7. 深度优先搜索 (Depth-First Search, DFS)</span></a></h3><ul><li><strong>描述</strong>：在图或树中，从起始节点开始，沿着每个分支尽可能深入地搜索。</li><li><strong>时间复杂度</strong>：O(V + E)，其中 V 是顶点数，E 是边数</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：图和树的遍历</li></ul><h3 id="_8-广度优先搜索-breadth-first-search-bfs" tabindex="-1"><a class="header-anchor" href="#_8-广度优先搜索-breadth-first-search-bfs"><span>8. 广度优先搜索 (Breadth-First Search, BFS)</span></a></h3><ul><li><strong>描述</strong>：在图或树中，从起始节点开始，逐层搜索每个节点。</li><li><strong>时间复杂度</strong>：O(V + E)，其中 V 是顶点数，E 是边数</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：图和树的遍历</li></ul><h3 id="_9-a-搜索-a-search" tabindex="-1"><a class="header-anchor" href="#_9-a-搜索-a-search"><span>9. A* 搜索 (A* Search)</span></a></h3><ul><li><strong>描述</strong>：启发式搜索算法，结合了广度优先搜索和最佳优先搜索，通过估计函数来找到最短路径。</li><li><strong>时间复杂度</strong>：O(E)，其中 E 是边数</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：路径查找</li></ul><h3 id="_10-dijkstra-算法-dijkstra-s-algorithm" tabindex="-1"><a class="header-anchor" href="#_10-dijkstra-算法-dijkstra-s-algorithm"><span>10. Dijkstra 算法 (Dijkstra&#39;s Algorithm)</span></a></h3><ul><li><strong>描述</strong>：在加权图中查找从起始节点到其他节点的最短路径。</li><li><strong>时间复杂度</strong>：O(V^2) 或 O(E + V log V)（使用优先队列）</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：加权图的最短路径查找</li></ul><h3 id="_11-贝尔曼-福特算法-bellman-ford-algorithm" tabindex="-1"><a class="header-anchor" href="#_11-贝尔曼-福特算法-bellman-ford-algorithm"><span>11. 贝尔曼-福特算法 (Bellman-Ford Algorithm)</span></a></h3><ul><li><strong>描述</strong>：在加权图中查找从起始节点到其他节点的最短路径，允许负权重边。</li><li><strong>时间复杂度</strong>：O(VE)</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：加权图的最短路径查找，允许负权重边</li></ul><h3 id="_12-floyd-warshall-算法-floyd-warshall-algorithm" tabindex="-1"><a class="header-anchor" href="#_12-floyd-warshall-算法-floyd-warshall-algorithm"><span>12. Floyd-Warshall 算法 (Floyd-Warshall Algorithm)</span></a></h3><ul><li><strong>描述</strong>：在加权图中查找所有节点对之间的最短路径。</li><li><strong>时间复杂度</strong>：O(V^3)</li><li><strong>空间复杂度</strong>：O(V^2)</li><li><strong>适用场景</strong>：加权图的所有节点对最短路径查找</li></ul><h3 id="_13-哈希查找-hash-search" tabindex="-1"><a class="header-anchor" href="#_13-哈希查找-hash-search"><span>13. 哈希查找 (Hash Search)</span></a></h3><ul><li><strong>描述</strong>：通过哈希函数将键映射到哈希表中的位置，进行查找。</li><li><strong>时间复杂度</strong>：O(1) 平均，O(n) 最坏</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>适用场景</strong>：快速查找</li></ul><h3 id="_14-分支限界搜索-branch-and-bound" tabindex="-1"><a class="header-anchor" href="#_14-分支限界搜索-branch-and-bound"><span>14. 分支限界搜索 (Branch and Bound)</span></a></h3><ul><li><strong>描述</strong>：用于解决组合优化问题，通过分支和限界策略来减少搜索空间。</li><li><strong>时间复杂度</strong>：取决于具体问题</li><li><strong>空间复杂度</strong>：取决于具体问题</li><li><strong>适用场景</strong>：组合优化问题，如旅行商问题</li></ul><h3 id="_15-iddfs-iterative-deepening-depth-first-search" tabindex="-1"><a class="header-anchor" href="#_15-iddfs-iterative-deepening-depth-first-search"><span>15. IDDFS (Iterative Deepening Depth-First Search)</span></a></h3><ul><li><strong>描述</strong>：结合深度优先搜索和广度优先搜索的优点，通过逐步增加深度限制来进行搜索。</li><li><strong>时间复杂度</strong>：O(b^d)，其中 b 是分支因子，d 是深度</li><li><strong>空间复杂度</strong>：O(d)</li><li><strong>适用场景</strong>：图和树的遍历，特别是当搜索深度未知时</li></ul><h3 id="_16-双向搜索-bidirectional-search" tabindex="-1"><a class="header-anchor" href="#_16-双向搜索-bidirectional-search"><span>16. 双向搜索 (Bidirectional Search)</span></a></h3><ul><li><strong>描述</strong>：从起点和终点同时进行搜索，直到两者相遇，从而减少搜索空间。</li><li><strong>时间复杂度</strong>：O(b^(d/2))，其中 b 是分支因子，d 是深度</li><li><strong>空间复杂度</strong>：O(b^(d/2))</li><li><strong>适用场景</strong>：路径查找</li></ul><h3 id="_17-迭代加深-a-iterative-deepening-a-ida" tabindex="-1"><a class="header-anchor" href="#_17-迭代加深-a-iterative-deepening-a-ida"><span>17. 迭代加深 A* (Iterative Deepening A*, IDA*)</span></a></h3><ul><li><strong>描述</strong>：结合 A* 和迭代加深搜索，通过逐步增加估计成本限制来进行搜索。</li><li><strong>时间复杂度</strong>：取决于启发式函数</li><li><strong>空间复杂度</strong>：O(d)</li><li><strong>适用场景</strong>：路径查找</li></ul><h3 id="_18-贪心搜索-greedy-best-first-search" tabindex="-1"><a class="header-anchor" href="#_18-贪心搜索-greedy-best-first-search"><span>18. 贪心搜索 (Greedy Best-First Search)</span></a></h3><ul><li><strong>描述</strong>：每次选择估计离目标最近的节点进行扩展，使用启发式函数来指导搜索。</li><li><strong>时间复杂度</strong>：O(b^m)，其中 b 是分支因子，m 是最大深度</li><li><strong>空间复杂度</strong>：O(b^m)</li><li><strong>适用场景</strong>：路径查找</li></ul><h3 id="_19-统一代价搜索-uniform-cost-search" tabindex="-1"><a class="header-anchor" href="#_19-统一代价搜索-uniform-cost-search"><span>19. 统一代价搜索 (Uniform Cost Search)</span></a></h3><ul><li><strong>描述</strong>：类似于 Dijkstra 算法，每次扩展代价最小的节点，适用于加权图。</li><li><strong>时间复杂度</strong>：O(b^m)，其中 b 是分支因子，m 是最大深度</li><li><strong>空间复杂度</strong>：O(b^m)</li><li><strong>适用场景</strong>：路径查找</li></ul><h3 id="_20-约束满足问题搜索-constraint-satisfaction-problem-csp" tabindex="-1"><a class="header-anchor" href="#_20-约束满足问题搜索-constraint-satisfaction-problem-csp"><span>20. 约束满足问题搜索 (Constraint Satisfaction Problem, CSP)</span></a></h3><ul><li><strong>描述</strong>：用于解决约束满足问题，通过变量赋值和约束传播来进行搜索。</li><li><strong>时间复杂度</strong>：取决于具体问题</li><li><strong>空间复杂度</strong>：取决于具体问题</li><li><strong>适用场景</strong>：约束满足问题，如数独、图着色</li></ul><h3 id="_21-模拟退火-simulated-annealing" tabindex="-1"><a class="header-anchor" href="#_21-模拟退火-simulated-annealing"><span>21. 模拟退火 (Simulated Annealing)</span></a></h3><ul><li><strong>描述</strong>：启发式搜索算法，通过模拟物理退火过程来找到全局最优解。</li><li><strong>时间复杂度</strong>：取决于冷却计划</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>适用场景</strong>：优化问题</li></ul><h3 id="_22-遗传算法-genetic-algorithm" tabindex="-1"><a class="header-anchor" href="#_22-遗传算法-genetic-algorithm"><span>22. 遗传算法 (Genetic Algorithm)</span></a></h3><ul><li><strong>描述</strong>：基于自然选择和遗传学原理，通过选择、交叉和变异来搜索最优解。</li><li><strong>时间复杂度</strong>：取决于种群大小和迭代次数</li><li><strong>空间复杂度</strong>：取决于种群大小</li><li><strong>适用场景</strong>：优化问题</li></ul><h3 id="_23-蚁群算法-ant-colony-optimization" tabindex="-1"><a class="header-anchor" href="#_23-蚁群算法-ant-colony-optimization"><span>23. 蚁群算法 (Ant Colony Optimization)</span></a></h3><ul><li><strong>描述</strong>：基于蚂蚁觅食行为，通过信息素的积累和挥发来找到最优路径。</li><li><strong>时间复杂度</strong>：取决于蚂蚁数量和迭代次数</li><li><strong>空间复杂度</strong>：取决于蚂蚁数量</li><li><strong>适用场景</strong>：路径优化问题</li></ul><h3 id="_24-粒子群优化-particle-swarm-optimization" tabindex="-1"><a class="header-anchor" href="#_24-粒子群优化-particle-swarm-optimization"><span>24. 粒子群优化 (Particle Swarm Optimization)</span></a></h3><ul><li><strong>描述</strong>：基于群体智能，通过粒子的位置和速度更新来搜索最优解。</li><li><strong>时间复杂度</strong>：取决于粒子数量和迭代次数</li><li><strong>空间复杂度</strong>：取决于粒子数量</li><li><strong>适用场景</strong>：优化问题</li></ul><h3 id="_25-深度强化学习-deep-reinforcement-learning" tabindex="-1"><a class="header-anchor" href="#_25-深度强化学习-deep-reinforcement-learning"><span>25. 深度强化学习 (Deep Reinforcement Learning)</span></a></h3><ul><li><strong>描述</strong>：结合深度学习和强化学习，通过与环境交互来学习最优策略。</li><li><strong>时间复杂度</strong>：取决于具体问题和模型</li><li><strong>空间复杂度</strong>：取决于具体问题和模型</li><li><strong>适用场景</strong>：复杂决策问题</li></ul>',51))])}const p=e(d,[["render",c],["__file","index.html.vue"]]),f=JSON.parse(`{"path":"/md/article/algorithm/search/","title":"搜索算法","lang":"en-US","frontmatter":{"title":"搜索算法","sidebar":false},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"1. 线性搜索 (Linear Search)","slug":"_1-线性搜索-linear-search","link":"#_1-线性搜索-linear-search","children":[]},{"level":3,"title":"2. 二分搜索 (Binary Search)","slug":"_2-二分搜索-binary-search","link":"#_2-二分搜索-binary-search","children":[]},{"level":3,"title":"3. 插值搜索 (Interpolation Search)","slug":"_3-插值搜索-interpolation-search","link":"#_3-插值搜索-interpolation-search","children":[]},{"level":3,"title":"4. 跳跃搜索 (Jump Search)","slug":"_4-跳跃搜索-jump-search","link":"#_4-跳跃搜索-jump-search","children":[]},{"level":3,"title":"5. 指数搜索 (Exponential Search)","slug":"_5-指数搜索-exponential-search","link":"#_5-指数搜索-exponential-search","children":[]},{"level":3,"title":"6. 分块搜索 (Block Search)","slug":"_6-分块搜索-block-search","link":"#_6-分块搜索-block-search","children":[]},{"level":3,"title":"7. 深度优先搜索 (Depth-First Search, DFS)","slug":"_7-深度优先搜索-depth-first-search-dfs","link":"#_7-深度优先搜索-depth-first-search-dfs","children":[]},{"level":3,"title":"8. 广度优先搜索 (Breadth-First Search, BFS)","slug":"_8-广度优先搜索-breadth-first-search-bfs","link":"#_8-广度优先搜索-breadth-first-search-bfs","children":[]},{"level":3,"title":"9. A* 搜索 (A* Search)","slug":"_9-a-搜索-a-search","link":"#_9-a-搜索-a-search","children":[]},{"level":3,"title":"10. Dijkstra 算法 (Dijkstra's Algorithm)","slug":"_10-dijkstra-算法-dijkstra-s-algorithm","link":"#_10-dijkstra-算法-dijkstra-s-algorithm","children":[]},{"level":3,"title":"11. 贝尔曼-福特算法 (Bellman-Ford Algorithm)","slug":"_11-贝尔曼-福特算法-bellman-ford-algorithm","link":"#_11-贝尔曼-福特算法-bellman-ford-algorithm","children":[]},{"level":3,"title":"12. Floyd-Warshall 算法 (Floyd-Warshall Algorithm)","slug":"_12-floyd-warshall-算法-floyd-warshall-algorithm","link":"#_12-floyd-warshall-算法-floyd-warshall-algorithm","children":[]},{"level":3,"title":"13. 哈希查找 (Hash Search)","slug":"_13-哈希查找-hash-search","link":"#_13-哈希查找-hash-search","children":[]},{"level":3,"title":"14. 分支限界搜索 (Branch and Bound)","slug":"_14-分支限界搜索-branch-and-bound","link":"#_14-分支限界搜索-branch-and-bound","children":[]},{"level":3,"title":"15. IDDFS (Iterative Deepening Depth-First Search)","slug":"_15-iddfs-iterative-deepening-depth-first-search","link":"#_15-iddfs-iterative-deepening-depth-first-search","children":[]},{"level":3,"title":"16. 双向搜索 (Bidirectional Search)","slug":"_16-双向搜索-bidirectional-search","link":"#_16-双向搜索-bidirectional-search","children":[]},{"level":3,"title":"17. 迭代加深 A* (Iterative Deepening A*, IDA*)","slug":"_17-迭代加深-a-iterative-deepening-a-ida","link":"#_17-迭代加深-a-iterative-deepening-a-ida","children":[]},{"level":3,"title":"18. 贪心搜索 (Greedy Best-First Search)","slug":"_18-贪心搜索-greedy-best-first-search","link":"#_18-贪心搜索-greedy-best-first-search","children":[]},{"level":3,"title":"19. 统一代价搜索 (Uniform Cost Search)","slug":"_19-统一代价搜索-uniform-cost-search","link":"#_19-统一代价搜索-uniform-cost-search","children":[]},{"level":3,"title":"20. 约束满足问题搜索 (Constraint Satisfaction Problem, CSP)","slug":"_20-约束满足问题搜索-constraint-satisfaction-problem-csp","link":"#_20-约束满足问题搜索-constraint-satisfaction-problem-csp","children":[]},{"level":3,"title":"21. 模拟退火 (Simulated Annealing)","slug":"_21-模拟退火-simulated-annealing","link":"#_21-模拟退火-simulated-annealing","children":[]},{"level":3,"title":"22. 遗传算法 (Genetic Algorithm)","slug":"_22-遗传算法-genetic-algorithm","link":"#_22-遗传算法-genetic-algorithm","children":[]},{"level":3,"title":"23. 蚁群算法 (Ant Colony Optimization)","slug":"_23-蚁群算法-ant-colony-optimization","link":"#_23-蚁群算法-ant-colony-optimization","children":[]},{"level":3,"title":"24. 粒子群优化 (Particle Swarm Optimization)","slug":"_24-粒子群优化-particle-swarm-optimization","link":"#_24-粒子群优化-particle-swarm-optimization","children":[]},{"level":3,"title":"25. 深度强化学习 (Deep Reinforcement Learning)","slug":"_25-深度强化学习-deep-reinforcement-learning","link":"#_25-深度强化学习-deep-reinforcement-learning","children":[]}]}],"git":{"updatedTime":1736074136000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":8,"url":"https://github.com/hyfly233"},{"name":"hyfly233","username":"hyfly233","email":"1274694743@qq.com","commits":4,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/article/algorithm/search/index.md"}`);export{p as comp,f as data};
