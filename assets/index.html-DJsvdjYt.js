import{_ as n,c as e,a,b as i,d as t,f as h,r as s,o as m,e as o}from"./app-chPKMbRn.js";const g={};function u(d,r){const l=s("RouteLink");return m(),e("div",null,[r[12]||(r[12]=a("h1",{id:"字符串匹配算法",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#字符串匹配算法"},[a("span",null,"字符串匹配算法")])],-1)),r[13]||(r[13]=a("h2",{id:"字符串匹配算法目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#字符串匹配算法目录"},[a("span",null,"字符串匹配算法目录")])],-1)),a("ul",null,[a("li",null,[i(l,{to:"/md/article/algorithm/match/naive_string_matching.html"},{default:t(()=>r[0]||(r[0]=[o("朴素字符串匹配算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/kmp_algorithm.html"},{default:t(()=>r[1]||(r[1]=[o("Knuth-Morris-Pratt 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/boyer_moore_algorithm.html"},{default:t(()=>r[2]||(r[2]=[o("Boyer-Moore 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/rabin_karp_algorithm.html"},{default:t(()=>r[3]||(r[3]=[o("Rabin-Karp 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/sunday_algorithm.html"},{default:t(()=>r[4]||(r[4]=[o("Sunday 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/aho_corasick_algorithm.html"},{default:t(()=>r[5]||(r[5]=[o("Aho-Corasick 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/horspool_algorithm.html"},{default:t(()=>r[6]||(r[6]=[o("Horspool 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/zhu_takaoka_algorithm.html"},{default:t(()=>r[7]||(r[7]=[o("Zhu-Takaoka 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/bitap_algorithm.html"},{default:t(()=>r[8]||(r[8]=[o("Bitap 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/wu_manber_algorithm.html"},{default:t(()=>r[9]||(r[9]=[o("Wu-Manber 算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/karp_rabin_algorithm.html"},{default:t(()=>r[10]||(r[10]=[o("Karp-Rabin 指纹算法")])),_:1})]),a("li",null,[i(l,{to:"/md/article/algorithm/match/ukkonens_algorithm.html"},{default:t(()=>r[11]||(r[11]=[o("Ukkonen's 算法")])),_:1})])]),r[14]||(r[14]=h('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>字符串匹配算法用于在文本中查找子字符串或模式。以下是一些常见的字符串匹配算法：</p><h3 id="_1-朴素字符串匹配算法-naive-string-matching-algorithm" tabindex="-1"><a class="header-anchor" href="#_1-朴素字符串匹配算法-naive-string-matching-algorithm"><span>1. 朴素字符串匹配算法 (Naive String Matching Algorithm)</span></a></h3><ul><li><strong>描述</strong>：逐个字符比较文本和模式，直到找到匹配或遍历完整个文本。</li><li><strong>时间复杂度</strong>：O((n - m + 1) * m)，其中 n 是文本长度，m 是模式长度</li><li><strong>空间复杂度</strong>：O(1)</li></ul><h3 id="_2-knuth-morris-pratt-算法-kmp-algorithm" tabindex="-1"><a class="header-anchor" href="#_2-knuth-morris-pratt-算法-kmp-algorithm"><span>2. Knuth-Morris-Pratt 算法 (KMP Algorithm)</span></a></h3><ul><li><strong>描述</strong>：通过预处理模式，构建部分匹配表（前缀函数），在匹配过程中避免重复比较。</li><li><strong>时间复杂度</strong>：O(n + m)</li><li><strong>空间复杂度</strong>：O(m)</li></ul><h3 id="_3-boyer-moore-算法-boyer-moore-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-boyer-moore-算法-boyer-moore-algorithm"><span>3. Boyer-Moore 算法 (Boyer-Moore Algorithm)</span></a></h3><ul><li><strong>描述</strong>：从右向左比较模式和文本，通过预处理模式，使用坏字符规则和好后缀规则来跳过不必要的比较。</li><li><strong>时间复杂度</strong>：O(n) 平均，O(nm) 最坏</li><li><strong>空间复杂度</strong>：O(m)</li></ul><h3 id="_4-rabin-karp-算法-rabin-karp-algorithm" tabindex="-1"><a class="header-anchor" href="#_4-rabin-karp-算法-rabin-karp-algorithm"><span>4. Rabin-Karp 算法 (Rabin-Karp Algorithm)</span></a></h3><ul><li><strong>描述</strong>：使用哈希函数计算模式和文本子串的哈希值，通过比较哈希值来查找匹配。</li><li><strong>时间复杂度</strong>：O(n + m) 平均，O(nm) 最坏</li><li><strong>空间复杂度</strong>：O(1)</li></ul><h3 id="_5-sunday-算法-sunday-algorithm" tabindex="-1"><a class="header-anchor" href="#_5-sunday-算法-sunday-algorithm"><span>5. Sunday 算法 (Sunday Algorithm)</span></a></h3><ul><li><strong>描述</strong>：Boyer-Moore 算法的变种，通过预处理模式，使用最右字符规则来跳过不必要的比较。</li><li><strong>时间复杂度</strong>：O(n) 平均，O(nm) 最坏</li><li><strong>空间复杂度</strong>：O(m)</li></ul><h3 id="_6-aho-corasick-算法-aho-corasick-algorithm" tabindex="-1"><a class="header-anchor" href="#_6-aho-corasick-算法-aho-corasick-algorithm"><span>6. Aho-Corasick 算法 (Aho-Corasick Algorithm)</span></a></h3><ul><li><strong>描述</strong>：多模式匹配算法，通过构建有限状态自动机（Trie 树和失败函数），在一次遍历中查找所有模式。</li><li><strong>时间复杂度</strong>：O(n + m + z)，其中 z 是匹配到的模式数量</li><li><strong>空间复杂度</strong>：O(m)</li></ul><h3 id="_7-horspool-算法-horspool-algorithm" tabindex="-1"><a class="header-anchor" href="#_7-horspool-算法-horspool-algorithm"><span>7. Horspool 算法 (Horspool Algorithm)</span></a></h3><ul><li><strong>描述</strong>：Boyer-Moore 算法的简化版本，只使用坏字符规则来跳过不必要的比较。</li><li><strong>时间复杂度</strong>：O(n) 平均，O(nm) 最坏</li><li><strong>空间复杂度</strong>：O(m)</li></ul><h3 id="_8-zhu-takaoka-算法-zhu-takaoka-algorithm" tabindex="-1"><a class="header-anchor" href="#_8-zhu-takaoka-算法-zhu-takaoka-algorithm"><span>8. Zhu-Takaoka 算法 (Zhu-Takaoka Algorithm)</span></a></h3><ul><li><strong>描述</strong>：Boyer-Moore 算法的改进版本，通过预处理模式，使用双字符跳跃来提高效率。</li><li><strong>时间复杂度</strong>：O(n) 平均，O(nm) 最坏</li><li><strong>空间复杂度</strong>：O(m)</li></ul><h3 id="_9-bitap-算法-bitap-algorithm" tabindex="-1"><a class="header-anchor" href="#_9-bitap-算法-bitap-algorithm"><span>9. Bitap 算法 (Bitap Algorithm)</span></a></h3><ul><li><strong>描述</strong>：基于位操作的字符串匹配算法，通过位掩码来实现快速匹配。</li><li><strong>时间复杂度</strong>：O(nm) 最坏</li><li><strong>空间复杂度</strong>：O(m)</li></ul><h3 id="_10-wu-manber-算法-wu-manber-algorithm" tabindex="-1"><a class="header-anchor" href="#_10-wu-manber-算法-wu-manber-algorithm"><span>10. Wu-Manber 算法 (Wu-Manber Algorithm)</span></a></h3><ul><li><strong>描述</strong>：多模式匹配算法，通过预处理模式，使用哈希表和位掩码来实现快速匹配。</li><li><strong>时间复杂度</strong>：O(n) 平均，O(nm) 最坏</li><li><strong>空间复杂度</strong>：O(m)</li></ul><h3 id="_11-karp-rabin-指纹算法-karp-rabin-fingerprint-algorithm" tabindex="-1"><a class="header-anchor" href="#_11-karp-rabin-指纹算法-karp-rabin-fingerprint-algorithm"><span>11. Karp-Rabin 指纹算法 (Karp-Rabin Fingerprint Algorithm)</span></a></h3><ul><li><strong>描述</strong>：Rabin-Karp 算法的变种，通过滚动哈希函数来计算模式和文本子串的哈希值。</li><li><strong>时间复杂度</strong>：O(n + m) 平均，O(nm) 最坏</li><li><strong>空间复杂度</strong>：O(1)</li></ul><h3 id="_12-ukkonen-s-算法-ukkonen-s-algorithm" tabindex="-1"><a class="header-anchor" href="#_12-ukkonen-s-算法-ukkonen-s-algorithm"><span>12. Ukkonen&#39;s 算法 (Ukkonen&#39;s Algorithm)</span></a></h3><ul><li><strong>描述</strong>：用于构建后缀树的在线算法，可以用于快速字符串匹配。</li><li><strong>时间复杂度</strong>：O(n)</li><li><strong>空间复杂度</strong>：O(n)</li></ul>',26))])}const p=n(g,[["render",u],["__file","index.html.vue"]]),b=JSON.parse(`{"path":"/md/article/algorithm/match/","title":"字符串匹配算法","lang":"en-US","frontmatter":{"title":"字符串匹配算法","sidebar":false},"headers":[{"level":2,"title":"字符串匹配算法目录","slug":"字符串匹配算法目录","link":"#字符串匹配算法目录","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"1. 朴素字符串匹配算法 (Naive String Matching Algorithm)","slug":"_1-朴素字符串匹配算法-naive-string-matching-algorithm","link":"#_1-朴素字符串匹配算法-naive-string-matching-algorithm","children":[]},{"level":3,"title":"2. Knuth-Morris-Pratt 算法 (KMP Algorithm)","slug":"_2-knuth-morris-pratt-算法-kmp-algorithm","link":"#_2-knuth-morris-pratt-算法-kmp-algorithm","children":[]},{"level":3,"title":"3. Boyer-Moore 算法 (Boyer-Moore Algorithm)","slug":"_3-boyer-moore-算法-boyer-moore-algorithm","link":"#_3-boyer-moore-算法-boyer-moore-algorithm","children":[]},{"level":3,"title":"4. Rabin-Karp 算法 (Rabin-Karp Algorithm)","slug":"_4-rabin-karp-算法-rabin-karp-algorithm","link":"#_4-rabin-karp-算法-rabin-karp-algorithm","children":[]},{"level":3,"title":"5. Sunday 算法 (Sunday Algorithm)","slug":"_5-sunday-算法-sunday-algorithm","link":"#_5-sunday-算法-sunday-algorithm","children":[]},{"level":3,"title":"6. Aho-Corasick 算法 (Aho-Corasick Algorithm)","slug":"_6-aho-corasick-算法-aho-corasick-algorithm","link":"#_6-aho-corasick-算法-aho-corasick-algorithm","children":[]},{"level":3,"title":"7. Horspool 算法 (Horspool Algorithm)","slug":"_7-horspool-算法-horspool-algorithm","link":"#_7-horspool-算法-horspool-algorithm","children":[]},{"level":3,"title":"8. Zhu-Takaoka 算法 (Zhu-Takaoka Algorithm)","slug":"_8-zhu-takaoka-算法-zhu-takaoka-algorithm","link":"#_8-zhu-takaoka-算法-zhu-takaoka-algorithm","children":[]},{"level":3,"title":"9. Bitap 算法 (Bitap Algorithm)","slug":"_9-bitap-算法-bitap-algorithm","link":"#_9-bitap-算法-bitap-algorithm","children":[]},{"level":3,"title":"10. Wu-Manber 算法 (Wu-Manber Algorithm)","slug":"_10-wu-manber-算法-wu-manber-algorithm","link":"#_10-wu-manber-算法-wu-manber-algorithm","children":[]},{"level":3,"title":"11. Karp-Rabin 指纹算法 (Karp-Rabin Fingerprint Algorithm)","slug":"_11-karp-rabin-指纹算法-karp-rabin-fingerprint-algorithm","link":"#_11-karp-rabin-指纹算法-karp-rabin-fingerprint-algorithm","children":[]},{"level":3,"title":"12. Ukkonen's 算法 (Ukkonen's Algorithm)","slug":"_12-ukkonen-s-算法-ukkonen-s-algorithm","link":"#_12-ukkonen-s-算法-ukkonen-s-algorithm","children":[]}]}],"git":{"updatedTime":1736074136000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":8,"url":"https://github.com/hyfly233"},{"name":"hyfly233","username":"hyfly233","email":"1274694743@qq.com","commits":4,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/article/algorithm/match/index.md"}`);export{p as comp,b as data};
