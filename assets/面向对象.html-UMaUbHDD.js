import{_ as e,c as a,f as i,o as n}from"./app-chPKMbRn.js";const s={};function h(t,l){return n(),a("div",null,l[0]||(l[0]=[i('<h2 id="面向对象的三大特性" tabindex="-1"><a class="header-anchor" href="#面向对象的三大特性"><span>面向对象的三大特性</span></a></h2><ul><li>继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求</li><li>封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏</li><li>多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的</li></ul><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><h3 id="继承关键字" tabindex="-1"><a class="header-anchor" href="#继承关键字"><span>继承关键字</span></a></h3><ul><li>extends：类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类</li><li>implements：使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）</li><li>super：通过super关键字来实现对父类成员的访问，用来引用当前对象的父类</li><li>this：指向自己的引用</li><li>final：使用 final 关键字声明类，就是把类定义定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写</li></ul><h3 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器"><span>构造器</span></a></h3><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表。</p><p>如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p><h3 id="为什么-java-语言不支持多重继承" tabindex="-1"><a class="header-anchor" href="#为什么-java-语言不支持多重继承"><span>为什么 Java 语言不支持多重继承</span></a></h3><p>多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能</p><h2 id="重写重载" tabindex="-1"><a class="header-anchor" href="#重写重载"><span>重写重载</span></a></h2><h3 id="重写" tabindex="-1"><a class="header-anchor" href="#重写"><span>重写</span></a></h3><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写，重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。</p><h3 id="重载" tabindex="-1"><a class="header-anchor" href="#重载"><span>重载</span></a></h3><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><h3 id="重载和重写什么区别" tabindex="-1"><a class="header-anchor" href="#重载和重写什么区别"><span>重载和重写什么区别？</span></a></h3><ul><li>重写：</li></ul><ol><li><ol><li>参数列表必须完全与被重写的方法相同，否则不能称其为重写而是重载</li><li>返回的类型必须一直与被重写的方法的返回类型相同，否则不能称其为重写而是重载</li><li>访问修饰符的限制一定要大于被重写方法的访问修饰符</li><li>重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</li></ol></li></ol><ul><li>重载：</li></ul><ol><li><ol><li>必须具有不同的参数列表</li><li>可以有不同的返回类型，只要参数列表不同就可以了</li><li>可以有不同的访问修饰符</li><li>可以抛出不同的异常</li></ol></li></ol><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><p>多态是同一个行为具有多个不同表现形式或形态的能力。同一个接口，使用不同的实例而执行不同操作</p><h3 id="多态存在的三个必要条件" tabindex="-1"><a class="header-anchor" href="#多态存在的三个必要条件"><span>多态存在的三个必要条件</span></a></h3><ul><li>继承</li><li>重写</li><li>父引用指向子类对象 Parent p = new Child()</li></ul><h3 id="多态机制" tabindex="-1"><a class="header-anchor" href="#多态机制"><span>多态机制</span></a></h3><ul><li>重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定调用哪个方法</li><li>覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个对象的方法，即需要到运行期才能确定调用哪个方法</li></ul><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h2><p>使用 abstract class 来定义抽象类，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类，抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用</p><h3 id="抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class" tabindex="-1"><a class="header-anchor" href="#抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class"><span>抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？</span></a></h3><p>抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类</p><h3 id="抽象方法" tabindex="-1"><a class="header-anchor" href="#抽象方法"><span>抽象方法</span></a></h3><p>Abstract 关键字用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体</p><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h2><p>在面向对象程式设计方法中，封装（Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制</p><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><p>接口（Interface），在JAVA中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明</p><h3 id="接口是否可继承-extends-接口" tabindex="-1"><a class="header-anchor" href="#接口是否可继承-extends-接口"><span>接口是否可继承（extends）接口？</span></a></h3><p>接口可以继承接口，而且支持多重继承。</p><h3 id="接口和抽象类的相同点和不同点" tabindex="-1"><a class="header-anchor" href="#接口和抽象类的相同点和不同点"><span>接口和抽象类的相同点和不同点</span></a></h3><p>相同点:</p><ul><li>都不能被实例化。</li><li>接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</li></ul><p>不同点：</p><ul><li>接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。</li><li>实现接口的关键字为 implements，继承抽象类的关键字为 extends。一个类可以实现多个接口，只能继承一个抽象类。</li><li>当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法</li></ul><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h2><h2 id="包" tabindex="-1"><a class="header-anchor" href="#包"><span>包</span></a></h2>',46)]))}const c=e(s,[["render",h],["__file","面向对象.html.vue"]]),d=JSON.parse('{"path":"/md/interview/java/basic/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"面向对象的三大特性","slug":"面向对象的三大特性","link":"#面向对象的三大特性","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[{"level":3,"title":"继承关键字","slug":"继承关键字","link":"#继承关键字","children":[]},{"level":3,"title":"构造器","slug":"构造器","link":"#构造器","children":[]},{"level":3,"title":"为什么 Java 语言不支持多重继承","slug":"为什么-java-语言不支持多重继承","link":"#为什么-java-语言不支持多重继承","children":[]}]},{"level":2,"title":"重写重载","slug":"重写重载","link":"#重写重载","children":[{"level":3,"title":"重写","slug":"重写","link":"#重写","children":[]},{"level":3,"title":"重载","slug":"重载","link":"#重载","children":[]},{"level":3,"title":"重载和重写什么区别？","slug":"重载和重写什么区别","link":"#重载和重写什么区别","children":[]}]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[{"level":3,"title":"多态存在的三个必要条件","slug":"多态存在的三个必要条件","link":"#多态存在的三个必要条件","children":[]},{"level":3,"title":"多态机制","slug":"多态机制","link":"#多态机制","children":[]}]},{"level":2,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[{"level":3,"title":"抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？","slug":"抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class","link":"#抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class","children":[]},{"level":3,"title":"抽象方法","slug":"抽象方法","link":"#抽象方法","children":[]}]},{"level":2,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[{"level":3,"title":"接口是否可继承（extends）接口？","slug":"接口是否可继承-extends-接口","link":"#接口是否可继承-extends-接口","children":[]},{"level":3,"title":"接口和抽象类的相同点和不同点","slug":"接口和抽象类的相同点和不同点","link":"#接口和抽象类的相同点和不同点","children":[]}]},{"level":2,"title":"枚举","slug":"枚举","link":"#枚举","children":[]},{"level":2,"title":"包","slug":"包","link":"#包","children":[]}],"git":{"updatedTime":1711074643000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":6,"url":"https://github.com/hyfly233"},{"name":"hyfly233","username":"hyfly233","email":"1274694743@qq.com","commits":4,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/interview/java/basic/面向对象.md"}');export{c as comp,d as data};
