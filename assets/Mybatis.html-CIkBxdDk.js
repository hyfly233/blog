import{_ as a,c as l,f as e,o as i}from"./app-chPKMbRn.js";const n={};function t(r,s){return i(),l("div",null,s[0]||(s[0]=[e(`<h1 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>Mybatis</span></a></h1><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="什么是-mybatis" tabindex="-1"><a class="header-anchor" href="#什么是-mybatis"><span>什么是 MyBatis</span></a></h3><p>MyBatis 是一个可以自定义 SQL、存储过程和高级映射的持久层框架</p><h3 id="mybatis-的好处是什么" tabindex="-1"><a class="header-anchor" href="#mybatis-的好处是什么"><span>MyBatis 的好处是什么</span></a></h3><ul><li>MyBatis 把 sql 语句从 Java 源程序中独立出来，放在单独的 XML 文件中编写，给程序的维护带来了很大便利</li><li>MyBatis 封装了底层 JDBC API 的调用细节，并能自动将结果集转换成 Java Bean 对象，大大简化了 Java 数据库编程的重复工作</li><li>因为 MyBatis 需要自己去编写 sql 语句，可以结合数据库自身的特点灵活控制 sql 语句，因此能够实现比 Hibernate 等全自动 orm 框架更高的查询效率，能够完成复杂查询</li></ul><h3 id="为什么说-mybatis-是半自动-orm-映射工具、它与全自动的区别在哪里" tabindex="-1"><a class="header-anchor" href="#为什么说-mybatis-是半自动-orm-映射工具、它与全自动的区别在哪里"><span>为什么说 Mybatis 是半自动 ORM 映射工具、它与全自动的区别在哪里？</span></a></h3><ul><li>Hibernate 属于全自动 ORM 映射工具，使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的</li><li>Mybatis 在查询关联对象或关联集合对象时，需要手动编写 sql 来完成，所以，称之为半自动 ORM 映射工具</li></ul><h3 id="mybatis-与-hibernate-有哪些不同" tabindex="-1"><a class="header-anchor" href="#mybatis-与-hibernate-有哪些不同"><span>MyBatis 与 Hibernate 有哪些不同</span></a></h3><ul><li>Mybatis 不完全是一个 ORM 框架，因为 MyBatis 需要自己编写 Sql 语句，不过 mybatis 可以通过 XML 或注解方式灵活配置要运行的 sql 语句，并将 java 对象和 sql 语句映射生成最终执行的 sql，最后将 sql 执行的结果再映射生成 java 对象。</li><li>Mybatis 学习门槛低，可直接编写原生态 sql，可严格控制 sql 执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等，因为这类软件需求变化频繁，一但需求变化要求成果输出迅速。但是灵活的前提是 mybatis 无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套 sql 映射文件，工作量大。</li><li>Hibernate 对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用 hibernate 开发可以节省很多代码，提高效率。但是 Hibernate 的缺点是学习门槛高，要精通门槛更高，而且怎么设计 O/R 映射，在性能和对象模型之间如何权衡，以及怎样用好 Hibernate 需要具有很强的经验和能力才行。</li></ul><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h2><h3 id="mybatis-缓存是什么" tabindex="-1"><a class="header-anchor" href="#mybatis-缓存是什么"><span>MyBatis 缓存是什么</span></a></h3><p>MyBatis 的缓存分为一级缓存和二级缓存</p><ul><li><p>一级缓存放在 <strong>session</strong> 里面，默认就有，通过同一个 SqlSession 查询的数据会被缓存，下次查询相同的数据，会直接从缓存中读取</p></li><li><p>二级缓存放在它的<strong>命名空间</strong>里，默认是不打开的（不建议使用，跨 SqlSession 导致严重的脏读），使用二级缓存属性类需要实现 Serializable 序列化接口，查出的数据先保存在一级缓存中，会话提交或关闭后数据从一级缓存转移到二级缓存。实际开发中使用第三方缓存</p><ol><li><p>第一步：在配置文件中标明配置</p><div class="language-xml line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-xml;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">&lt;settings&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    &lt;setting</span><span style="color:#8FBCBB;"> name</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">cacheEnabled</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> value</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">true</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">/&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">&lt;/settings&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第二步：开启二级缓存</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">CacheNamespace</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> interface</span><span style="color:#8FBCBB;"> TestMapper</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> TestDto</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;font-weight:bold;"> Serializable</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-xml;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">&lt;mapper</span><span style="color:#8FBCBB;"> namespace</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">TestMapper</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    &lt;cache</span><span style="color:#8FBCBB;"> eviction</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">FIFO</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> flushInterval</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">60000</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> size</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">512</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> readOnly</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">true</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> /&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    &lt;select&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">      select * from test</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">  	&lt;/select&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">&lt;/mapper&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul><h3 id="mybatis-一级缓存失效的条件" tabindex="-1"><a class="header-anchor" href="#mybatis-一级缓存失效的条件"><span>MyBatis <strong>一级</strong>缓存失效的条件</span></a></h3><ul><li>不同的 SqlSession 对应不同的一级缓存</li><li>同一个 SqlSession 但是查询条件不同</li><li>同一个 SqlSession 两次相同的查询期间做了增删改操作</li><li>同一个 SqlSession 两次相同的查询期间手动清空了缓存</li></ul><h3 id="mybatis-一级缓存清除方法" tabindex="-1"><a class="header-anchor" href="#mybatis-一级缓存清除方法"><span>MyBatis <strong>一级</strong>缓存清除方法</span></a></h3><ol><li><p>执行 SqlSession 的 commit（执行插入、更新、删除操作后）</p></li><li><p>执行 SqlSession 的 close 方法</p></li><li><p>执行 SqlSession 的 clearCache 方法</p></li><li><p>映射文件XML中添加 <code>flushCache=“true”</code></p><div class="language-xml line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-xml;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">&lt;select</span><span style="color:#8FBCBB;"> flushCache</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">true</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> &lt;/select&gt;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="分页" tabindex="-1"><a class="header-anchor" href="#分页"><span>分页</span></a></h2><h3 id="mybatis-分页的-分页插件的原理是什么" tabindex="-1"><a class="header-anchor" href="#mybatis-分页的-分页插件的原理是什么"><span>Mybatis 分页的？分页插件的原理是什么？</span></a></h3><ul><li>Mybatis 使用 RowBounds 对象进行分页，也可以直接编写 sql 实现分页，也可以使用 Mybatis 的分页插件</li><li>分页插件的原理：实现 Mybatis 提供的接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql。如：select <em>from student，拦截 sql 后重写为：select t.</em>* from （select * from student）t limit 0，10</li></ul><h2 id="动态-sql" tabindex="-1"><a class="header-anchor" href="#动态-sql"><span>动态 SQL</span></a></h2><h3 id="mybatis-动态-sql-是什么" tabindex="-1"><a class="header-anchor" href="#mybatis-动态-sql-是什么"><span>Mybatis 动态 SQL 是什么</span></a></h3><ul><li>Mybatis 动态 sql 可以在 Xml 映射文件内，以标签的形式编写动态 sql，完成逻辑判断和动态拼接 sql 的功能</li><li>其执行原理是使用 OGNL 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能</li><li>一共 9 种动态 sql 标签 <ol><li>trim</li><li>where</li><li>set</li><li>foreach</li><li>if</li><li>choose</li><li>when</li><li>otherwise</li><li>bind</li></ol></li></ul><h3 id="字符串替换-和" tabindex="-1"><a class="header-anchor" href="#字符串替换-和"><span>字符串替换 #{} 和 \${}</span></a></h3><ul><li>在处理 <strong>#{}</strong> 时会进行预处理，会将 sql 中的 <strong>#{}</strong> 替换为 <strong>?</strong> 号，调用 PreparedStatement 的 set 方法来赋值</li><li>在处理 <strong>\${}</strong> 时，就是把 <strong>\${}</strong> 替换成变量的值</li><li>使用 <strong>#{}</strong> 可以有效的防止 <strong>SQL注入</strong>，提高系统安全性</li></ul><h2 id="映射" tabindex="-1"><a class="header-anchor" href="#映射"><span>映射</span></a></h2><h3 id="在-mapper-中如何传递多个参数" tabindex="-1"><a class="header-anchor" href="#在-mapper-中如何传递多个参数"><span>在 mapper 中如何传递多个参数</span></a></h3><ul><li>直接在方法中传递参数，xml 文件用 <strong>#{0} #{1}</strong> 来获取</li><li>使用 <strong>@param</strong> 注解后，直接在 xml 文件中通过 <strong>#{name}</strong> 来获取</li></ul><h3 id="简述-mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系" tabindex="-1"><a class="header-anchor" href="#简述-mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系"><span>简述 Mybatis 的 Xml 映射文件和 Mybatis 内部数据结构之间的映射关系</span></a></h3><ul><li>Mybatis 将所有 Xml 配置信息都封装到 All-In-One 重量级对象 Configuration 内部</li><li>在 Xml 映射文件中，标签会被解析为 ParameterMap 对象，其每个子元素会被解析为 ParameterMapping 对象</li><li>标签会被解析为ResultMap 对象，其每个子元素会被解析为 ResultMapping 对象</li><li>每一个标签均会被解析为 MappedStatement 对象，标签内的 sql 会被解析为 BoundSql 对象</li></ul><h3 id="通常一个-xml-映射文件-都会写一个-dao-接口与之对应-dao-是否可以重载" tabindex="-1"><a class="header-anchor" href="#通常一个-xml-映射文件-都会写一个-dao-接口与之对应-dao-是否可以重载"><span>通常一个 Xml 映射文件，都会写一个 Dao 接口与之对应，Dao 是否可以重载</span></a></h3><ul><li>不能重载</li><li>因为通过 Dao 寻找 Xml 对应的 sql 的时候 <strong>全限名 + 方法名</strong> 的保存和寻找策略</li><li>接口工作原理为 jdk 动态代理原理，运行时会为 dao 生成 proxy，代理对象会拦截接口方法，去执行对应的 sql 返回数据</li></ul><h3 id="mybatis-的-xml-映射文件中-不同的-xml-映射文件-id-是否可以重复" tabindex="-1"><a class="header-anchor" href="#mybatis-的-xml-映射文件中-不同的-xml-映射文件-id-是否可以重复"><span>Mybatis 的 Xml 映射文件中，不同的 Xml 映射文件，id 是否可以重复？</span></a></h3><ul><li>不同的 Xml 映射文件，如果配置了 namespace，那么 id 可以重复</li><li>如果没有配置 namespace，那么 id 不能重复</li><li>namespace 不是必须的</li><li><strong>namespace + id</strong> 是作为 <strong>Map&lt;String, MappedStatement&gt;</strong> 的 key 使用的，如果没有 namespace，那么 id 重复会导致数据互相覆盖</li></ul><h3 id="mybatis-是否可以映射-enum-枚举类" tabindex="-1"><a class="header-anchor" href="#mybatis-是否可以映射-enum-枚举类"><span>Mybatis 是否可以映射 Enum 枚举类？</span></a></h3><ul><li>Mybatis 可以映射枚举类</li><li>Mybatis 可以映射任何对象到表的一列上。</li></ul><h3 id="mybatis-自定义映射方式" tabindex="-1"><a class="header-anchor" href="#mybatis-自定义映射方式"><span>Mybatis 自定义映射方式</span></a></h3><ul><li>实现 <strong>TypeHandler</strong> 接口的 <strong>setParameter()</strong> 和 <strong>getResult()</strong> 方法</li><li><strong>setParameter()</strong> 方法代表设置 sql 问号占位符参数</li><li><strong>getResult()</strong> 方法代表获取列查询结果</li><li>TypeHandler 有两个作用 <ul><li>完成 javaType 到 jdbcType 的转换</li><li>完成 jdbcType 到 javaType 的转换</li></ul></li></ul><h2 id="绑定" tabindex="-1"><a class="header-anchor" href="#绑定"><span>绑定</span></a></h2><h3 id="mybatis-的接口绑定是什么" tabindex="-1"><a class="header-anchor" href="#mybatis-的接口绑定是什么"><span>MyBatis 的接口绑定是什么</span></a></h3><p>接口映射就是在 MyBatis 中任意定义接口，然后把接口里面的方法和 SQL 语句绑定，直接调用接口方法就可以，这样比 SqlSession 提供的方法有更加灵活的选择和设置</p><h3 id="接口绑定有几种实现方式" tabindex="-1"><a class="header-anchor" href="#接口绑定有几种实现方式"><span>接口绑定有几种实现方式</span></a></h3><p>接口绑定有两种实现方式</p><ul><li>通过注解绑定，就是在接口的方法上面加上 @Select @Update 等注解里面包含 Sql 语句来绑定</li><li>通过 xml 里面写 SQL 来绑定,在这种情况下，要指定 xml 映射文件里面的 namespace 必须为接口的全路径名</li></ul><h3 id="当实体类中的属性名和表中的字段名不一样-如果将查询的结果封装到指定-pojo" tabindex="-1"><a class="header-anchor" href="#当实体类中的属性名和表中的字段名不一样-如果将查询的结果封装到指定-pojo"><span>当实体类中的属性名和表中的字段名不一样，如果将查询的结果封装到指定 pojo</span></a></h3><ul><li>通过在查询的 sql 语句中定义字段名的别名</li><li>通过来映射字段名和实体类属性名的一一对应的关系</li></ul><h3 id="如何获取自动生成的主键值" tabindex="-1"><a class="header-anchor" href="#如何获取自动生成的主键值"><span>如何获取自动生成的主键值？</span></a></h3><p>配置文件设置 usegeneratedkeys 为 true</p><h3 id="resulttype、resultmap-的区别" tabindex="-1"><a class="header-anchor" href="#resulttype、resultmap-的区别"><span>resultType、resultMap 的区别？</span></a></h3><ul><li>类的名字和数据库相同时，可以直接设置 resultType 参数为 Pojo 类</li><li>若不同，需要设置 resultMap 将结果名字和 Pojo 名字进行转换</li></ul><h3 id="mybatis-延迟加载" tabindex="-1"><a class="header-anchor" href="#mybatis-延迟加载"><span>Mybatis 延迟加载</span></a></h3><ul><li>Mybatis 仅支持 <strong>association</strong> 和 <strong>collection</strong> 关联的延迟加载，association 指的就是一对一，collection 指的就是一对多查询</li><li>在 Mybatis 配置文件中，可以配置是否启用延迟加载 <strong>lazyLoadingEnabled = true/false</strong></li><li>原理是使用 CGLIB 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法</li><li>比如调用 a.getB().getName()，拦截器 invoke() 方法发现 a.getB() 是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调用 a.setB(b)，于是 a 的对象 b 属性就有值了，接着完成 a.getB().getName() 方法的调用</li></ul><h3 id="使用-mybatis-的-mapper-接口调用时有哪些要求" tabindex="-1"><a class="header-anchor" href="#使用-mybatis-的-mapper-接口调用时有哪些要求"><span>使用 MyBatis 的 mapper 接口调用时有哪些要求</span></a></h3><ul><li>Mapper 接口方法名和 mapper.xml 中定义的每个 sql 的 id 相同</li><li>Mapper 接口方法的输入参数类型和 mapper.xml 中定义的每个 sql 的 parameterType 的类型相同</li><li>Mapper 接口方法的输出参数类型和 mapper.xml 中定义的每个 sql 的 resultType 的类型相同</li><li>Mapper.xml 文件中的 namespace 即是 mapper 接口的类路径</li></ul><h2 id="执行器" tabindex="-1"><a class="header-anchor" href="#执行器"><span>执行器</span></a></h2><h3 id="mybatis-都有哪些-executor-执行器" tabindex="-1"><a class="header-anchor" href="#mybatis-都有哪些-executor-执行器"><span>Mybatis 都有哪些 Executor 执行器</span></a></h3><ul><li><strong>SimpleExecutor</strong>：每执行一次 update 或 select，就开启一个 Statement 对象，用完立刻关闭 Statement 对象</li><li><strong>ReuseExecutor</strong>：执行 update 或 select，以 sql 作为 key 查找 Statement 对象，存在就使用，不存在就创建，用完后，不关闭 Statement 对象，而是放置于 Map</li><li><strong>BatchExecutor</strong>：完成批处理</li></ul><h3 id="mybatis-中如何指定-executor-执行器" tabindex="-1"><a class="header-anchor" href="#mybatis-中如何指定-executor-执行器"><span>Mybatis 中如何指定 Executor 执行器</span></a></h3><p>在 Mybatis 配置文件中，可以指定默认的 ExecutorType 执行器类型，也可以手动给 DefaultSqlSessionFactory 的创建 SqlSession 的方法传递 ExecutorType 类型参数</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="ibatis-和-mybatis-在核心处理类分别叫什么" tabindex="-1"><a class="header-anchor" href="#ibatis-和-mybatis-在核心处理类分别叫什么"><span>IBatis 和 MyBatis 在核心处理类分别叫什么？</span></a></h3><p>IBatis 里面的核心处理类交 SqlMapClient，MyBatis 里面的核心处理类叫做 SqlSession</p><h3 id="mybatis-中如何执行批处理" tabindex="-1"><a class="header-anchor" href="#mybatis-中如何执行批处理"><span>Mybatis 中如何执行批处理？</span></a></h3><p>使用 BatchExecutor 完成批处理</p>`,65)]))}const o=a(n,[["render",t],["__file","Mybatis.html.vue"]]),c=JSON.parse('{"path":"/md/interview/database/orm_tool/Mybatis.html","title":"Mybatis","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"什么是 MyBatis","slug":"什么是-mybatis","link":"#什么是-mybatis","children":[]},{"level":3,"title":"MyBatis 的好处是什么","slug":"mybatis-的好处是什么","link":"#mybatis-的好处是什么","children":[]},{"level":3,"title":"为什么说 Mybatis 是半自动 ORM 映射工具、它与全自动的区别在哪里？","slug":"为什么说-mybatis-是半自动-orm-映射工具、它与全自动的区别在哪里","link":"#为什么说-mybatis-是半自动-orm-映射工具、它与全自动的区别在哪里","children":[]},{"level":3,"title":"MyBatis 与 Hibernate 有哪些不同","slug":"mybatis-与-hibernate-有哪些不同","link":"#mybatis-与-hibernate-有哪些不同","children":[]}]},{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[{"level":3,"title":"MyBatis 缓存是什么","slug":"mybatis-缓存是什么","link":"#mybatis-缓存是什么","children":[]},{"level":3,"title":"MyBatis 一级缓存失效的条件","slug":"mybatis-一级缓存失效的条件","link":"#mybatis-一级缓存失效的条件","children":[]},{"level":3,"title":"MyBatis 一级缓存清除方法","slug":"mybatis-一级缓存清除方法","link":"#mybatis-一级缓存清除方法","children":[]}]},{"level":2,"title":"分页","slug":"分页","link":"#分页","children":[{"level":3,"title":"Mybatis 分页的？分页插件的原理是什么？","slug":"mybatis-分页的-分页插件的原理是什么","link":"#mybatis-分页的-分页插件的原理是什么","children":[]}]},{"level":2,"title":"动态 SQL","slug":"动态-sql","link":"#动态-sql","children":[{"level":3,"title":"Mybatis 动态 SQL 是什么","slug":"mybatis-动态-sql-是什么","link":"#mybatis-动态-sql-是什么","children":[]},{"level":3,"title":"字符串替换 #{} 和 ${}","slug":"字符串替换-和","link":"#字符串替换-和","children":[]}]},{"level":2,"title":"映射","slug":"映射","link":"#映射","children":[{"level":3,"title":"在 mapper 中如何传递多个参数","slug":"在-mapper-中如何传递多个参数","link":"#在-mapper-中如何传递多个参数","children":[]},{"level":3,"title":"简述 Mybatis 的 Xml 映射文件和 Mybatis 内部数据结构之间的映射关系","slug":"简述-mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系","link":"#简述-mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系","children":[]},{"level":3,"title":"通常一个 Xml 映射文件，都会写一个 Dao 接口与之对应，Dao 是否可以重载","slug":"通常一个-xml-映射文件-都会写一个-dao-接口与之对应-dao-是否可以重载","link":"#通常一个-xml-映射文件-都会写一个-dao-接口与之对应-dao-是否可以重载","children":[]},{"level":3,"title":"Mybatis 的 Xml 映射文件中，不同的 Xml 映射文件，id 是否可以重复？","slug":"mybatis-的-xml-映射文件中-不同的-xml-映射文件-id-是否可以重复","link":"#mybatis-的-xml-映射文件中-不同的-xml-映射文件-id-是否可以重复","children":[]},{"level":3,"title":"Mybatis 是否可以映射 Enum 枚举类？","slug":"mybatis-是否可以映射-enum-枚举类","link":"#mybatis-是否可以映射-enum-枚举类","children":[]},{"level":3,"title":"Mybatis 自定义映射方式","slug":"mybatis-自定义映射方式","link":"#mybatis-自定义映射方式","children":[]}]},{"level":2,"title":"绑定","slug":"绑定","link":"#绑定","children":[{"level":3,"title":"MyBatis 的接口绑定是什么","slug":"mybatis-的接口绑定是什么","link":"#mybatis-的接口绑定是什么","children":[]},{"level":3,"title":"接口绑定有几种实现方式","slug":"接口绑定有几种实现方式","link":"#接口绑定有几种实现方式","children":[]},{"level":3,"title":"当实体类中的属性名和表中的字段名不一样，如果将查询的结果封装到指定 pojo","slug":"当实体类中的属性名和表中的字段名不一样-如果将查询的结果封装到指定-pojo","link":"#当实体类中的属性名和表中的字段名不一样-如果将查询的结果封装到指定-pojo","children":[]},{"level":3,"title":"如何获取自动生成的主键值？","slug":"如何获取自动生成的主键值","link":"#如何获取自动生成的主键值","children":[]},{"level":3,"title":"resultType、resultMap 的区别？","slug":"resulttype、resultmap-的区别","link":"#resulttype、resultmap-的区别","children":[]},{"level":3,"title":"Mybatis 延迟加载","slug":"mybatis-延迟加载","link":"#mybatis-延迟加载","children":[]},{"level":3,"title":"使用 MyBatis 的 mapper 接口调用时有哪些要求","slug":"使用-mybatis-的-mapper-接口调用时有哪些要求","link":"#使用-mybatis-的-mapper-接口调用时有哪些要求","children":[]}]},{"level":2,"title":"执行器","slug":"执行器","link":"#执行器","children":[{"level":3,"title":"Mybatis 都有哪些 Executor 执行器","slug":"mybatis-都有哪些-executor-执行器","link":"#mybatis-都有哪些-executor-执行器","children":[]},{"level":3,"title":"Mybatis 中如何指定 Executor 执行器","slug":"mybatis-中如何指定-executor-执行器","link":"#mybatis-中如何指定-executor-执行器","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"IBatis 和 MyBatis 在核心处理类分别叫什么？","slug":"ibatis-和-mybatis-在核心处理类分别叫什么","link":"#ibatis-和-mybatis-在核心处理类分别叫什么","children":[]},{"level":3,"title":"Mybatis 中如何执行批处理？","slug":"mybatis-中如何执行批处理","link":"#mybatis-中如何执行批处理","children":[]}]}],"git":{"updatedTime":1711074643000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":5,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/interview/database/orm_tool/Mybatis.md"}');export{o as comp,c as data};
