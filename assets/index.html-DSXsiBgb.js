import{_ as e,c as a,f as i,a as t,b as o,d as n,r as g,o as h,e as s}from"./app-chPKMbRn.js";const d={};function u(c,l){const r=g("RouteLink");return h(),a("div",null,[l[20]||(l[20]=i('<h1 id="排序算法" tabindex="-1"><a class="header-anchor" href="#排序算法"><span>排序算法</span></a></h1><h2 id="排序算法目录" tabindex="-1"><a class="header-anchor" href="#排序算法目录"><span>排序算法目录</span></a></h2><h3 id="稳定" tabindex="-1"><a class="header-anchor" href="#稳定"><span>稳定</span></a></h3>',3)),t("ul",null,[t("li",null,[o(r,{to:"/md/article/algorithm/sort/bubble_sort.html"},{default:n(()=>l[0]||(l[0]=[s("冒泡排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/insertion_sort.html"},{default:n(()=>l[1]||(l[1]=[s("插入排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/merge_sort.html"},{default:n(()=>l[2]||(l[2]=[s("归并排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/counting_sort.html"},{default:n(()=>l[3]||(l[3]=[s("计数排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/bucket_sort.html"},{default:n(()=>l[4]||(l[4]=[s("桶排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/radix_sort.html"},{default:n(()=>l[5]||(l[5]=[s("基数排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/cocktail_shaker_sort.html"},{default:n(()=>l[6]||(l[6]=[s("鸡尾酒排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/odd_even_sort.html"},{default:n(()=>l[7]||(l[7]=[s("奇偶排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/binary_tree_sort.html"},{default:n(()=>l[8]||(l[8]=[s("二叉树排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/gnome_sort.html"},{default:n(()=>l[9]||(l[9]=[s("Gnome Sort")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/tim_sort.html"},{default:n(()=>l[10]||(l[10]=[s("Tim Sort")])),_:1})])]),l[21]||(l[21]=t("h3",{id:"不稳定",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#不稳定"},[t("span",null,"不稳定")])],-1)),t("ul",null,[t("li",null,[o(r,{to:"/md/article/algorithm/sort/selection_sort.html"},{default:n(()=>l[11]||(l[11]=[s("选择排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/quick_sort.html"},{default:n(()=>l[12]||(l[12]=[s("快速排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/heap_sort.html"},{default:n(()=>l[13]||(l[13]=[s("堆排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/shell_sort.html"},{default:n(()=>l[14]||(l[14]=[s("希尔排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/comb_sort.html"},{default:n(()=>l[15]||(l[15]=[s("梳排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/smooth_sort.html"},{default:n(()=>l[16]||(l[16]=[s("平滑排序")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/bitonic_sort.html"},{default:n(()=>l[17]||(l[17]=[s("Bitonic Sort")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/pancake_sort.html"},{default:n(()=>l[18]||(l[18]=[s("Pancake Sort")])),_:1})]),t("li",null,[o(r,{to:"/md/article/algorithm/sort/stooge_sort.html"},{default:n(()=>l[19]||(l[19]=[s("Stooge Sort")])),_:1})])]),l[22]||(l[22]=i('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="_1-冒泡排序-bubble-sort" tabindex="-1"><a class="header-anchor" href="#_1-冒泡排序-bubble-sort"><span>1. 冒泡排序 (Bubble Sort)</span></a></h3><ul><li><strong>描述</strong>：重复地遍历要排序的列表，比较相邻的元素并交换顺序，直到没有需要交换的元素为止。</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_2-选择排序-selection-sort" tabindex="-1"><a class="header-anchor" href="#_2-选择排序-selection-sort"><span>2. 选择排序 (Selection Sort)</span></a></h3><ul><li><strong>描述</strong>：每次从未排序的部分中选择最小（或最大）的元素，放到已排序部分的末尾。</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_3-插入排序-insertion-sort" tabindex="-1"><a class="header-anchor" href="#_3-插入排序-insertion-sort"><span>3. 插入排序 (Insertion Sort)</span></a></h3><ul><li><strong>描述</strong>：构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_4-归并排序-merge-sort" tabindex="-1"><a class="header-anchor" href="#_4-归并排序-merge-sort"><span>4. 归并排序 (Merge Sort)</span></a></h3><ul><li><strong>描述</strong>：采用分治法，将数组分成两个子数组，分别排序，然后合并。</li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_5-快速排序-quick-sort" tabindex="-1"><a class="header-anchor" href="#_5-快速排序-quick-sort"><span>5. 快速排序 (Quick Sort)</span></a></h3><ul><li><strong>描述</strong>：采用分治法，从数组中选择一个基准元素，将数组分成两部分，一部分小于基准元素，另一部分大于基准元素，然后递归排序。</li><li><strong>时间复杂度</strong>：O(n log n) 平均，O(n^2) 最坏</li><li><strong>空间复杂度</strong>：O(log n) 平均，O(n) 最坏</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_6-堆排序-heap-sort" tabindex="-1"><a class="header-anchor" href="#_6-堆排序-heap-sort"><span>6. 堆排序 (Heap Sort)</span></a></h3><ul><li><strong>描述</strong>：利用堆这种数据结构来排序，首先构建一个最大堆，然后依次取出堆顶元素，调整堆结构。</li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_7-希尔排序-shell-sort" tabindex="-1"><a class="header-anchor" href="#_7-希尔排序-shell-sort"><span>7. 希尔排序 (Shell Sort)</span></a></h3><ul><li><strong>描述</strong>：插入排序的一种改进，通过将数组分成若干子序列分别进行插入排序，逐步减少子序列的间隔，最终进行一次插入排序。</li><li><strong>时间复杂度</strong>：O(n log n) 到 O(n^2) 之间，取决于间隔序列</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_8-计数排序-counting-sort" tabindex="-1"><a class="header-anchor" href="#_8-计数排序-counting-sort"><span>8. 计数排序 (Counting Sort)</span></a></h3><ul><li><strong>描述</strong>：适用于一定范围内的整数排序，通过计数数组记录每个元素出现的次数，然后依次输出。</li><li><strong>时间复杂度</strong>：O(n + k)，其中 k 是整数范围</li><li><strong>空间复杂度</strong>：O(n + k)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_9-桶排序-bucket-sort" tabindex="-1"><a class="header-anchor" href="#_9-桶排序-bucket-sort"><span>9. 桶排序 (Bucket Sort)</span></a></h3><ul><li><strong>描述</strong>：将数组元素分到有限数量的桶中，每个桶内分别排序，然后合并。</li><li><strong>时间复杂度</strong>：O(n + k)，其中 k 是桶的数量</li><li><strong>空间复杂度</strong>：O(n + k)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_10-基数排序-radix-sort" tabindex="-1"><a class="header-anchor" href="#_10-基数排序-radix-sort"><span>10. 基数排序 (Radix Sort)</span></a></h3><ul><li><strong>描述</strong>：对每个数位进行排序，从最低位到最高位，依次进行。</li><li><strong>时间复杂度</strong>：O(n * k)，其中 k 是数位的数量</li><li><strong>空间复杂度</strong>：O(n + k)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_11-鸡尾酒排序-cocktail-shaker-sort" tabindex="-1"><a class="header-anchor" href="#_11-鸡尾酒排序-cocktail-shaker-sort"><span>11. 鸡尾酒排序 (Cocktail Shaker Sort)</span></a></h3><ul><li><strong>描述</strong>：冒泡排序的一种变种，双向进行排序，先从左到右，再从右到左，交替进行。</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_12-梳排序-comb-sort" tabindex="-1"><a class="header-anchor" href="#_12-梳排序-comb-sort"><span>12. 梳排序 (Comb Sort)</span></a></h3><ul><li><strong>描述</strong>：改进的冒泡排序，通过逐渐减少间隔来比较和交换元素，最终变为冒泡排序。</li><li><strong>时间复杂度</strong>：O(n^2) 最坏，O(n log n) 平均</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_13-奇偶排序-odd-even-sort" tabindex="-1"><a class="header-anchor" href="#_13-奇偶排序-odd-even-sort"><span>13. 奇偶排序 (Odd-Even Sort)</span></a></h3><ul><li><strong>描述</strong>：并行排序算法的一种，交替比较和交换奇数和偶数索引的元素。</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_14-二叉树排序-binary-tree-sort" tabindex="-1"><a class="header-anchor" href="#_14-二叉树排序-binary-tree-sort"><span>14. 二叉树排序 (Binary Tree Sort)</span></a></h3><ul><li><strong>描述</strong>：将元素插入二叉搜索树，然后进行中序遍历得到有序序列。</li><li><strong>时间复杂度</strong>：O(n log n) 平均，O(n^2) 最坏</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_15-平滑排序-smooth-sort" tabindex="-1"><a class="header-anchor" href="#_15-平滑排序-smooth-sort"><span>15. 平滑排序 (Smooth Sort)</span></a></h3><ul><li><strong>描述</strong>：堆排序的一种改进，利用斐波那契堆来减少比较次数。</li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_16-gnome-sort" tabindex="-1"><a class="header-anchor" href="#_16-gnome-sort"><span>16. Gnome Sort</span></a></h3><ul><li><strong>描述</strong>：类似插入排序，通过逐步交换相邻元素来排序。</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_17-tim-sort" tabindex="-1"><a class="header-anchor" href="#_17-tim-sort"><span>17. Tim Sort</span></a></h3><ul><li><strong>描述</strong>：归并排序和插入排序的混合算法，Python 和 Java 的内置排序算法。</li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="_18-bitonic-sort" tabindex="-1"><a class="header-anchor" href="#_18-bitonic-sort"><span>18. Bitonic Sort</span></a></h3><ul><li><strong>描述</strong>：并行排序算法的一种，适用于并行计算环境。</li><li><strong>时间复杂度</strong>：O(n log^2 n)</li><li><strong>空间复杂度</strong>：O(n log n)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_19-pancake-sort" tabindex="-1"><a class="header-anchor" href="#_19-pancake-sort"><span>19. Pancake Sort</span></a></h3><ul><li><strong>描述</strong>：通过翻转子数组来排序，类似于煎饼翻转。</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_20-stooge-sort" tabindex="-1"><a class="header-anchor" href="#_20-stooge-sort"><span>20. Stooge Sort</span></a></h3><ul><li><strong>描述</strong>：递归排序算法，通过递归地排序子数组的前2/3和后2/3来排序。</li><li><strong>时间复杂度</strong>：O(n^(log 3 / log 1.5)) ≈ O(n^2.71)</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：不稳定</li></ul><p>二叉树排序算法利用二叉树的数据结构来对元素进行排序。以下是几种常见的二叉树排序算法：</p><h3 id="_1-二叉搜索树排序-binary-search-tree-sort" tabindex="-1"><a class="header-anchor" href="#_1-二叉搜索树排序-binary-search-tree-sort"><span>1. 二叉搜索树排序 (Binary Search Tree Sort)</span></a></h3><ul><li><strong>描述</strong>：通过构建二叉搜索树（BST），然后进行中序遍历来获得有序序列。</li><li><strong>步骤</strong>： <ol><li>将所有元素插入二叉搜索树。</li><li>对二叉搜索树进行中序遍历，得到排序后的序列。</li></ol></li><li><strong>时间复杂度</strong>： <ul><li>平均情况：O(n log n)</li><li>最坏情况：O(n^2)（当树退化为链表时）</li></ul></li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_2-平衡二叉搜索树排序-balanced-binary-search-tree-sort" tabindex="-1"><a class="header-anchor" href="#_2-平衡二叉搜索树排序-balanced-binary-search-tree-sort"><span>2. 平衡二叉搜索树排序 (Balanced Binary Search Tree Sort)</span></a></h3><ul><li><strong>描述</strong>：通过构建平衡二叉搜索树（如 AVL 树或红黑树），然后进行中序遍历来获得有序序列。</li><li><strong>步骤</strong>： <ol><li>将所有元素插入平衡二叉搜索树。</li><li>对平衡二叉搜索树进行中序遍历，得到排序后的序列。</li></ol></li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_3-堆排序-heap-sort" tabindex="-1"><a class="header-anchor" href="#_3-堆排序-heap-sort"><span>3. 堆排序 (Heap Sort)</span></a></h3><ul><li><strong>描述</strong>：利用二叉堆（通常是最大堆或最小堆）来进行排序。</li><li><strong>步骤</strong>： <ol><li>将所有元素插入二叉堆。</li><li>反复从堆中取出最大（或最小）元素，重建堆，直到堆为空。</li></ol></li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(1)（原地排序）</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_4-树状数组排序-fenwick-tree-sort" tabindex="-1"><a class="header-anchor" href="#_4-树状数组排序-fenwick-tree-sort"><span>4. 树状数组排序 (Fenwick Tree Sort)</span></a></h3><ul><li><strong>描述</strong>：利用树状数组（Fenwick Tree）来进行排序，通常用于处理动态数据。</li><li><strong>步骤</strong>： <ol><li>初始化树状数组。</li><li>根据元素的值更新树状数组。</li><li>根据树状数组的状态输出排序后的序列。</li></ol></li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_5-treap-排序" tabindex="-1"><a class="header-anchor" href="#_5-treap-排序"><span>5. Treap 排序</span></a></h3><ul><li><strong>描述</strong>：Treap 是一种结合了二叉搜索树和堆的数据结构，通过随机优先级来保持平衡。</li><li><strong>步骤</strong>： <ol><li>将所有元素插入 Treap。</li><li>对 Treap 进行中序遍历，得到排序后的序列。</li></ol></li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="_6-splay-树排序-splay-tree-sort" tabindex="-1"><a class="header-anchor" href="#_6-splay-树排序-splay-tree-sort"><span>6. Splay 树排序 (Splay Tree Sort)</span></a></h3><ul><li><strong>描述</strong>：Splay 树是一种自调整二叉搜索树，通过旋转操作将最近访问的节点移到根节点。</li><li><strong>步骤</strong>： <ol><li>将所有元素插入 Splay 树。</li><li>对 Splay 树进行中序遍历，得到排序后的序列。</li></ol></li><li><strong>时间复杂度</strong>：O(n log n) 平均，O(n^2) 最坏</li><li><strong>空间复杂度</strong>：O(n)</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>这些二叉树排序算法各有特点和适用场景，选择合适的算法取决于具体的应用需求和数据特性。二叉搜索树排序和平衡二叉搜索树排序适用于需要动态插入和删除的场景，而堆排序则适用于需要原地排序的场景。Treap 和 Splay 树提供了自调整的特性，可以在某些情况下提高性能。</p>',56))])}const p=e(d,[["render",u],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/md/article/algorithm/sort/","title":"排序算法","lang":"en-US","frontmatter":{"title":"排序算法","sidebar":false},"headers":[{"level":2,"title":"排序算法目录","slug":"排序算法目录","link":"#排序算法目录","children":[{"level":3,"title":"稳定","slug":"稳定","link":"#稳定","children":[]},{"level":3,"title":"不稳定","slug":"不稳定","link":"#不稳定","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"1. 冒泡排序 (Bubble Sort)","slug":"_1-冒泡排序-bubble-sort","link":"#_1-冒泡排序-bubble-sort","children":[]},{"level":3,"title":"2. 选择排序 (Selection Sort)","slug":"_2-选择排序-selection-sort","link":"#_2-选择排序-selection-sort","children":[]},{"level":3,"title":"3. 插入排序 (Insertion Sort)","slug":"_3-插入排序-insertion-sort","link":"#_3-插入排序-insertion-sort","children":[]},{"level":3,"title":"4. 归并排序 (Merge Sort)","slug":"_4-归并排序-merge-sort","link":"#_4-归并排序-merge-sort","children":[]},{"level":3,"title":"5. 快速排序 (Quick Sort)","slug":"_5-快速排序-quick-sort","link":"#_5-快速排序-quick-sort","children":[]},{"level":3,"title":"6. 堆排序 (Heap Sort)","slug":"_6-堆排序-heap-sort","link":"#_6-堆排序-heap-sort","children":[]},{"level":3,"title":"7. 希尔排序 (Shell Sort)","slug":"_7-希尔排序-shell-sort","link":"#_7-希尔排序-shell-sort","children":[]},{"level":3,"title":"8. 计数排序 (Counting Sort)","slug":"_8-计数排序-counting-sort","link":"#_8-计数排序-counting-sort","children":[]},{"level":3,"title":"9. 桶排序 (Bucket Sort)","slug":"_9-桶排序-bucket-sort","link":"#_9-桶排序-bucket-sort","children":[]},{"level":3,"title":"10. 基数排序 (Radix Sort)","slug":"_10-基数排序-radix-sort","link":"#_10-基数排序-radix-sort","children":[]},{"level":3,"title":"11. 鸡尾酒排序 (Cocktail Shaker Sort)","slug":"_11-鸡尾酒排序-cocktail-shaker-sort","link":"#_11-鸡尾酒排序-cocktail-shaker-sort","children":[]},{"level":3,"title":"12. 梳排序 (Comb Sort)","slug":"_12-梳排序-comb-sort","link":"#_12-梳排序-comb-sort","children":[]},{"level":3,"title":"13. 奇偶排序 (Odd-Even Sort)","slug":"_13-奇偶排序-odd-even-sort","link":"#_13-奇偶排序-odd-even-sort","children":[]},{"level":3,"title":"14. 二叉树排序 (Binary Tree Sort)","slug":"_14-二叉树排序-binary-tree-sort","link":"#_14-二叉树排序-binary-tree-sort","children":[]},{"level":3,"title":"15. 平滑排序 (Smooth Sort)","slug":"_15-平滑排序-smooth-sort","link":"#_15-平滑排序-smooth-sort","children":[]},{"level":3,"title":"16. Gnome Sort","slug":"_16-gnome-sort","link":"#_16-gnome-sort","children":[]},{"level":3,"title":"17. Tim Sort","slug":"_17-tim-sort","link":"#_17-tim-sort","children":[]},{"level":3,"title":"18. Bitonic Sort","slug":"_18-bitonic-sort","link":"#_18-bitonic-sort","children":[]},{"level":3,"title":"19. Pancake Sort","slug":"_19-pancake-sort","link":"#_19-pancake-sort","children":[]},{"level":3,"title":"20. Stooge Sort","slug":"_20-stooge-sort","link":"#_20-stooge-sort","children":[]},{"level":3,"title":"1. 二叉搜索树排序 (Binary Search Tree Sort)","slug":"_1-二叉搜索树排序-binary-search-tree-sort","link":"#_1-二叉搜索树排序-binary-search-tree-sort","children":[]},{"level":3,"title":"2. 平衡二叉搜索树排序 (Balanced Binary Search Tree Sort)","slug":"_2-平衡二叉搜索树排序-balanced-binary-search-tree-sort","link":"#_2-平衡二叉搜索树排序-balanced-binary-search-tree-sort","children":[]},{"level":3,"title":"3. 堆排序 (Heap Sort)","slug":"_3-堆排序-heap-sort","link":"#_3-堆排序-heap-sort","children":[]},{"level":3,"title":"4. 树状数组排序 (Fenwick Tree Sort)","slug":"_4-树状数组排序-fenwick-tree-sort","link":"#_4-树状数组排序-fenwick-tree-sort","children":[]},{"level":3,"title":"5. Treap 排序","slug":"_5-treap-排序","link":"#_5-treap-排序","children":[]},{"level":3,"title":"6. Splay 树排序 (Splay Tree Sort)","slug":"_6-splay-树排序-splay-tree-sort","link":"#_6-splay-树排序-splay-tree-sort","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]}],"git":{"updatedTime":1736074136000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":8,"url":"https://github.com/hyfly233"},{"name":"hyfly233","username":"hyfly233","email":"1274694743@qq.com","commits":4,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/article/algorithm/sort/index.md"}');export{p as comp,_ as data};
