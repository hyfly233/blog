import{_ as t,c as a,f as i,o as l}from"./app-chPKMbRn.js";const o={};function n(r,e){return l(),a("div",null,e[0]||(e[0]=[i('<h1 id="编程模型" tabindex="-1"><a class="header-anchor" href="#编程模型"><span>编程模型</span></a></h1><ul><li>过程式编程：这是最早的编程模型之一，以函数或过程为中心。C 和 Pascal 是过程式编程的例子。</li><li>面向对象编程：这种模型以对象（实例化的类）为中心，通过封装、继承和多态来组织代码。Java、C++ 和 Python 都支持面向对象编程。</li><li>函数式编程：这种模型把计算视为函数的求值，避免使用状态和可变数据。Haskell 和 Lisp 是函数式编程的例子。</li><li>并发编程：这种模型用于编写可以同时执行多个任务的程序。Java 的并发 API、Go 的 goroutines 和 Python 的 asyncio 都是并发编程的例子。</li><li>事件驱动编程：这种模型以事件为中心，程序的执行流程由用户操作、传感器输出或其他程序的消息驱动。JavaScript（用于 Web 开发）和 Node.js（用于服务器端开发）都是事件驱动编程的例子。</li><li>响应式编程：这是一种声明式编程模型，用于构建响应用户输入、网络请求等异步事件的程序。RxJava 和 JavaScript 的 RxJS 是响应式编程的例子。</li><li>逻辑编程：这种模型以逻辑推理为中心，程序由一组逻辑公式定义，执行程序就是寻找满足这些公式的解。Prolog 是逻辑编程的例子。</li><li>实体-组件-系统（Entity-Component-System，ECS）模型。</li></ul>',2)]))}const c=t(o,[["render",n],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/md/article/other/pm/","title":"编程模型","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1718023441000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":1,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/article/other/pm/index.md"}');export{c as comp,m as data};
