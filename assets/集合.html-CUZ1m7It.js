import{_ as s,c as e,f as l,o as n}from"./app-chPKMbRn.js";const i={};function p(t,a){return n(),e("div",null,a[0]||(a[0]=[l(`<h1 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h1><h1 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h1><h3 id="简述-java-的-list" tabindex="-1"><a class="header-anchor" href="#简述-java-的-list"><span>简述 Java 的 List</span></a></h3><p>List 是一个有序队列，在 Java 中有两种实现方式:</p><p>ArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组，把原有数组复制到新数组。</p><p>LinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。</p><h3 id="arraylist、vector-和-linkedlist-有什么共同点与区别" tabindex="-1"><a class="header-anchor" href="#arraylist、vector-和-linkedlist-有什么共同点与区别"><span>ArrayList、Vector 和 LinkedList 有什么共同点与区别？</span></a></h3><ul><li>ArrayList、Vector 和 LinkedList 都是可伸缩的数组，即可以动态改变长度的数组。</li><li>ArrayList 和 Vector 都是基于存储元素的 Object[] array 来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较低。当存储元素超过容器的初始化容量大小，ArrayList 与 Vector 均会进行扩容。</li><li>Vector 是线程安全的，其大部分方法是直接或间接同步的。ArrayList 不是线程安全的，其方法不具有同步性质。LinkedList 也不是线程安全的。</li><li>LinkedList 采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入元素的时候不需要对数据进行移动，插入效率较高。</li></ul><h2 id="_7-arraylist-和-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#_7-arraylist-和-linkedlist-的区别"><span>7.arrayList 和 linkedList 的区别？</span></a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687075345-70fa50d1-20bd-47c4-b756-674dd67be8f5.png" alt="img"></p><ul><li>1.ArrayList 是实现了基于<strong>数组</strong>的，存储空间是连续的。LinkedList 基于<strong>链表</strong>的，存储空间是不连续的。（LinkedList 是双向链表）</li><li>2.对于<strong>随机访问</strong> get 和 set ，ArrayList 觉得优于 LinkedList，因为 LinkedList 要移动指针。</li><li>3.对于<strong>新增和删除</strong>操作 add 和 remove ，LinedList 比较占优势，因为 ArrayList 要移动数据。</li><li>4.同样的数据量 LinkedList 所占用空间可能会更小，因为 ArrayList 需要<strong>预留空间</strong>便于后续数据增加，而 LinkedList 增加数据只需要<strong>增加一个节点</strong></li></ul><h2 id="阐述-arraylist、vector、linkedlist-的存储性能和特性。" tabindex="-1"><a class="header-anchor" href="#阐述-arraylist、vector、linkedlist-的存储性能和特性。"><span>阐述 ArrayList、Vector、LinkedList 的存储性能和特性。</span></a></h2><p>ArrayList 和 Vector 都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢。Vector 中的方法由于添加了 synchronized 修饰，因此 Vector 是线程安全的容器，但性能上较 ArrayList 差，因此已经是 Java 中的遗留容器。</p><p>LinkedList 使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</p><p>Vector 属于遗留容器（Java 早期的版本中提供的容器，除此之外，Hashtable、Dictionary、BitSet、Stack、Properties 都是遗留容器），已经不推荐使用，但是由于 ArrayList 和 LinkedListed 都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类 Collections 中的 synchronizedList 方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。</p><h2 id="arraylist-和-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#arraylist-和-linkedlist-的区别"><span>ArrayList 和 LinkedList 的区别？</span></a></h2><p>最明显的区别是 ArrrayList 底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p><p>相对于 ArrayList，LinkedList 的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。</p><p>LinkedList 比 ArrayList 更占内存，因为 LinkedList 为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</p><h2 id="arraylist-和-array-有什么区别" tabindex="-1"><a class="header-anchor" href="#arraylist-和-array-有什么区别"><span>ArrayList 和 Array 有什么区别？</span></a></h2><p>Array 可以容纳基本类型和对象，而 ArrayList 只能容纳对象。</p><p>Array 是指定大小的，而 ArrayList 大小是固定的</p><h2 id="arraylist-与-vector-区别" tabindex="-1"><a class="header-anchor" href="#arraylist-与-vector-区别"><span>ArrayList 与 Vector 区别</span></a></h2><p>ArrayList 和 Vector 在很多时候都很类似。</p><ul><li>两者都是基于索引的，内部由一个数组支持。</li><li>两者维护插入的顺序，我们可以根据插入顺序来获取元素。</li><li>ArrayList 和 Vector 的迭代器实现都是 fail-fast 的。</li><li>ArrayList 和 Vector 两者允许 null 值，也可以使用索引值对元素进行随机访问。</li></ul><p>以下是 ArrayList 和 Vector 的不同点。</p><ul><li>Vector 是同步的，而 ArrayList 不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用 CopyOnWriteArrayList。</li><li>ArrayList 比 Vector 快，它因为有同步，不会过载。</li><li>ArrayList 更加通用，因为我们可以使用 Collections 工具类轻易地获取同步列表和只读列表。</li></ul><h2 id="linkedlist-的是单向链表还是双向" tabindex="-1"><a class="header-anchor" href="#linkedlist-的是单向链表还是双向"><span>LinkedList 的是单向链表还是双向？</span></a></h2><p>双向循环列表,具体实现自行查阅源码.</p><h2 id="遍历-arraylist-时如何正确移除一个元素" tabindex="-1"><a class="header-anchor" href="#遍历-arraylist-时如何正确移除一个元素"><span>遍历 ArrayList 时如何正确移除一个元素</span></a></h2><p>该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的 remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码。</p><h1 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h1><h3 id="简述-java-的-set" tabindex="-1"><a class="header-anchor" href="#简述-java-的-set"><span>简述 Java 的 Set</span></a></h3><p>Set 即集合，该数据结构不允许元素重复且无序。Java 对 Set 有三种实现方式：</p><p>HashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value 系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较 hashCode，相同后再利用 equals 比较，查询 O(1)</p><p>LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。</p><p>TreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。查询 O(logn)</p><h3 id="hashset-中-equals-与-hashcode-之间的关系" tabindex="-1"><a class="header-anchor" href="#hashset-中-equals-与-hashcode-之间的关系"><span>HashSet 中，equals 与 hashCode 之间的关系？</span></a></h3><p>equals 和 hashCode 这两个方法都是从 object 类中继承过来的，equals 主要用于判断对象的内存地址引用是否是同一个地址；hashCode 根据定义的哈希规则将对象的内存地址转换为一个哈希码。HashSet 中存储的元素是不能重复的，主要通过 hashCode 与 equals 两个方法来判断存储的对象是否相同：</p><ul><li>如果两个对象的 hashCode 值不同，说明两个对象不相同。</li><li>如果两个对象的 hashCode 值相同，接着会调用对象的 equals 方法，如果 equlas 方法的返回结果为 true，那么说明两个对象相同，否则不相同。</li></ul><h2 id="_12-介绍一下-hashset-吧" tabindex="-1"><a class="header-anchor" href="#_12-介绍一下-hashset-吧"><span>12.介绍一下 hashset 吧</span></a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687078008-7fd25f05-d9a8-4457-957f-a0de938e80a4.png" alt="img"></p><p>上图是 set 家族整体的结构，</p><p>set 继承于 Collection 接口，是一个<strong>不允许出现重复元素，并且无序的集合</strong>.</p><p>HashSet 是<strong>基于 HashMap 实现</strong>的，底层<strong>采用 HashMap 来保存元素</strong></p><p>元素的哈希值是通过元素的 hashcode 方法 来获取的, HashSet 首先判断两个元素的哈希值，如果哈希值一样，接着会比较 equals 方法 如果 equls 结果为 true ，HashSet 就视为同一个元素。如果 equals 为 false 就不是同一个元素。</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><h1 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span></span></a></h1><h1 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h1><h2 id="treemap-是实现原理" tabindex="-1"><a class="header-anchor" href="#treemap-是实现原理"><span>TreeMap 是实现原理</span></a></h2><p>采用红黑树实现,具体实现自行查阅源码.</p><h3 id="简述-java-的-hashmap" tabindex="-1"><a class="header-anchor" href="#简述-java-的-hashmap"><span>简述 Java 的 HashMap</span></a></h3><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。</p><p>table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在 JDK8 后链表超过 8 会转化为红黑树。</p><p>若当前数据/总数据容量&gt;负载因子，Hashmap 将执行扩容操作。默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p><h3 id="为何-hashmap-线程不安全" tabindex="-1"><a class="header-anchor" href="#为何-hashmap-线程不安全"><span>为何 HashMap 线程不安全</span></a></h3><p>在 JDK1.7 中，HashMap 采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。</p><p>虽然 JDK1.8 采用了尾插法解决了这个问题，但是并发下的 put 操作也会使前一个 key 被后一个 key 覆盖。</p><p>由于 HashMap 有扩容机制存在，也存在 A 线程进行扩容后，B 线程执行 get 方法出现失误的情况。</p><h3 id="简述-java-的-treemap" tabindex="-1"><a class="header-anchor" href="#简述-java-的-treemap"><span>简述 Java 的 TreeMap</span></a></h3><p>TreeMap 是底层利用红黑树实现的 Map 结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、删除、遍历时间复杂度都为 O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树可以按照键的值的大小有序输出。</p><h3 id="hashmap-和-hashtable-有什么区别" tabindex="-1"><a class="header-anchor" href="#hashmap-和-hashtable-有什么区别"><span>HashMap 和 Hashtable 有什么区别？</span></a></h3><ul><li>HashMap 是 Hashtable 的轻量级实现，HashMap 允许 key 和 value 为 null，但最多允许一条记录的 key 为 null.而 HashTable 不允许。</li><li>HashTable 中的方法是线程安全的，而 HashMap 不是。在多线程访问 HashMap 需要提供额外的同步机制。</li><li>Hashtable 使用 Enumeration 进行遍历，HashMap 使用 Iterator 进行遍历。</li></ul><h3 id="如何决定使用-hashmap-还是-treemap" tabindex="-1"><a class="header-anchor" href="#如何决定使用-hashmap-还是-treemap"><span>如何决定使用 HashMap 还是 TreeMap?</span></a></h3><p>如果对 Map 进行插入、删除或定位一个元素的操作更频繁，HashMap 是更好的选择。如果需要对 key 集合进行有序的遍历，TreeMap 是更好的选择。</p><h3 id="hashmap-的底层数据结构是什么" tabindex="-1"><a class="header-anchor" href="#hashmap-的底层数据结构是什么"><span>HashMap 的底层数据结构是什么？</span></a></h3><p>JDK 7 中，HashMap 由“数组+链表”组成，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。</p><p>在 JDK 8 中，HashMap 由“数组+链表+红黑树”组成。链表过长，会严重影响 HashMap 的性能，而红黑树搜索的时间复杂度是 O(logn)，而链表是糟糕的 O(n)。因此，JDK 8 对数据结构做了进一步的优化，引入了红黑树，链表和红黑树在达到一定条件会进行转换：</p><ul><li>当链表超过 8 且数据总量超过 64 时会转红黑树。</li><li>将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树，以减少搜索时间。</li></ul><p>链表长度超过 8 体现在 putVal 方法中的这段代码：</p><div class="language-plain line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-plain;"><code><span class="line"><span class="line"><span>//链表长度大于8转换为红黑树进行处理</span></span></span>
<span class="line"><span class="line"><span>if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span></span></span>
<span class="line"><span class="line"><span>    treeifyBin(tab, hash);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>table 长度为 64 体现在 treeifyBin 方法中的这段代码：：</p><div class="language-plain line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-plain;"><code><span class="line"><span class="line"><span>final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) {</span></span></span>
<span class="line"><span class="line"><span>    int n, index; Node&lt;K,V&gt; e;</span></span></span>
<span class="line"><span class="line"><span>    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span></span></span>
<span class="line"><span class="line"><span>        resize();</span></span></span>
<span class="line"><span class="line"><span>}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MIN_TREEIFY_CAPACITY 的值正好为 64。</p><p>static final int MIN_TREEIFY_CAPACITY = 64;</p><p>JDK 8 中 HashMap 的结构示意图：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687075395-da2f2549-c04d-4286-a698-a2768a5e0f22.png" alt="img"></p><h3 id="_02、为什么链表改为红黑树的阈值是-8" tabindex="-1"><a class="header-anchor" href="#_02、为什么链表改为红黑树的阈值是-8"><span>02、为什么链表改为红黑树的阈值是 8?</span></a></h3><p>因为泊松分布，我们来看作者在源码中的注释：</p><p>Because TreeNodes are about twice the size of regular nodes, we use them only when bins contain enough nodes to warrant use (see TREEIFY_THRESHOLD). And when they become too small (due to removal or resizing) they are converted back to plain bins. In usages with well-distributed user hashCodes, tree bins are rarely used. Ideally, under random hashCodes, the frequency of nodes in bins follows a Poisson distribution (http://en.wikipedia.org/wiki/Poisson_distribution) with a parameter of about 0.5 on average for the default resizing threshold of 0.75, although with a large variance because of resizing granularity. Ignoring variance, the expected occurrences of list size k are (exp(-0.5) pow(0.5, k) / factorial(k)). The first values are: 0: 0.606530661: 0.303265332: 0.075816333: 0.012636064: 0.001579525: 0.000157956: 0.000013167: 0.000000948: 0.00000006more: less than 1 in ten million</p><p>翻译过来大概的意思是：理想情况下使用随机的哈希码，容器中节点分布在 hash 桶中的频率遵循泊松分布，按照泊松分布的计算公式计算出了桶中元素个数和概率的对照表，可以看到链表中元素个数为 8 时的概率已经非常小，再多的就更少了，所以原作者在选择链表元素个数时选择了 8，是根据概率统计而选择的。</p><h3 id="_03、解决-hash-冲突的办法有哪些-hashmap-用的哪种" tabindex="-1"><a class="header-anchor" href="#_03、解决-hash-冲突的办法有哪些-hashmap-用的哪种"><span>03、解决 hash 冲突的办法有哪些？HashMap 用的哪种？</span></a></h3><p>解决 Hash 冲突方法有：</p><ul><li>开放定址法：也称为再散列法，基本思想就是，如果 p=H(key)出现冲突时，则以 p 为基础，再次 hash，p1=H(p),如果 p1 再次出现冲突，则以 p1 为基础，以此类推，直到找到一个不冲突的哈希地址 pi。因此开放定址法所需要的 hash 表的长度要大于等于所需要存放的元素，而且因为存在再次 hash，所以只能在删除的节点上做标记，而不能真正删除节点。</li><li>再哈希法：双重散列，多重散列，提供多个不同的 hash 函数，当 R1=H1(key1)发生冲突时，再计算 R2=H2(key1)，直到没有冲突为止。这样做虽然不易产生堆集，但增加了计算的时间。</li><li>链地址法：拉链法，将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第 i 个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。</li><li>建立公共溢出区：将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。</li></ul><p>HashMap 中采用的是链地址法 。</p><h3 id="_04、为什么在解决-hash-冲突的时候-不直接用红黑树-而选择先用链表-再转红黑树" tabindex="-1"><a class="header-anchor" href="#_04、为什么在解决-hash-冲突的时候-不直接用红黑树-而选择先用链表-再转红黑树"><span>04、为什么在解决 hash 冲突的时候，不直接用红黑树？而选择先用链表，再转红黑树?</span></a></h3><p>因为红黑树需要进行左旋，右旋，变色这些操作来保持平衡，而单链表不需要。</p><p>当元素小于 8 个的时候，此时做查询操作，链表结构已经能保证查询性能。当元素大于 8 个的时候， 红黑树搜索时间复杂度是 O(logn)，而链表是 O(n)，此时需要红黑树来加快查询速度，但是新增节点的效率变慢了。</p><p>因此，如果一开始就用红黑树结构，元素太少，新增效率又比较慢，无疑这是浪费性能的。</p><h3 id="_05、hashmap-默认加载因子是多少-为什么是-0-75-不是-0-6-或者-0-8" tabindex="-1"><a class="header-anchor" href="#_05、hashmap-默认加载因子是多少-为什么是-0-75-不是-0-6-或者-0-8"><span>05、HashMap 默认加载因子是多少？为什么是 0.75，不是 0.6 或者 0.8 ？</span></a></h3><p>作为一般规则，默认负载因子（0.75）在时间和空间成本上提供了很好的折衷。</p><h3 id="_06、hashmap-中-key-的存储索引是怎么计算的" tabindex="-1"><a class="header-anchor" href="#_06、hashmap-中-key-的存储索引是怎么计算的"><span>06、HashMap 中 key 的存储索引是怎么计算的？</span></a></h3><p>首先根据 key 的值计算出 hashcode 的值，然后根据 hashcode 计算出 hash 值，最后通过 hash&amp;（length-1）计算得到存储的位置。</p><h3 id="hashmap-数组的长度为什么是-2-的幂次方" tabindex="-1"><a class="header-anchor" href="#hashmap-数组的长度为什么是-2-的幂次方"><span>HashMap 数组的长度为什么是 2 的幂次方？</span></a></h3><p>2 的 N 次幂有助于减少碰撞的几率。如果 length 为 2 的幂次方，则 length-1 转化为二进制必定是 11111……的形式，在与 h 的二进制与操作效率会非常的快，而且空间不浪费。我们来举个例子，看下图：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687075411-d3371fc5-08f5-46be-af91-391a9a5757b4.png" alt="img"></p><p>当 length =15 时，6 和 7 的结果一样，这样表示他们在 table 存储的位置是相同的，也就是产生了碰撞，6、7 就会在一个位置形成链表，4 和 5 的结果也是一样，这样就会导致查询速度降低。</p><p>如果我们进一步分析，还会发现空间浪费非常大，以 length=15 为例，在 1、3、5、7、9、11、13、15 这八处没有存放数据。因为 hash 值在与 14（即 1110）进行&amp;运算时，得到的结果最后一位永远都是 0，即 0001、0011、0101、0111、1001、1011、1101、1111 位置处是不可能存储数据的。</p><p><strong>再补充数组容量计算的小奥秘。</strong></p><p>HashMap 构造函数允许用户传入的容量不是 2 的 n 次方，因为它可以自动地将传入的容量转换为 2 的 n 次方。会取大于或等于这个数的 且最近的 2 次幂作为 table 数组的初始容量，使用 tableSizeFor(int)方法，如 tableSizeFor(10) = 16（2 的 4 次幂），tableSizeFor(20) = 32（2 的 5 次幂），也就是说 table 数组的长度总是 2 的次幂。JDK 8 源码如下：</p><div class="language-plain line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-plain;"><code><span class="line"><span class="line"><span>static final int tableSizeFor(int cap) {</span></span></span>
<span class="line"><span class="line"><span>        int n = cap - 1;</span></span></span>
<span class="line"><span class="line"><span>        n |= n &gt;&gt;&gt; 1;</span></span></span>
<span class="line"><span class="line"><span>        n |= n &gt;&gt;&gt; 2;</span></span></span>
<span class="line"><span class="line"><span>        n |= n &gt;&gt;&gt; 4;</span></span></span>
<span class="line"><span class="line"><span>        n |= n &gt;&gt;&gt; 8;</span></span></span>
<span class="line"><span class="line"><span>        n |= n &gt;&gt;&gt; 16;</span></span></span>
<span class="line"><span class="line"><span>        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span></span></span>
<span class="line"><span class="line"><span>    }</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让 cap-1 再赋值给 n 的目的是另找到的目标值大于或等于原值。例如二进制 1000，十进制数值为 8。如果不对它减 1 而直接操作，将得到答案 10000，即 16。显然不是结果。减 1 后二进制为 111，再进行操作则会得到原来的数值 1000，即 8。</p><h3 id="_10、hashmap-的-put-方法流程" tabindex="-1"><a class="header-anchor" href="#_10、hashmap-的-put-方法流程"><span>10、HashMap 的 put 方法流程？</span></a></h3><p>以 JDK 8 为例，简要流程如下：</p><p>1、首先根据 key 的值计算 hash 值，找到该元素在数组中存储的下标；</p><p>2、如果数组是空的，则调用 resize 进行初始化；</p><p>3、如果没有哈希冲突直接放在对应的数组下标里；</p><p>4、如果冲突了，且 key 已经存在，就覆盖掉 value；</p><p>5、如果冲突后，发现该节点是红黑树，就将这个节点挂在树上；</p><p>6、如果冲突后是链表，判断该链表是否大于 8 ，如果大于 8 并且数组容量小于 64，就进行扩容；如果链表节点大于 8 并且数组的容量大于 64，则将这个结构转换为红黑树；否则，链表插入键值对，若 key 存在，就覆盖掉 value。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687077893-32ca0b38-9be6-4e8f-abcb-cf173e086f28.png" alt="img"></p><h3 id="_11、hashmap-的扩容方式" tabindex="-1"><a class="header-anchor" href="#_11、hashmap-的扩容方式"><span>11、HashMap 的扩容方式？</span></a></h3><p>HashMap 在容量超过负载因子所定义的容量之后，就会扩容。</p><h3 id="_12、一般用什么作为-hashmap-的-key" tabindex="-1"><a class="header-anchor" href="#_12、一般用什么作为-hashmap-的-key"><span>12、一般用什么作为 HashMap 的 key?</span></a></h3><p>一般用 Integer、String 这种不可变类当作 HashMap 的 key，String 最为常见。</p><ul><li>因为字符串是不可变的，所以在它创建的时候 hashcode 就被缓存了，不需要重新计算。</li><li>因为获取对象的时候要用到 equals() 和 hashCode() 方法，那么键对象正确的重写这两个方法是非常重要的。Integer、String 这些类已经很规范的重写了 hashCode() 以及 equals() 方法。</li></ul><h3 id="_13、hashmap-为什么线程不安全" tabindex="-1"><a class="header-anchor" href="#_13、hashmap-为什么线程不安全"><span>13、HashMap 为什么线程不安全？</span></a></h3><ul><li>JDK 7 时多线程下扩容会造成死循环。</li><li>多线程的 put 可能导致元素的丢失。</li><li>put 和 get 并发时，可能导致 get 为 null。</li></ul><h2 id="_8-hashmap-1-7-和-hashmap-1-8-的区别" tabindex="-1"><a class="header-anchor" href="#_8-hashmap-1-7-和-hashmap-1-8-的区别"><span>8.hashMap 1.7 和 hashMap 1.8 的区别？</span></a></h2><p>只记录<strong>重点</strong></p><table><thead><tr><th><strong>不同点</strong></th><th><strong>hashMap 1.7</strong></th><th><strong>hashMap 1.8</strong></th></tr></thead><tbody><tr><td>数据结构</td><td>数组+链表</td><td>数组+链表+红黑树</td></tr><tr><td>插入数据的方式</td><td>头插法</td><td>尾插法</td></tr><tr><td>hash 值计算方式</td><td>9 次扰动处理(4 次位运算+5 次异或)</td><td>2 次扰动处理(1 次位运算+1 次异或)</td></tr><tr><td>扩容策略</td><td>插入前扩容</td><td>插入后扩容</td></tr></tbody></table><h2 id="_9-hashmap-线程不安全体现在哪里" tabindex="-1"><a class="header-anchor" href="#_9-hashmap-线程不安全体现在哪里"><span>9.hashMap 线程不安全体现在哪里？</span></a></h2><p>在 <strong>hashMap1.7 中扩容</strong>的时候，因为采用的是头插法，所以会可能会有循环链表产生，导致数据有问题，在 1.8 版本已修复，改为了尾插法</p><p>在任意版本的 hashMap 中，如果在<strong>插入数据时多个线程命中了同一个槽</strong>，可能会有数据覆盖的情况发生，导致线程不安全。</p><h2 id="_10-那么-hashmap-线程不安全怎么解决" tabindex="-1"><a class="header-anchor" href="#_10-那么-hashmap-线程不安全怎么解决"><span>10.那么 hashMap 线程不安全怎么解决？</span></a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687077774-e0bdaaab-80dc-4dd4-bcb5-1c55e88bbd40.png" alt="img"></p><ul><li>一.给 hashMap <strong>直接加锁</strong>,来保证线程安全</li><li>二.使用 <strong>hashTable</strong>,比方法一效率高,其实就是在其方法上加了 synchronized 锁</li><li>三.使用 <strong>concurrentHashMap</strong> , 不管是其 1.7 还是 1.8 版本,本质都是<strong>减小了锁的粒度,减少线程竞争</strong>来保证高效.</li></ul><h2 id="weakhashmap-与-hashmap-的区别是什么" tabindex="-1"><a class="header-anchor" href="#weakhashmap-与-hashmap-的区别是什么"><span>WeakHashMap 与 HashMap 的区别是什么？</span></a></h2><p>WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。</p><h2 id="hashmap-和-hashtable-的区别" tabindex="-1"><a class="header-anchor" href="#hashmap-和-hashtable-的区别"><span>HashMap 和 Hashtable 的区别</span></a></h2><p>HashMap 和 Hashtable 都实现了 Map 接口，因此很多特性非常相似。但是，他们有以下不同点：</p><ul><li>HashMap 允许键和值是 null，而 Hashtable 不允许键或者值是 null。</li><li>Hashtable 是同步的，而 HashMap 不是。因此，HashMap 更适合于单线程环境，而 Hashtable 适合于多线程环境。</li><li>HashMap 提供了可供应用迭代的键的集合，因此，HashMap 是快速失败的。另一方面，Hashtable 提供了对键的列举(Enumeration)。</li><li>一般认为 Hashtable 是一个遗留的类。</li></ul><h2 id="hashmap-和-concurrenthashmap-的区别" tabindex="-1"><a class="header-anchor" href="#hashmap-和-concurrenthashmap-的区别"><span>HashMap 和 ConcurrentHashMap 的区别</span></a></h2><ul><li>ConcurrentHashMap 对整个桶数组进行了分段，而 HashMap 则没有。</li><li>ConcurrentHashMap 在每一个分段上都用锁进行保护，从而让锁的粒度更精细一些，并发性能更好，而 HashMap 没有锁机制，不是线程安全的。</li></ul><p>引入 ConcurrentHashMap 是为了在同步集合 HashTable 之间有更好的选择，HashTable 与 HashMap、ConcurrentHashMap 主要的区别在于 HashMap 不是同步的、线程不安全的和不适合应用于多线程并发环境下，而 ConcurrentHashMap 是线程安全的集合容器，特别是在多线程和并发环境中，通常作为 Map 的主要实现。</p><h2 id="如何决定选用-hashmap-还是-treemap" tabindex="-1"><a class="header-anchor" href="#如何决定选用-hashmap-还是-treemap"><span>如何决定选用 HashMap 还是 TreeMap？</span></a></h2><p>对于在 Map 中插入、删除和定位元素这类操作，HashMap 是最好的选择。然而，假如你需要对一个有序的 key 集合进行遍历，TreeMap 是更好的选择。基于你的 collection 的大小，也许向 HashMap 中添加元素会更快，将 map 换为 TreeMap 进行有序 key 的遍历。</p><h2 id="hashmap-的实现原理" tabindex="-1"><a class="header-anchor" href="#hashmap-的实现原理"><span>HashMap 的实现原理</span></a></h2><ol><li>HashMap 概述： HashMap 是基于哈希表的 Map 接口的非同步实现。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</li><li>HashMap 的数据结构： 在 java 编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap 也不例外。HashMap 实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</li></ol><p>当我们往 Hashmap 中 put 元素时,首先根据 key 的 hashcode 重新计算 hash 值,根绝 hash 值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上.</p><p>需要注意 Jdk 1.8 中对 HashMap 的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的 O(n)到 O(logn)</p><p>也可以参考：</p><ul><li><a href="http://zhangshixi.iteye.com/blog/672697" target="_blank" rel="noopener noreferrer">深入 Java 集合学习系列：HashMap 的实现原理</a></li><li><a href="https://github.com/guohongjun/HashMap-System-Learning" target="_blank" rel="noopener noreferrer">深入理解 HashMap</a></li></ul><h2 id="解决-hash-冲突的方法有哪些" tabindex="-1"><a class="header-anchor" href="#解决-hash-冲突的方法有哪些"><span>解决 Hash 冲突的方法有哪些</span></a></h2><p>开放地址法、链地址法、再哈希法、建立公共溢出区等</p><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_27093465/article/details/52269862" target="_blank" rel="noopener noreferrer">java 解决 Hash(散列)冲突的四种方法—开放定址法(线性探测,二次探测,伪随机探测)、链地址法、再哈希、建立公共溢出区</a></li><li><a href="https://blog.csdn.net/cpcpcp123/article/details/52744331" target="_blank" rel="noopener noreferrer">Java 8 中 HashMap 冲突解决</a></li></ul><h2 id="多线程情况下-hashmap-死循环的问题" tabindex="-1"><a class="header-anchor" href="#多线程情况下-hashmap-死循环的问题"><span>多线程情况下 HashMap 死循环的问题</span></a></h2><p>可以参考：<a href="https://coolshell.cn/articles/9606.html" target="_blank" rel="noopener noreferrer">疫苗：JAVA HASHMAP 的死循环</a></p><h2 id="hashmap-出现-hash-dos-攻击的问题" tabindex="-1"><a class="header-anchor" href="#hashmap-出现-hash-dos-攻击的问题"><span>HashMap 出现 Hash DOS 攻击的问题</span></a></h2><p>可以参考：<a href="https://coolshell.cn/articles/6424.html" target="_blank" rel="noopener noreferrer">HASH COLLISION DOS 问题</a></p><h1 id="juc" tabindex="-1"><a class="header-anchor" href="#juc"><span>JUC</span></a></h1><h2 id="_11-concurrenthashmap-1-7-和-1-8-有什么区别" tabindex="-1"><a class="header-anchor" href="#_11-concurrenthashmap-1-7-和-1-8-有什么区别"><span>11.concurrentHashMap 1.7 和 1.8 有什么区别</span></a></h2><p>只记录<strong>重点</strong></p><table><thead><tr><th><strong>不同点</strong></th><th><strong>concurrentHashMap 1.7</strong></th><th><strong>concurrentHashMap 1.8</strong></th></tr></thead><tbody><tr><td>锁粒度</td><td>基于 segment</td><td>基于 entry 节点</td></tr><tr><td>锁</td><td>reentrantLock</td><td>synchronized</td></tr><tr><td>底层结构</td><td>Segment + HashEntry + Unsafe</td><td>Synchronized + CAS + Node + Unsafe</td></tr></tbody></table><h2 id="collection-和-collections-的区别" tabindex="-1"><a class="header-anchor" href="#collection-和-collections-的区别"><span>Collection 和 Collections 的区别？</span></a></h2><p>Collection 是一个接口，它是 Set、List 等容器的父接口；Collections 是个一个工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。</p><h2 id="concurrenthashmap-的工作原理及代码实现" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-的工作原理及代码实现"><span>ConcurrentHashMap 的工作原理及代码实现</span></a></h2><p>ConcurrentHashMap 具体是怎么实现线程安全的呢，肯定不可能是每个方法加 synchronized，那样就变成了 HashTable。</p><p>从 ConcurrentHashMap 代码中可以看出，它引入了一个“分段锁”的概念，具体可以理解为把一个大的 Map 拆分成 N 个小的 HashTable，根据 key.hashCode()来决定把 key 放到哪个 HashTable 中。</p><p>在 ConcurrentHashMap 中，就是把 Map 分成了 N 个 Segment，put 和 get 的时候，都是现根据 key.hashCode()算出放到哪个 Segment 中。</p><h2 id="blockingqueue-是什么" tabindex="-1"><a class="header-anchor" href="#blockingqueue-是什么"><span>BlockingQueue 是什么？</span></a></h2><p>Java.util.concurrent.BlockingQueue 是一个队列，在进行检索或移除一个元素的时候，它会等待队列变为非空；当在添加一个元素时，它会等待队列中的可用空间。BlockingQueue 接口是 Java 集合框架的一部分，主要用于实现生产者-消费者模式。我们不需要担心等待生产者有可用的空间，或消费者有可用的对象，因为它都在 BlockingQueue 的实现类中被处理了。Java 提供了集中 BlockingQueue 的实现，比如 ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue,、SynchronousQueue</p><h2 id="java-collections-和-arrays-的-sort-方法默认的排序方法是什么" tabindex="-1"><a class="header-anchor" href="#java-collections-和-arrays-的-sort-方法默认的排序方法是什么"><span>Java Collections 和 Arrays 的 sort 方法默认的排序方法是什么？</span></a></h2><p>参考：<a href="https://blog.csdn.net/TimHeath/article/details/68930482" target="_blank" rel="noopener noreferrer">Collections.sort()和 Arrays.sort()排序算法选择</a></p><h1 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h1><h2 id="请用-iterable-实现一个随机序列产生器" tabindex="-1"><a class="header-anchor" href="#请用-iterable-实现一个随机序列产生器"><span>请用 Iterable 实现一个随机序列产生器?</span></a></h2><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> RandomStringGenerator</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;font-weight:bold;"> Iterable</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> list</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> swap</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">int</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9;"> a</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> int</span><span style="color:#D8DEE9;"> i</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> int</span><span style="color:#D8DEE9;"> i1</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#88C0D0;"> RandomStringGenerator</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> list</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">list</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> list</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Override</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> Iterator</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#88C0D0;"> iterator</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> Iterator</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            @</span><span style="color:#D08770;">Override</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            public</span><span style="color:#81A1C1;"> boolean</span><span style="color:#88C0D0;"> hasNext</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                return</span><span style="color:#81A1C1;"> true;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            @</span><span style="color:#D08770;">Override</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            public</span><span style="color:#8FBCBB;"> T</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                return</span><span style="color:#D8DEE9;"> list</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#ECEFF4;">((</span><span style="color:#81A1C1;">int</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">list</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">size</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> *</span><span style="color:#D8DEE9;"> Math</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">random</span><span style="color:#ECEFF4;">()))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> static</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> main</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9;"> argv</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        var</span><span style="color:#D8DEE9;"> list</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Arrays</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">asList</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">List</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Tree</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Array</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        var</span><span style="color:#D8DEE9;"> gen</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> RandomStringGenerator</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9FF;">list</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">//        for(var s: gen) {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">//            System.out.println(s);</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">//        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">//        var it = gen.iterator();</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">//        for(int i = 0; i &lt; 100; i++) {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">//            System.out.println(it.next());</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">//        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总述" tabindex="-1"><a class="header-anchor" href="#总述"><span>总述</span></a></h1><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span></span></a></h3><h3 id="fail-fast-和-fail-safe-迭代器的区别是什么" tabindex="-1"><a class="header-anchor" href="#fail-fast-和-fail-safe-迭代器的区别是什么"><span>fail-fast 和 fail-safe 迭代器的区别是什么？</span></a></h3><ul><li>fail-fast 直接在容器上进行，在遍历过程中，一旦发现容器中的数据被修改，就会立刻抛出 ConcurrentModificationException 异常从而导致遍历失败。常见的使用 fail-fast 方式的容器有 HashMap 和 ArrayList 等。</li><li>fail-safe 这种遍历基于容器的一个克隆。因此对容器中的内容修改不影响遍历。常见的使用 fail-safe 方式遍历的容器有 ConcurrentHashMap 和 CopyOnWriteArrayList。</li></ul><h3 id="collection-和-collections-有什么区别" tabindex="-1"><a class="header-anchor" href="#collection-和-collections-有什么区别"><span>Collection 和 Collections 有什么区别？</span></a></h3><ul><li>Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。</li><li>Collections 是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法：Collections.sort(list);提供的反转方法：Collections.reverse(list)。</li></ul><h2 id="java-中的集合及其继承关系" tabindex="-1"><a class="header-anchor" href="#java-中的集合及其继承关系"><span>Java 中的集合及其继承关系</span></a></h2><p>关于集合的体系是每个人都应该烂熟于心的,尤其是对我们经常使用的 List,Map 的原理更该如此.这里我们看这张图即可:</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687078109-8d178f88-6f84-41be-973c-511226f5c594.png" alt="img"></p><h2 id="list、set、map-是否继承自-collection-接口" tabindex="-1"><a class="header-anchor" href="#list、set、map-是否继承自-collection-接口"><span>List、Set、Map 是否继承自 Collection 接口？</span></a></h2><p>List、Set 是，Map 不是。Map 是键值对映射容器，与 List 和 Set 有明显的区别，而 Set 存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List 是线性结构的容器，适用于按数值索引访问元素的情形。</p><h2 id="list、map、set-三个接口存取元素时-各有什么特点" tabindex="-1"><a class="header-anchor" href="#list、map、set-三个接口存取元素时-各有什么特点"><span>List、Map、Set 三个接口存取元素时，各有什么特点？</span></a></h2><p>List 以特定索引来存取元素，可以有重复元素。</p><p>Set 不能存放重复元素（用对象的 equals()方法来区分元素是否重复）。</p><p>Map 保存键值对（key-value pair）映射，映射关系可以是一对一或多对一。</p><p>Set 和 Map 容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为 O(1)，而基于排序树版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达到排序和去重的效果。</p><h2 id="list-和-set-区别" tabindex="-1"><a class="header-anchor" href="#list-和-set-区别"><span>List 和 Set 区别</span></a></h2><p>Set 是最简单的一种集合。集合中的对象不按特定的方式排序，并且没有重复对象。</p><ul><li>HashSet： HashSet 类按照哈希算法来存取集合中的对象，存取速度比较快</li><li>TreeSet ：TreeSet 类实现了 SortedSet 接口，能够对集合中的对象进行排序。</li></ul><p>List 的特征是其元素以线性方式存储，集合中可以存放重复对象。</p><ul><li>ArrayList() : 代表长度可以改变得数组。可以对元素进行随机的访问，向 ArrayList()中插入与删除元素的速度慢。</li><li>LinkedList(): 在实现中采用链表数据结构。插入和删除速度快，访问速度慢。</li></ul><h2 id="linkedhashmap-和-priorityqueue-的区别" tabindex="-1"><a class="header-anchor" href="#linkedhashmap-和-priorityqueue-的区别"><span>LinkedHashMap 和 PriorityQueue 的区别</span></a></h2><p>PriorityQueue 是一个优先级队列,保证最高或者最低优先级的的元素总是在队列头部，但是 LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。</p><h2 id="hashset-和-hashmap-区别" tabindex="-1"><a class="header-anchor" href="#hashset-和-hashmap-区别"><span>HashSet 和 HashMap 区别</span></a></h2><ul><li>HashSet 实现了 Set 接口，它不允许集合中有重复的值。它存储的是对象</li><li>HashMap 实现了 Map 接口，Map 接口对键值对进行映射。Map 中不允许重复的键。Map 接口有两个基本的实现，HashMap 和 TreeMap。</li></ul><h2 id="comparator-和-comparable-的区别" tabindex="-1"><a class="header-anchor" href="#comparator-和-comparable-的区别"><span>Comparator 和 Comparable 的区别？</span></a></h2><p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p><h2 id="poll-方法和-remove-方法区别" tabindex="-1"><a class="header-anchor" href="#poll-方法和-remove-方法区别"><span>poll()方法和 remove()方法区别？</span></a></h2><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p><h2 id="arraylist、hashmap-和-linkedlist-的默认空间是多少-扩容机制是什么" tabindex="-1"><a class="header-anchor" href="#arraylist、hashmap-和-linkedlist-的默认空间是多少-扩容机制是什么"><span>ArrayList、HashMap 和 LinkedList 的默认空间是多少？扩容机制是什么</span></a></h2><ul><li>ArrayList 的默认大小是 10 个元素。扩容点规则是，新增的时候发现容量不够用了，就去扩容；扩容大小规则是：扩容后的大小= 原始大小+原始大小/2 + 1。</li><li>HashMap 的默认大小是 16 个元素（必须是 2 的幂）。扩容因子默认 0.75，扩容机制.(当前大小 和 当前容量 的比例超过了 扩容因子，就会扩容，扩容后大小为 一倍。例如：初始大小为 16 ，扩容因子 0.75 ，当容量为 12 的时候，比例已经是 0.75 。触发扩容，扩容后的大小为 32.)</li><li>LinkedList 是一个双向链表，没有初始化大小，也没有扩容的机制，就是一直在前面或者后面新增就好。</li></ul><p>private static final int DEFAULT_CAPACITY = 10;//from HashMap.java JDK 7static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</p><h2 id="如何实现集合排序" tabindex="-1"><a class="header-anchor" href="#如何实现集合排序"><span>如何实现集合排序？</span></a></h2><p>你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。</p><h2 id="如何打印数组内容" tabindex="-1"><a class="header-anchor" href="#如何打印数组内容"><span>如何打印数组内容</span></a></h2><p>你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素。</p><h2 id="你了解-fail-fast-机制吗" tabindex="-1"><a class="header-anchor" href="#你了解-fail-fast-机制吗"><span>你了解 Fail-Fast 机制吗</span></a></h2><p>Fail-Fast 即我们常说的快速失败,</p><p>更多内容参看 fail-fast 机制：http://blog.csdn.net/chenssy/article/details/38151189</p><h2 id="fail-fast-和-fail-safe-有什么区别" tabindex="-1"><a class="header-anchor" href="#fail-fast-和-fail-safe-有什么区别"><span>Fail-fast 和 Fail-safe 有什么区别</span></a></h2><p>Iterator 的 fail-fast 属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。Java.util 包中的所有集合类都被设计为 fail-&gt;fast 的，而 java.util.concurrent 中的集合类都为 fail-safe 的。当检测到正在遍历的集合的结构被改变时，Fail-fast 迭代器抛出 ConcurrentModificationException，而 fail-safe 迭代器从不抛出 ConcurrentModificationException。</p><h2 id="说出几点-java-中使用-collections-的最佳实践" tabindex="-1"><a class="header-anchor" href="#说出几点-java-中使用-collections-的最佳实践"><span>说出几点 Java 中使用 Collections 的最佳实践</span></a></h2><p>这是我在使用 Java 中 Collectionc 类的一些最佳实践：</p><ul><li>使用正确的集合类，例如，如果不需要同步列表，使用 ArrayList 而不是 Vector。</li><li>优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。</li><li>使用接口代表和访问集合，如使用 List 存储 ArrayList，使用 Map 存储 HashMap 等等。</li><li>使用迭代器来循环集合。</li><li>使用集合的时候使用泛型。</li></ul><h2 id="队列和栈是什么-列出它们的区别" tabindex="-1"><a class="header-anchor" href="#队列和栈是什么-列出它们的区别"><span>队列和栈是什么，列出它们的区别？</span></a></h2><p>栈和队列两者都被用来预存储数据。java.util.Queue 是一个接口，它的实现类在 Java 并发包中。队列允许先进先出（FIFO）检索元素，但并非总是这样。Deque 接口允许从两端检索元素。</p><p>栈与队列很相似，但它允许对元素进行后进先出（LIFO）进行检索。</p><p>Stack 是一个扩展自 Vector 的类，而 Queue 是一个接口。</p>`,216)]))}const h=s(i,[["render",p],["__file","集合.html.vue"]]),c=JSON.parse('{"path":"/md/interview/java/basic/%E9%9B%86%E5%90%88.html","title":"集合","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"简述 Java 的 List","slug":"简述-java-的-list","link":"#简述-java-的-list","children":[]},{"level":3,"title":"ArrayList、Vector 和 LinkedList 有什么共同点与区别？","slug":"arraylist、vector-和-linkedlist-有什么共同点与区别","link":"#arraylist、vector-和-linkedlist-有什么共同点与区别","children":[]},{"level":2,"title":"7.arrayList 和 linkedList 的区别？","slug":"_7-arraylist-和-linkedlist-的区别","link":"#_7-arraylist-和-linkedlist-的区别","children":[]},{"level":2,"title":"阐述 ArrayList、Vector、LinkedList 的存储性能和特性。","slug":"阐述-arraylist、vector、linkedlist-的存储性能和特性。","link":"#阐述-arraylist、vector、linkedlist-的存储性能和特性。","children":[]},{"level":2,"title":"ArrayList 和 LinkedList 的区别？","slug":"arraylist-和-linkedlist-的区别","link":"#arraylist-和-linkedlist-的区别","children":[]},{"level":2,"title":"ArrayList 和 Array 有什么区别？","slug":"arraylist-和-array-有什么区别","link":"#arraylist-和-array-有什么区别","children":[]},{"level":2,"title":"ArrayList 与 Vector 区别","slug":"arraylist-与-vector-区别","link":"#arraylist-与-vector-区别","children":[]},{"level":2,"title":"LinkedList 的是单向链表还是双向？","slug":"linkedlist-的是单向链表还是双向","link":"#linkedlist-的是单向链表还是双向","children":[]},{"level":2,"title":"遍历 ArrayList 时如何正确移除一个元素","slug":"遍历-arraylist-时如何正确移除一个元素","link":"#遍历-arraylist-时如何正确移除一个元素","children":[{"level":3,"title":"简述 Java 的 Set","slug":"简述-java-的-set","link":"#简述-java-的-set","children":[]},{"level":3,"title":"HashSet 中，equals 与 hashCode 之间的关系？","slug":"hashset-中-equals-与-hashcode-之间的关系","link":"#hashset-中-equals-与-hashcode-之间的关系","children":[]}]},{"level":2,"title":"12.介绍一下 hashset 吧","slug":"_12-介绍一下-hashset-吧","link":"#_12-介绍一下-hashset-吧","children":[]},{"level":2,"title":"TreeMap 是实现原理","slug":"treemap-是实现原理","link":"#treemap-是实现原理","children":[{"level":3,"title":"简述 Java 的 HashMap","slug":"简述-java-的-hashmap","link":"#简述-java-的-hashmap","children":[]},{"level":3,"title":"为何 HashMap 线程不安全","slug":"为何-hashmap-线程不安全","link":"#为何-hashmap-线程不安全","children":[]},{"level":3,"title":"简述 Java 的 TreeMap","slug":"简述-java-的-treemap","link":"#简述-java-的-treemap","children":[]},{"level":3,"title":"HashMap 和 Hashtable 有什么区别？","slug":"hashmap-和-hashtable-有什么区别","link":"#hashmap-和-hashtable-有什么区别","children":[]},{"level":3,"title":"如何决定使用 HashMap 还是 TreeMap?","slug":"如何决定使用-hashmap-还是-treemap","link":"#如何决定使用-hashmap-还是-treemap","children":[]},{"level":3,"title":"HashMap 的底层数据结构是什么？","slug":"hashmap-的底层数据结构是什么","link":"#hashmap-的底层数据结构是什么","children":[]},{"level":3,"title":"02、为什么链表改为红黑树的阈值是 8?","slug":"_02、为什么链表改为红黑树的阈值是-8","link":"#_02、为什么链表改为红黑树的阈值是-8","children":[]},{"level":3,"title":"03、解决 hash 冲突的办法有哪些？HashMap 用的哪种？","slug":"_03、解决-hash-冲突的办法有哪些-hashmap-用的哪种","link":"#_03、解决-hash-冲突的办法有哪些-hashmap-用的哪种","children":[]},{"level":3,"title":"04、为什么在解决 hash 冲突的时候，不直接用红黑树？而选择先用链表，再转红黑树?","slug":"_04、为什么在解决-hash-冲突的时候-不直接用红黑树-而选择先用链表-再转红黑树","link":"#_04、为什么在解决-hash-冲突的时候-不直接用红黑树-而选择先用链表-再转红黑树","children":[]},{"level":3,"title":"05、HashMap 默认加载因子是多少？为什么是 0.75，不是 0.6 或者 0.8 ？","slug":"_05、hashmap-默认加载因子是多少-为什么是-0-75-不是-0-6-或者-0-8","link":"#_05、hashmap-默认加载因子是多少-为什么是-0-75-不是-0-6-或者-0-8","children":[]},{"level":3,"title":"06、HashMap 中 key 的存储索引是怎么计算的？","slug":"_06、hashmap-中-key-的存储索引是怎么计算的","link":"#_06、hashmap-中-key-的存储索引是怎么计算的","children":[]},{"level":3,"title":"HashMap 数组的长度为什么是 2 的幂次方？","slug":"hashmap-数组的长度为什么是-2-的幂次方","link":"#hashmap-数组的长度为什么是-2-的幂次方","children":[]},{"level":3,"title":"10、HashMap 的 put 方法流程？","slug":"_10、hashmap-的-put-方法流程","link":"#_10、hashmap-的-put-方法流程","children":[]},{"level":3,"title":"11、HashMap 的扩容方式？","slug":"_11、hashmap-的扩容方式","link":"#_11、hashmap-的扩容方式","children":[]},{"level":3,"title":"12、一般用什么作为 HashMap 的 key?","slug":"_12、一般用什么作为-hashmap-的-key","link":"#_12、一般用什么作为-hashmap-的-key","children":[]},{"level":3,"title":"13、HashMap 为什么线程不安全？","slug":"_13、hashmap-为什么线程不安全","link":"#_13、hashmap-为什么线程不安全","children":[]}]},{"level":2,"title":"8.hashMap 1.7 和 hashMap 1.8 的区别？","slug":"_8-hashmap-1-7-和-hashmap-1-8-的区别","link":"#_8-hashmap-1-7-和-hashmap-1-8-的区别","children":[]},{"level":2,"title":"9.hashMap 线程不安全体现在哪里？","slug":"_9-hashmap-线程不安全体现在哪里","link":"#_9-hashmap-线程不安全体现在哪里","children":[]},{"level":2,"title":"10.那么 hashMap 线程不安全怎么解决？","slug":"_10-那么-hashmap-线程不安全怎么解决","link":"#_10-那么-hashmap-线程不安全怎么解决","children":[]},{"level":2,"title":"WeakHashMap 与 HashMap 的区别是什么？","slug":"weakhashmap-与-hashmap-的区别是什么","link":"#weakhashmap-与-hashmap-的区别是什么","children":[]},{"level":2,"title":"HashMap 和 Hashtable 的区别","slug":"hashmap-和-hashtable-的区别","link":"#hashmap-和-hashtable-的区别","children":[]},{"level":2,"title":"HashMap 和 ConcurrentHashMap 的区别","slug":"hashmap-和-concurrenthashmap-的区别","link":"#hashmap-和-concurrenthashmap-的区别","children":[]},{"level":2,"title":"如何决定选用 HashMap 还是 TreeMap？","slug":"如何决定选用-hashmap-还是-treemap","link":"#如何决定选用-hashmap-还是-treemap","children":[]},{"level":2,"title":"HashMap 的实现原理","slug":"hashmap-的实现原理","link":"#hashmap-的实现原理","children":[]},{"level":2,"title":"解决 Hash 冲突的方法有哪些","slug":"解决-hash-冲突的方法有哪些","link":"#解决-hash-冲突的方法有哪些","children":[]},{"level":2,"title":"多线程情况下 HashMap 死循环的问题","slug":"多线程情况下-hashmap-死循环的问题","link":"#多线程情况下-hashmap-死循环的问题","children":[]},{"level":2,"title":"HashMap 出现 Hash DOS 攻击的问题","slug":"hashmap-出现-hash-dos-攻击的问题","link":"#hashmap-出现-hash-dos-攻击的问题","children":[]},{"level":2,"title":"11.concurrentHashMap 1.7 和 1.8 有什么区别","slug":"_11-concurrenthashmap-1-7-和-1-8-有什么区别","link":"#_11-concurrenthashmap-1-7-和-1-8-有什么区别","children":[]},{"level":2,"title":"Collection 和 Collections 的区别？","slug":"collection-和-collections-的区别","link":"#collection-和-collections-的区别","children":[]},{"level":2,"title":"ConcurrentHashMap 的工作原理及代码实现","slug":"concurrenthashmap-的工作原理及代码实现","link":"#concurrenthashmap-的工作原理及代码实现","children":[]},{"level":2,"title":"BlockingQueue 是什么？","slug":"blockingqueue-是什么","link":"#blockingqueue-是什么","children":[]},{"level":2,"title":"Java Collections 和 Arrays 的 sort 方法默认的排序方法是什么？","slug":"java-collections-和-arrays-的-sort-方法默认的排序方法是什么","link":"#java-collections-和-arrays-的-sort-方法默认的排序方法是什么","children":[]},{"level":2,"title":"请用 Iterable 实现一个随机序列产生器?","slug":"请用-iterable-实现一个随机序列产生器","link":"#请用-iterable-实现一个随机序列产生器","children":[{"level":3,"title":"","slug":"-2","link":"#-2","children":[]},{"level":3,"title":"fail-fast 和 fail-safe 迭代器的区别是什么？","slug":"fail-fast-和-fail-safe-迭代器的区别是什么","link":"#fail-fast-和-fail-safe-迭代器的区别是什么","children":[]},{"level":3,"title":"Collection 和 Collections 有什么区别？","slug":"collection-和-collections-有什么区别","link":"#collection-和-collections-有什么区别","children":[]}]},{"level":2,"title":"Java 中的集合及其继承关系","slug":"java-中的集合及其继承关系","link":"#java-中的集合及其继承关系","children":[]},{"level":2,"title":"List、Set、Map 是否继承自 Collection 接口？","slug":"list、set、map-是否继承自-collection-接口","link":"#list、set、map-是否继承自-collection-接口","children":[]},{"level":2,"title":"List、Map、Set 三个接口存取元素时，各有什么特点？","slug":"list、map、set-三个接口存取元素时-各有什么特点","link":"#list、map、set-三个接口存取元素时-各有什么特点","children":[]},{"level":2,"title":"List 和 Set 区别","slug":"list-和-set-区别","link":"#list-和-set-区别","children":[]},{"level":2,"title":"LinkedHashMap 和 PriorityQueue 的区别","slug":"linkedhashmap-和-priorityqueue-的区别","link":"#linkedhashmap-和-priorityqueue-的区别","children":[]},{"level":2,"title":"HashSet 和 HashMap 区别","slug":"hashset-和-hashmap-区别","link":"#hashset-和-hashmap-区别","children":[]},{"level":2,"title":"Comparator 和 Comparable 的区别？","slug":"comparator-和-comparable-的区别","link":"#comparator-和-comparable-的区别","children":[]},{"level":2,"title":"poll()方法和 remove()方法区别？","slug":"poll-方法和-remove-方法区别","link":"#poll-方法和-remove-方法区别","children":[]},{"level":2,"title":"ArrayList、HashMap 和 LinkedList 的默认空间是多少？扩容机制是什么","slug":"arraylist、hashmap-和-linkedlist-的默认空间是多少-扩容机制是什么","link":"#arraylist、hashmap-和-linkedlist-的默认空间是多少-扩容机制是什么","children":[]},{"level":2,"title":"如何实现集合排序？","slug":"如何实现集合排序","link":"#如何实现集合排序","children":[]},{"level":2,"title":"如何打印数组内容","slug":"如何打印数组内容","link":"#如何打印数组内容","children":[]},{"level":2,"title":"你了解 Fail-Fast 机制吗","slug":"你了解-fail-fast-机制吗","link":"#你了解-fail-fast-机制吗","children":[]},{"level":2,"title":"Fail-fast 和 Fail-safe 有什么区别","slug":"fail-fast-和-fail-safe-有什么区别","link":"#fail-fast-和-fail-safe-有什么区别","children":[]},{"level":2,"title":"说出几点 Java 中使用 Collections 的最佳实践","slug":"说出几点-java-中使用-collections-的最佳实践","link":"#说出几点-java-中使用-collections-的最佳实践","children":[]},{"level":2,"title":"队列和栈是什么，列出它们的区别？","slug":"队列和栈是什么-列出它们的区别","link":"#队列和栈是什么-列出它们的区别","children":[]}],"git":{"updatedTime":1711074643000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":7,"url":"https://github.com/hyfly233"},{"name":"hyfly233","username":"hyfly233","email":"1274694743@qq.com","commits":1,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/interview/java/basic/集合.md"}');export{h as comp,c as data};
