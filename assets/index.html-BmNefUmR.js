import{_ as a,c as s,a as r,b as t,d as n,f as e,r as g,o as h,e as o}from"./app-chPKMbRn.js";const d={};function p(m,l){const i=g("RouteLink");return h(),s("div",null,[l[15]||(l[15]=r("h1",{id:"图算法",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#图算法"},[r("span",null,"图算法")])],-1)),l[16]||(l[16]=r("h2",{id:"图算法目录",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#图算法目录"},[r("span",null,"图算法目录")])],-1)),r("ul",null,[r("li",null,[t(i,{to:"/md/article/algorithm/graph/depth_first_search.html"},{default:n(()=>l[0]||(l[0]=[o("深度优先搜索 (DFS)")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/breadth_first_search.html"},{default:n(()=>l[1]||(l[1]=[o("广度优先搜索 (BFS)")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/dijkstra_algorithm.html"},{default:n(()=>l[2]||(l[2]=[o("Dijkstra 算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/bellman_ford_algorithm.html"},{default:n(()=>l[3]||(l[3]=[o("贝尔曼-福特算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/floyd_warshall_algorithm.html"},{default:n(()=>l[4]||(l[4]=[o("Floyd-Warshall 算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/topological_sort.html"},{default:n(()=>l[5]||(l[5]=[o("拓扑排序")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/minimum_spanning_tree.html"},{default:n(()=>l[6]||(l[6]=[o("最小生成树 (MST)")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/strongly_connected_components.html"},{default:n(()=>l[7]||(l[7]=[o("强连通分量 (SCC)")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/bipartite_graph_check.html"},{default:n(()=>l[8]||(l[8]=[o("二分图检测")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/hungarian_algorithm.html"},{default:n(()=>l[9]||(l[9]=[o("匈牙利算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/a_star_search.html"},{default:n(()=>l[10]||(l[10]=[o("A* 搜索")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/johnson_algorithm.html"},{default:n(()=>l[11]||(l[11]=[o("Johnson 算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/edmonds_karp_algorithm.html"},{default:n(()=>l[12]||(l[12]=[o("Edmonds-Karp 算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/dinic_algorithm.html"},{default:n(()=>l[13]||(l[13]=[o("Dinic 算法")])),_:1})]),r("li",null,[t(i,{to:"/md/article/algorithm/graph/hopcroft_karp_algorithm.html"},{default:n(()=>l[14]||(l[14]=[o("Hopcroft-Karp 算法")])),_:1})])]),l[17]||(l[17]=e('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>图算法用于处理图结构的数据，图由顶点（节点）和边组成。以下是一些常见的图算法：</p><h3 id="_1-深度优先搜索-depth-first-search-dfs" tabindex="-1"><a class="header-anchor" href="#_1-深度优先搜索-depth-first-search-dfs"><span>1. 深度优先搜索 (Depth-First Search, DFS)</span></a></h3><ul><li><strong>描述</strong>：从起始节点开始，沿着每个分支尽可能深入地搜索。</li><li><strong>时间复杂度</strong>：O(V + E)，其中 V 是顶点数，E 是边数</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：图的遍历、连通分量检测、拓扑排序</li></ul><h3 id="_2-广度优先搜索-breadth-first-search-bfs" tabindex="-1"><a class="header-anchor" href="#_2-广度优先搜索-breadth-first-search-bfs"><span>2. 广度优先搜索 (Breadth-First Search, BFS)</span></a></h3><ul><li><strong>描述</strong>：从起始节点开始，逐层搜索每个节点。</li><li><strong>时间复杂度</strong>：O(V + E)</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：图的遍历、最短路径查找（无权图）</li></ul><h3 id="_3-dijkstra-算法-dijkstra-s-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-dijkstra-算法-dijkstra-s-algorithm"><span>3. Dijkstra 算法 (Dijkstra&#39;s Algorithm)</span></a></h3><ul><li><strong>描述</strong>：在加权图中查找从起始节点到其他节点的最短路径。</li><li><strong>时间复杂度</strong>：O(V^2) 或 O(E + V log V)（使用优先队列）</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：加权图的单源最短路径查找</li></ul><h3 id="_4-贝尔曼-福特算法-bellman-ford-algorithm" tabindex="-1"><a class="header-anchor" href="#_4-贝尔曼-福特算法-bellman-ford-algorithm"><span>4. 贝尔曼-福特算法 (Bellman-Ford Algorithm)</span></a></h3><ul><li><strong>描述</strong>：在加权图中查找从起始节点到其他节点的最短路径，允许负权重边。</li><li><strong>时间复杂度</strong>：O(VE)</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：加权图的单源最短路径查找，允许负权重边</li></ul><h3 id="_5-floyd-warshall-算法-floyd-warshall-algorithm" tabindex="-1"><a class="header-anchor" href="#_5-floyd-warshall-算法-floyd-warshall-algorithm"><span>5. Floyd-Warshall 算法 (Floyd-Warshall Algorithm)</span></a></h3><ul><li><strong>描述</strong>：在加权图中查找所有节点对之间的最短路径。</li><li><strong>时间复杂度</strong>：O(V^3)</li><li><strong>空间复杂度</strong>：O(V^2)</li><li><strong>适用场景</strong>：加权图的所有节点对最短路径查找</li></ul><h3 id="_6-拓扑排序-topological-sort" tabindex="-1"><a class="header-anchor" href="#_6-拓扑排序-topological-sort"><span>6. 拓扑排序 (Topological Sort)</span></a></h3><ul><li><strong>描述</strong>：对有向无环图（DAG）进行排序，使得对于每一条有向边 (u, v)，顶点 u 在顶点 v 之前。</li><li><strong>时间复杂度</strong>：O(V + E)</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：任务调度、依赖关系解析</li></ul><h3 id="_7-最小生成树-minimum-spanning-tree-mst" tabindex="-1"><a class="header-anchor" href="#_7-最小生成树-minimum-spanning-tree-mst"><span>7. 最小生成树 (Minimum Spanning Tree, MST)</span></a></h3><ul><li><strong>描述</strong>：在加权无向图中找到一棵包含所有顶点的树，使得树的边权重之和最小。 <ul><li><strong>Kruskal 算法</strong>：使用贪心策略，通过排序边并逐步添加到生成树中。 <ul><li><strong>时间复杂度</strong>：O(E log E)</li><li><strong>空间复杂度</strong>：O(V)</li></ul></li><li><strong>Prim 算法</strong>：使用贪心策略，从一个顶点开始逐步扩展生成树。 <ul><li><strong>时间复杂度</strong>：O(V^2) 或 O(E + V log V)（使用优先队列）</li><li><strong>空间复杂度</strong>：O(V)</li></ul></li></ul></li></ul><h3 id="_8-强连通分量-strongly-connected-components-scc" tabindex="-1"><a class="header-anchor" href="#_8-强连通分量-strongly-connected-components-scc"><span>8. 强连通分量 (Strongly Connected Components, SCC)</span></a></h3><ul><li><strong>描述</strong>：在有向图中找到所有强连通分量，每个强连通分量是一个子图，其中任意两个顶点互相可达。 <ul><li><strong>Kosaraju 算法</strong>：使用两次深度优先搜索。 <ul><li><strong>时间复杂度</strong>：O(V + E)</li><li><strong>空间复杂度</strong>：O(V)</li></ul></li><li><strong>Tarjan 算法</strong>：使用一次深度优先搜索和栈。 <ul><li><strong>时间复杂度</strong>：O(V + E)</li><li><strong>空间复杂度</strong>：O(V)</li></ul></li></ul></li></ul><h3 id="_9-二分图检测-bipartite-graph-check" tabindex="-1"><a class="header-anchor" href="#_9-二分图检测-bipartite-graph-check"><span>9. 二分图检测 (Bipartite Graph Check)</span></a></h3><ul><li><strong>描述</strong>：检查图是否为二分图，即能否将图的顶点集分成两个互不相交的子集，使得每条边的两个端点分别属于不同的子集。</li><li><strong>时间复杂度</strong>：O(V + E)</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：图的着色、匹配问题</li></ul><h3 id="_10-匈牙利算法-hungarian-algorithm" tabindex="-1"><a class="header-anchor" href="#_10-匈牙利算法-hungarian-algorithm"><span>10. 匈牙利算法 (Hungarian Algorithm)</span></a></h3><ul><li><strong>描述</strong>：在二分图中找到最大匹配，即找到最多的不相交边集。</li><li><strong>时间复杂度</strong>：O(VE)</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：二分图匹配问题</li></ul><h3 id="_11-a-搜索-a-search" tabindex="-1"><a class="header-anchor" href="#_11-a-搜索-a-search"><span>11. A* 搜索 (A* Search)</span></a></h3><ul><li><strong>描述</strong>：启发式搜索算法，结合了广度优先搜索和最佳优先搜索，通过估计函数来找到最短路径。</li><li><strong>时间复杂度</strong>：O(E)，其中 E 是边数</li><li><strong>空间复杂度</strong>：O(V)</li><li><strong>适用场景</strong>：路径查找</li></ul><h3 id="_12-johnson-算法-johnson-s-algorithm" tabindex="-1"><a class="header-anchor" href="#_12-johnson-算法-johnson-s-algorithm"><span>12. Johnson 算法 (Johnson&#39;s Algorithm)</span></a></h3><ul><li><strong>描述</strong>：在加权图中查找所有节点对之间的最短路径，适用于稀疏图。</li><li><strong>时间复杂度</strong>：O(V^2 log V + VE)</li><li><strong>空间复杂度</strong>：O(V^2)</li><li><strong>适用场景</strong>：加权图的所有节点对最短路径查找</li></ul><h3 id="_13-edmonds-karp-算法-edmonds-karp-algorithm" tabindex="-1"><a class="header-anchor" href="#_13-edmonds-karp-算法-edmonds-karp-algorithm"><span>13. Edmonds-Karp 算法 (Edmonds-Karp Algorithm)</span></a></h3><ul><li><strong>描述</strong>：用于计算网络中的最大流，基于 Ford-Fulkerson 方法，使用广度优先搜索查找增广路径。</li><li><strong>时间复杂度</strong>：O(VE^2)</li><li><strong>空间复杂度</strong>：O(V + E)</li><li><strong>适用场景</strong>：网络流问题</li></ul><h3 id="_14-dinic-算法-dinic-s-algorithm" tabindex="-1"><a class="header-anchor" href="#_14-dinic-算法-dinic-s-algorithm"><span>14. Dinic 算法 (Dinic&#39;s Algorithm)</span></a></h3><ul><li><strong>描述</strong>：用于计算网络中的最大流，改进了 Ford-Fulkerson 方法，使用分层网络和阻塞流。</li><li><strong>时间复杂度</strong>：O(V^2E)</li><li><strong>空间复杂度</strong>：O(V + E)</li><li><strong>适用场景</strong>：网络流问题</li></ul><h3 id="_15-hopcroft-karp-算法-hopcroft-karp-algorithm" tabindex="-1"><a class="header-anchor" href="#_15-hopcroft-karp-算法-hopcroft-karp-algorithm"><span>15. Hopcroft-Karp 算法 (Hopcroft-Karp Algorithm)</span></a></h3><ul><li><strong>描述</strong>：用于在二分图中找到最大匹配，使用分层搜索和增广路径。</li><li><strong>时间复杂度</strong>：O(√V E)</li><li><strong>空间复杂度</strong>：O(V + E)</li><li><strong>适用场景</strong>：二分图匹配问题</li></ul><p>这些图算法各有特点和适用场景，选择合适的图算法取决于具体的应用需求和图的特性。</p><p>图算法和搜索算法虽然有重叠，但它们并不是完全相同的概念。图算法是一个更广泛的类别，包含了各种用于处理图结构的数据的算法，而搜索算法是其中的一部分。以下是对两者的详细解释：</p><h3 id="图算法-1" tabindex="-1"><a class="header-anchor" href="#图算法-1"><span>图算法</span></a></h3><p>图算法是用于处理图结构数据的算法，图由顶点（节点）和边组成。图算法包括但不限于搜索算法。图算法的应用范围非常广泛，包括路径查找、最短路径、连通分量、最小生成树、图的遍历等。以下是一些常见的图算法：</p><ol><li><p><strong>图的遍历</strong>：</p><ul><li>深度优先搜索 (DFS)</li><li>广度优先搜索 (BFS)</li></ul></li><li><p><strong>最短路径算法</strong>：</p><ul><li>Dijkstra 算法</li><li>Bellman-Ford 算法</li><li>Floyd-Warshall 算法</li><li>A* 搜索</li></ul></li><li><p><strong>最小生成树算法</strong>：</p><ul><li>Kruskal 算法</li><li>Prim 算法</li></ul></li><li><p><strong>连通分量算法</strong>：</p><ul><li>Kosaraju 算法</li><li>Tarjan 算法</li></ul></li><li><p><strong>拓扑排序</strong>：</p><ul><li>Kahn 算法</li><li>基于 DFS 的拓扑排序</li></ul></li><li><p><strong>网络流算法</strong>：</p><ul><li>Ford-Fulkerson 算法</li><li>Edmonds-Karp 算法</li><li>Dinic 算法</li></ul></li><li><p><strong>匹配算法</strong>：</p><ul><li>匈牙利算法</li><li>Hopcroft-Karp 算法</li></ul></li></ol><h3 id="搜索算法" tabindex="-1"><a class="header-anchor" href="#搜索算法"><span>搜索算法</span></a></h3><p>搜索算法是用于在数据结构中查找特定元素或满足特定条件的元素的算法。搜索算法可以应用于各种数据结构，包括数组、链表、树和图。搜索算法的一些常见例子包括：</p><ol><li><p><strong>线性搜索</strong>：</p><ul><li>在数组或链表中逐个检查每个元素。</li></ul></li><li><p><strong>二分搜索</strong>：</p><ul><li>在有序数组中通过反复将搜索范围减半来查找目标元素。</li></ul></li><li><p><strong>插值搜索</strong>：</p><ul><li>改进的二分搜索，通过估计目标元素的位置来缩小搜索范围。</li></ul></li><li><p><strong>跳跃搜索</strong>：</p><ul><li>在有序数组中通过跳跃固定步长来缩小搜索范围，然后进行线性搜索。</li></ul></li><li><p><strong>深度优先搜索 (DFS)</strong>：</p><ul><li>在图或树中，从起始节点开始，沿着每个分支尽可能深入地搜索。</li></ul></li><li><p><strong>广度优先搜索 (BFS)</strong>：</p><ul><li>在图或树中，从起始节点开始，逐层搜索每个节点。</li></ul></li><li><p><em><em>A</em> 搜索</em>*：</p><ul><li>启发式搜索算法，结合了广度优先搜索和最佳优先搜索，通过估计函数来找到最短路径。</li></ul></li></ol><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><ul><li><strong>图算法</strong> 是一个更广泛的类别，包含了各种用于处理图结构的数据的算法，包括但不限于搜索算法。</li><li><strong>搜索算法</strong> 是一种用于查找特定元素或满足特定条件的元素的算法，可以应用于各种数据结构，包括图。</li></ul><p>因此，图算法和搜索算法有重叠，但它们并不是完全相同的概念。图算法包含了搜索算法，但也包括其他类型的算法，如最短路径算法、最小生成树算法、网络流算法等。</p>',43))])}const c=a(d,[["render",p],["__file","index.html.vue"]]),f=JSON.parse(`{"path":"/md/article/algorithm/graph/","title":"图算法","lang":"en-US","frontmatter":{"title":"图算法","sidebar":false},"headers":[{"level":2,"title":"图算法目录","slug":"图算法目录","link":"#图算法目录","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"1. 深度优先搜索 (Depth-First Search, DFS)","slug":"_1-深度优先搜索-depth-first-search-dfs","link":"#_1-深度优先搜索-depth-first-search-dfs","children":[]},{"level":3,"title":"2. 广度优先搜索 (Breadth-First Search, BFS)","slug":"_2-广度优先搜索-breadth-first-search-bfs","link":"#_2-广度优先搜索-breadth-first-search-bfs","children":[]},{"level":3,"title":"3. Dijkstra 算法 (Dijkstra's Algorithm)","slug":"_3-dijkstra-算法-dijkstra-s-algorithm","link":"#_3-dijkstra-算法-dijkstra-s-algorithm","children":[]},{"level":3,"title":"4. 贝尔曼-福特算法 (Bellman-Ford Algorithm)","slug":"_4-贝尔曼-福特算法-bellman-ford-algorithm","link":"#_4-贝尔曼-福特算法-bellman-ford-algorithm","children":[]},{"level":3,"title":"5. Floyd-Warshall 算法 (Floyd-Warshall Algorithm)","slug":"_5-floyd-warshall-算法-floyd-warshall-algorithm","link":"#_5-floyd-warshall-算法-floyd-warshall-algorithm","children":[]},{"level":3,"title":"6. 拓扑排序 (Topological Sort)","slug":"_6-拓扑排序-topological-sort","link":"#_6-拓扑排序-topological-sort","children":[]},{"level":3,"title":"7. 最小生成树 (Minimum Spanning Tree, MST)","slug":"_7-最小生成树-minimum-spanning-tree-mst","link":"#_7-最小生成树-minimum-spanning-tree-mst","children":[]},{"level":3,"title":"8. 强连通分量 (Strongly Connected Components, SCC)","slug":"_8-强连通分量-strongly-connected-components-scc","link":"#_8-强连通分量-strongly-connected-components-scc","children":[]},{"level":3,"title":"9. 二分图检测 (Bipartite Graph Check)","slug":"_9-二分图检测-bipartite-graph-check","link":"#_9-二分图检测-bipartite-graph-check","children":[]},{"level":3,"title":"10. 匈牙利算法 (Hungarian Algorithm)","slug":"_10-匈牙利算法-hungarian-algorithm","link":"#_10-匈牙利算法-hungarian-algorithm","children":[]},{"level":3,"title":"11. A* 搜索 (A* Search)","slug":"_11-a-搜索-a-search","link":"#_11-a-搜索-a-search","children":[]},{"level":3,"title":"12. Johnson 算法 (Johnson's Algorithm)","slug":"_12-johnson-算法-johnson-s-algorithm","link":"#_12-johnson-算法-johnson-s-algorithm","children":[]},{"level":3,"title":"13. Edmonds-Karp 算法 (Edmonds-Karp Algorithm)","slug":"_13-edmonds-karp-算法-edmonds-karp-algorithm","link":"#_13-edmonds-karp-算法-edmonds-karp-algorithm","children":[]},{"level":3,"title":"14. Dinic 算法 (Dinic's Algorithm)","slug":"_14-dinic-算法-dinic-s-algorithm","link":"#_14-dinic-算法-dinic-s-algorithm","children":[]},{"level":3,"title":"15. Hopcroft-Karp 算法 (Hopcroft-Karp Algorithm)","slug":"_15-hopcroft-karp-算法-hopcroft-karp-algorithm","link":"#_15-hopcroft-karp-算法-hopcroft-karp-algorithm","children":[]},{"level":3,"title":"图算法","slug":"图算法-1","link":"#图算法-1","children":[]},{"level":3,"title":"搜索算法","slug":"搜索算法","link":"#搜索算法","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]}],"git":{"updatedTime":1735987278000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":8,"url":"https://github.com/hyfly233"},{"name":"hyfly233","username":"hyfly233","email":"1274694743@qq.com","commits":4,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/article/algorithm/graph/index.md"}`);export{c as comp,f as data};
