import{_ as s,c as l,f as e,o as n}from"./app-chPKMbRn.js";const t={};function i(r,a){return n(),l("div",null,a[0]||(a[0]=[e(`<h2 id="基础相关" tabindex="-1"><a class="header-anchor" href="#基础相关"><span>基础相关</span></a></h2><h3 id="java-语言具有哪些特点" tabindex="-1"><a class="header-anchor" href="#java-语言具有哪些特点"><span>Java 语言具有哪些特点</span></a></h3><ul><li>Java 为纯面向对象的语言。它能够直接反应现实生活中的对象。</li><li>具有平台无关性。Java 利用 Java 虚拟机运行字节码，编译后的程序可在其它平台运行。</li><li>Java 为解释型语言，编译器把 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行，具有很好的可移植性。</li><li>Java 提供了很多内置类库。</li><li>Java 具有较好的安全性和健壮性，Java 提供了异常处理和垃圾回收机制。</li></ul><h3 id="jdk-与-jre" tabindex="-1"><a class="header-anchor" href="#jdk-与-jre"><span>JDK 与 JRE</span></a></h3><ul><li>JDK：Java 开发工具包（Java Development Kit），提供了 Java 的开发环境和运行环境</li><li>JRE：Java 运行环境（Java Runtime Environment），提供了 Java 运行所需的环境</li><li>JDK 包含了 JRE</li></ul><h3 id="java-基本数据类型" tabindex="-1"><a class="header-anchor" href="#java-基本数据类型"><span>Java 基本数据类型</span></a></h3><ul><li>byte: 占用 1 个字节，取值范围-128 ~ 127</li><li>short: 占用 2 个字节，取值范围-215 ~ 215-1</li><li>int：占用 4 个字节，取值范围-231 ~ 231-1</li><li>long：占用 8 个字节</li><li>float：占用 4 个字节</li><li>double：占用 8 个字节</li><li>char: 占用 2 个字节</li><li>boolean：占用大小根据实现虚拟机不同有所差异</li></ul><h3 id="简述-java-访问修饰符" tabindex="-1"><a class="header-anchor" href="#简述-java-访问修饰符"><span>简述 Java 访问修饰符</span></a></h3><ul><li>public: 对所有类可见</li><li>protected : 对同一包内的类和所有子类可见，不能修饰类</li><li>default: 默认访问修饰符，在同一包内可见</li><li>private: 在同一类内可见，不能修饰类</li></ul><table><thead><tr><th>修饰符</th><th>当前类</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>y</td><td>y</td><td>y</td><td>y</td></tr><tr><td>protected</td><td>y</td><td>y</td><td>y</td><td>×</td></tr><tr><td>default</td><td>y</td><td>y</td><td>×</td><td>×</td></tr><tr><td>private</td><td>y</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="java-代码块执行顺序" tabindex="-1"><a class="header-anchor" href="#java-代码块执行顺序"><span>Java 代码块执行顺序</span></a></h3><ul><li>静态代码块只执行一次</li><li>先后顺序：父类静态变量 =&gt; 父类静态代码块 =&gt; 子类静态变量 =&gt; 子类静态代码块 =&gt; 父类非静态变量 =&gt; 父类非静态代码块 =&gt; 父类构造函数 =&gt; 子类非静态变量 =&gt; 子类非静态代码块 =&gt; 子类构造函数</li></ul><h3 id="java-中类、对象、引用三者是什么关系" tabindex="-1"><a class="header-anchor" href="#java-中类、对象、引用三者是什么关系"><span>Java 中类、对象、引用三者是什么关系</span></a></h3><p>在 Java 中，类是一种定义对象属性和行为的模板，对象是类的一个实例，而引用是指向对象在内存中的地址的变量</p><ul><li>类是一个通用的模板，它定义了一组属性和方法，可以用来创建对象</li><li>对象是由类创建的实例，它包含了类中定义的所有属性和方法的值和实现。可以通过使用 new 关键字来创建对象，然后可以使用该对象调用类中的方法和访问其属性</li><li>引用是一个指向对象的指针，它存储对象在内存中的地址。当使用 new 关键字创建对象时，返回的是对象在内存中的地址，可以将该地址存储在一个引用变量中。然后，可以使用该引用变量来访问对象的属性和方法</li></ul><p>因此，类是创建对象的模板，对象是类的实例，而引用是指向对象的指针。可以通过引用来访问对象的属性和方法</p><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><h3 id="简述类" tabindex="-1"><a class="header-anchor" href="#简述类"><span>简述类</span></a></h3><p>类是一个通用的模板，它定义了一组属性和方法，可以用来创建对象</p><h3 id="内部类相关" tabindex="-1"><a class="header-anchor" href="#内部类相关"><span>内部类相关</span></a></h3><h4 id="简述内部类及其作用" tabindex="-1"><a class="header-anchor" href="#简述内部类及其作用"><span>简述内部类及其作用</span></a></h4><ul><li>成员内部类 作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性</li><li>局部内部类 存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量</li><li>匿名内部类 只能使用一次，没有类名，只能访问外部类的 final 变量</li><li>静态内部类 类似类的静态成员变量</li></ul><h3 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类"><span>包装类</span></a></h3><h4 id="integer-a-1000-integer-b-1000-a-b-的结果是什么-那如果-a-b-都为-1-结果又是什么" tabindex="-1"><a class="header-anchor" href="#integer-a-1000-integer-b-1000-a-b-的结果是什么-那如果-a-b-都为-1-结果又是什么"><span>Integer a = 1000，Integer b = 1000，a==b 的结果是什么？那如果 a，b 都为 1，结果又是什么？</span></a></h4><ul><li>Integer a = 1000，Integer b = 1000，a==b 结果为 false</li><li>Integer a = 1，Integer b = 1，a==b 结果为 true</li><li>Integer 包装类缓存的范围，在-128~127 之间会缓存起来，比较的是直接缓存的数据，在此之外比较的是对象</li></ul><h4 id="什么是包装类" tabindex="-1"><a class="header-anchor" href="#什么是包装类"><span>什么是包装类</span></a></h4><p>Java 中有 8 个基本类型，分别对应的 8 个包装类</p><ul><li>byte -- Byte</li><li>boolean -- Boolean</li><li>short -- Short</li><li>char -- Character</li><li>int -- Integer</li><li>long -- Long</li><li>float -- Float</li><li>double -- Double</li></ul><h4 id="为什么需要包装类" tabindex="-1"><a class="header-anchor" href="#为什么需要包装类"><span>为什么需要包装类:</span></a></h4><ul><li>基本数据类型方便、简单、高效，但泛型不支持、集合元素不支持</li><li>不符合面向对象思维</li><li>包装类提供很多方法，方便使用，如 Integer 类 toString(int i)、parseInt(String s) 方法等等</li></ul><h4 id="自动装箱拆箱" tabindex="-1"><a class="header-anchor" href="#自动装箱拆箱"><span>自动装箱拆箱</span></a></h4><p>对于 Java 基本数据类型，均对应一个包装类。</p><ul><li>装箱：将基本数据类型转换为包装器类型，如 int-&gt;Integer</li><li>拆箱：将包装器类型转换为基本数据类型，如 Integer-&gt;int</li></ul><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><h3 id="简述-java-中-class-对象" tabindex="-1"><a class="header-anchor" href="#简述-java-中-class-对象"><span>简述 Java 中 Class 对象</span></a></h3><p>java 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。 获取 Class 对象的方法：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9;">Class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">forName</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">“类的全限定名”</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">实例对象</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getClass</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">类名</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建对象有哪些方式" tabindex="-1"><a class="header-anchor" href="#创建对象有哪些方式"><span>创建对象有哪些方式</span></a></h3><p>有五种创建对象的方式</p><ol><li>new 关键字</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>Class.newInstance</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newInstance</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>Constructor.newInstance</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Constructor</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Person</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> constructor</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getConstructor</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> constructor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newInstance</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>clone</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p2</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> p1</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clone</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>反序列化</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">byte</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9;"> bytes</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SerializationUtils</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">serialize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">p1</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p2</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">Person</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9;">SerializationUtils</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">deserialize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">bytes</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一个对象的内存布局是怎么样的" tabindex="-1"><a class="header-anchor" href="#一个对象的内存布局是怎么样的"><span>一个对象的内存布局是怎么样的?</span></a></h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1679034098498-ad6d11cc-5f47-4c13-ae20-3dd8f382e1c3.png#averageHue=%23a4f2c0&amp;clientId=ub4b1a7b2-78f5-4&amp;id=MAx2s&amp;name=image.png&amp;originHeight=653&amp;originWidth=1080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145534&amp;status=done&amp;style=none&amp;taskId=u1c918607-0cba-40bb-8699-73f99cf5d1d&amp;title=" alt="image.png"></p><ol><li>对象头: 对象头又分为 MarkWord 和 Class Pointer 两部分 <ol><li>MarkWord：包含一系列的标记位，比如轻量级锁的标记位，偏向锁标记位,gc 记录信息等等</li><li>ClassPointer：用来指向对象对应的 Class 对象（其对应的元数据对象）的内存地址。在 32 位系统占 4 字节，在 64 位系统中占 8 字节。</li></ol></li><li>Length：只在数组对象中存在，用来记录数组的长度，占用 4 字节</li><li>Instance data：对象实际数据，对象实际数据包括了对象的所有成员变量，其大小由各个成员变量的大小决定。(这里不包括静态成员变量，因为其是在方法区维护的)</li><li>Padding：Java 对象占用空间是 8 字节对齐的，即所有 Java 对象占用 bytes 数必须是 8 的倍数,是因为当我们从磁盘中取一个数据时，不会说我想取一个字节就是一个字节，都是按照一块儿一块儿来取的，这一块大小是 8 个字节，所以为了完整，padding 的作用就是补充字节，保证对象是 8 字节的整数倍。</li></ol><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用"><span>引用</span></a></h2><h3 id="四种引用类型" tabindex="-1"><a class="header-anchor" href="#四种引用类型"><span>四种引用类型?</span></a></h3><ul><li>强引用 StrongReference 垃圾回收器不会回收被引用的对象，哪怕内存不足时，JVM 也会直接抛出 OutOfMemoryError，除非赋值为 null</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Object</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Object</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> //只要obj还指向Object对象，Object对象就不会被回收</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>软引用 SoftReference 软引用是用来描述一些非必需但仍有用的对象。在内存足够的时候，软引用对象不会被回收，只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常</li><li>弱引用 WeakReference 弱引用的引用强度比软引用要更弱一些，无论内存是否足够，只要 JVM 开始进行垃圾回收，那些被弱引用关联的对象都会被回收</li><li>虚引用 PhantomReference 虚引用是最弱的一种引用关系，如果一个对象仅持有虚引用，那么它就和没有任何引用一样，它随时可能会被回收，在 JDK1.2 之后，用 PhantomReference 类来表示，通过查看这个类的源码，发现它只有一个构造函数和一个 get() 方法，而且它的 get() 方法仅仅是返回一个 null，也就是说将永远无法通过虚引用来获取对象，虚引用必须要和 ReferenceQueue 引用队列一起使用，NIO 的堆外内存就是靠其管理</li></ul><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用" tabindex="-1"><a class="header-anchor" href="#是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用"><span>是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？</span></a></h3><p>不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化</p><h3 id="抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰" tabindex="-1"><a class="header-anchor" href="#抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰"><span>抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized 修饰</span></a></h3><p><strong>都不能</strong></p><ul><li>抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的</li><li>本地方法是由本地代码实现的方法，而抽象方法是没有实现的，也是矛盾的</li><li>synchronized 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的</li></ul><h3 id="object-中有哪些公共方法" tabindex="-1"><a class="header-anchor" href="#object-中有哪些公共方法"><span>Object 中有哪些公共方法？</span></a></h3><ul><li>equals()</li><li>clone()</li><li>getClass()</li><li>notify(),notifyAll(),wait()</li><li>toString()</li></ul><h3 id="深拷贝、浅拷贝是什么" tabindex="-1"><a class="header-anchor" href="#深拷贝、浅拷贝是什么"><span>深拷贝、浅拷贝是什么？</span></a></h3><ul><li>浅拷贝并不是真的拷贝，只是复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。</li><li>深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</li></ul><h3 id="如何实现对象克隆" tabindex="-1"><a class="header-anchor" href="#如何实现对象克隆"><span>如何实现对象克隆？</span></a></h3><p>有两种方式：</p><ol><li>实现 Cloneable 接口并重写 Object 类中的 clone()方法；</li><li>实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。</li></ol><h3 id="jdk-8-为什么要-hashcode-异或其右移十六位的值" tabindex="-1"><a class="header-anchor" href="#jdk-8-为什么要-hashcode-异或其右移十六位的值"><span>JDK 8 为什么要 hashcode 异或其右移十六位的值</span></a></h3><p>因为在 JDK 7 中扰动了 4 次，计算 hash 值的性能会稍差一点点。从速度、功效、质量来考虑，JDK 8 优化了高位运算的算法，通过 hashCode()的高 16 位异或低 16 位实现：<code>(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>。这么做可以在数组 table 的 length 比较小的时候，也能保证考虑到高低 Bit 都参与到 Hash 的计算中，同时不会有太大的开销。</p><h3 id="两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对" tabindex="-1"><a class="header-anchor" href="#两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对"><span>两个对象值相同(x.equals(y) == true)，但却可有不同的 hash code，这句话对不对？</span></a></h3><p>不对，如果两个对象 x 和 y 满足 x.equals(y) == true，它们的哈希码（hash code）应当相同。 Java 对于 eqauls 方法和 hashCode 方法是这样规定的：</p><ol><li>如果两个对象相同（equals 方法返回 true），那么它们的 hashCode 值一定要相同；</li><li>如果两个对象的 hashCode 相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在 Set 集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。</li></ol><p>首先 equals 方法必须满足自反性（x.equals(x)必须返回 true）、对称性（x.equals(y)返回 true 时，y.equals(x)也必须返回 true）、传递性（x.equals(y)和 y.equals(z)都返回 true 时，x.equals(z)也必须返回 true）和一致性（当 x 和 y 引用的对象信息没有被修改时，多次调用 x.equals(y)应该得到同样的返回值），而且对于任何非 null 值的引用 x，x.equals(null)必须返回 false。</p><h3 id="实现高质量的-equals-方法的诀窍包括" tabindex="-1"><a class="header-anchor" href="#实现高质量的-equals-方法的诀窍包括"><span>实现高质量的 equals 方法的诀窍包括</span></a></h3><ol><li>使用==操作符检查”参数是否为这个对象的引用”；</li><li>使用 instanceof 操作符检查”参数是否为正确的类型”；</li><li>对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；</li><li>编写完 equals 方法后，问自己它是否满足对称性、传递性、一致性；</li><li>重写 equals 时总是要重写 hashCode；</li><li>不要将 equals 方法参数中的 Object 对象替换为其他的类型，在重写时不要忘掉 @Override 注解。</li></ol><h3 id="java-中-和-eqauls-的区别" tabindex="-1"><a class="header-anchor" href="#java-中-和-eqauls-的区别"><span>Java 中 == 和 eqauls()的区别</span></a></h3><ul><li>== 比较的是引用，equals 比较的是内容。</li><li>如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。</li><li>equals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。</li></ul><h3 id="equals-和-hashcode-的区别" tabindex="-1"><a class="header-anchor" href="#equals-和-hashcode-的区别"><span>equals()和 hashcode 的区别</span></a></h3><p>在 Java 中，equals()和 hashCode()方法都是用于处理对象相等性的方法，但它们的作用有所不同。</p><ul><li>equals()方法用于比较两个对象的内容是否相同，而不是比较它们的引用是否相等。默认情况下，equals()方法使用对象的引用相等性来比较对象，也就是说，它只有在两个对象引用指向同一个对象时才返回 true。如果需要比较两个对象的内容，就需要在类中重写 equals() 方法，并根据对象的内容来比较对象。</li><li>hashCode()方法用于获取对象的哈希码，这是一个整数值，用于将对象存储在哈希表等数据结构中。哈希码是根据对象的内容计算出来的，因此如果两个对象的内容相同，它们的哈希码也应该相同。如果一个类重写了 equals() 方法，那么它也应该重写 hashCode() 方法，以保证相等的对象具有相等的哈希码。</li></ul><p>需要注意的是，两个对象的 hashCode() 方法返回相等的哈希码，并不意味着这两个对象是相等的，因为哈希码在计算过程中可能会存在冲突。因此，在比较对象相等性时，必须同时比较对象的哈希码和内容。</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><h3 id="简述-java-异常的分类" tabindex="-1"><a class="header-anchor" href="#简述-java-异常的分类"><span>简述 Java 异常的分类</span></a></h3><p>Java 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。</p><ul><li>Error 常见的有 StackOverFlowError、OutOfMemoryError 等等</li><li>Exception 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译</li></ul><h3 id="常见的异常有哪些" tabindex="-1"><a class="header-anchor" href="#常见的异常有哪些"><span>常见的异常有哪些？</span></a></h3><ul><li>NullPointerException 空指针异常</li><li>ArrayIndexOutOfBoundsException 索引越界异常</li><li>InputFormatException 输入类型不匹配</li><li>SQLException SQL 异常</li><li>IllegalArgumentException 非法参数</li><li>NumberFormatException 类型转换异常</li></ul><h3 id="异常要怎么解决" tabindex="-1"><a class="header-anchor" href="#异常要怎么解决"><span>异常要怎么解决？</span></a></h3><p>Java 标准库内建了一些通用的异常，这些类以 Throwable 为顶层父类。Throwable 又派生出 Error 类和 Exception 类</p><ul><li>错误：Error 类以及他的子类的实例，代表了 JVM 本身的错误。错误不能被程序员通过代码处理，Error 很少出现。因此，程序员应该关注 Exception 为父类的分支下的各种异常类</li><li>异常：Exception 以及他的子类，代表程序运行时发送的各种不期望发生的事件。可以被 Java 异常处理机制使用，是异常处理的核心</li></ul><p>处理方法:</p><ul><li>try catch</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">try</span><span style="color:#ECEFF4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">	// 程序代码</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">catch</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">ExceptionName</span><span style="color:#D8DEE9;"> e1</span><span style="color:#ECEFF4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">	//Catch 块</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>throw throw 关键字作用是抛出一个异常，抛出的时候是抛出的是一个异常类的实例化对象，在异常处理中，try 语句要捕获的是一个异常对象，那么此异常对象也可以自己抛出</li><li>throws 定义一个方法的时候可以使用 throws 关键字声明。使用 throws 关键字声明的方法表示此方法不处理异常，而交给方法调用处进行处理</li></ul><h3 id="运行时异常与受检异常有何异同" tabindex="-1"><a class="header-anchor" href="#运行时异常与受检异常有何异同"><span>运行时异常与受检异常有何异同？</span></a></h3><p>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java 编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。 异常和继承一样，是面向对象程序设计中经常被滥用的东西，在 Effective Java 中对异常的使用给出了以下指导原则：</p><ul><li>不要将异常处理用于正常的控制流（设计良好的 API 不应该强迫它的调用者为了正常的控制流而使用异常）</li><li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常</li><li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）</li><li>优先使用标准的异常</li><li>每个方法抛出的异常都要有文档</li><li>保持异常的原子性</li><li>不要在 catch 中忽略掉捕获到的异常</li></ul><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="简述注解" tabindex="-1"><a class="header-anchor" href="#简述注解"><span>简述注解</span></a></h3><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p><h3 id="简述元注解" tabindex="-1"><a class="header-anchor" href="#简述元注解"><span>简述元注解</span></a></h3><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p><ul><li>@Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。</li><li>@Target：表示注解作用的范围。</li><li>@Documented：将注解中的元素包含到 Javadoc 中去。</li><li>@Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li><li>@Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义</li></ul><h2 id="关键字相关" tabindex="-1"><a class="header-anchor" href="#关键字相关"><span>关键字相关</span></a></h2><h3 id="final、finally-和-finalize-的区别是什么" tabindex="-1"><a class="header-anchor" href="#final、finally-和-finalize-的区别是什么"><span>final、finally 和 finalize 的区别是什么？</span></a></h3><ul><li>final：用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承</li><li>finally：作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下</li><li>finalize：是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存</li></ul><h3 id="java-中的-final-关键字有哪些用法" tabindex="-1"><a class="header-anchor" href="#java-中的-final-关键字有哪些用法"><span>Java 中的 final 关键字有哪些用法？</span></a></h3><ul><li>修饰类：表示该类不能被继承；</li><li>修饰方法：表示方法不能被重写；</li><li>修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</li></ul><h3 id="volatile-有什么作用" tabindex="-1"><a class="header-anchor" href="#volatile-有什么作用"><span>volatile 有什么作用？</span></a></h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1677824831929-34dc6429-1cee-4222-9a20-973d021e3afe.png#averageHue=%23f1ede2&amp;clientId=u74b777b2-7848-4&amp;id=qbGxm&amp;name=image.png&amp;originHeight=846&amp;originWidth=1032&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=320533&amp;status=done&amp;style=none&amp;taskId=u4ba11097-1490-46ae-a497-03a70bf13a6&amp;title=" alt="image.png"></p><ol><li>保证内存可见性 可见性是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果，另一个线程马上就能看到。</li><li>禁止指令重排序 cpu 是和缓存做交互的，但是由于 cpu 运行效率太高，所以会不等待当前命令返回结果从而继续执行下一个命令，就会有乱序执行的情况发生</li></ol><h3 id="简述-throw-与-throws-的区别" tabindex="-1"><a class="header-anchor" href="#简述-throw-与-throws-的区别"><span>简述 throw 与 throws 的区别</span></a></h3><ul><li>throw：一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常</li><li>throws：一般用于方法声明上，代表该方法可能会抛出的异常列表</li></ul><h3 id="出现在-java-程序中的-finally-代码块是否一定会执行" tabindex="-1"><a class="header-anchor" href="#出现在-java-程序中的-finally-代码块是否一定会执行"><span>出现在 Java 程序中的 finally 代码块是否一定会执行？</span></a></h3><ul><li>当遇到下面情况不会执行： <ul><li>当程序在进入 try 语句块之前就出现异常时会直接结束</li><li>当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码</li></ul></li><li>其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行</li><li>当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句</li></ul><h3 id="switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上" tabindex="-1"><a class="header-anchor" href="#switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上"><span>switch 是否能作用在 byte 上，是否能作用在 long、float 上，是否能作用在 String 上？</span></a></h3><p>在 Java 5 以前，switch(expr)中，expr 只能是 byte、short、char、int。从 Java 5 开始，Java 中引入了枚举类型，expr 也可以是 enum 类型，从 Java 7 开始，expr 还可以是字符串（String），但是长整型（long）,浮点数（float）在目前所有的版本中都是不可以的。</p><h3 id="float-f-3-4-是否正确" tabindex="-1"><a class="header-anchor" href="#float-f-3-4-是否正确"><span>float f=3.4 是否正确？</span></a></h3><p>不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换 float f =(float)3.4; 或者写成 float f =3.4F</p><h3 id="java-语言中关键字-static-的作用是什么" tabindex="-1"><a class="header-anchor" href="#java-语言中关键字-static-的作用是什么"><span>Java 语言中关键字 static 的作用是什么？</span></a></h3><p>static 的主要作用有两个：</p><ul><li>为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间</li><li>使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性</li></ul><p>具体而言 static 又可分为 4 种使用方式：</p><ul><li>修饰成员变量 用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用</li><li>修饰成员方法 static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法</li><li>修饰代码块 JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次</li><li>修饰内部类 static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗" tabindex="-1"><a class="header-anchor" href="#short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗"><span>short s1 = 1; s1 = s1 + 1; 与 short s1 = 1; s1 += 1;有错吗</span></a></h3><p>对于 short s1 = 1; s1 = s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别"><span>&amp;和&amp;&amp;的区别</span></a></h3><ul><li>&amp;运算符有两种用法：(1)按位与；(2)逻辑与</li><li>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;，例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为：username != null &amp;&amp;!username.equals(“”)，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</li></ul><h3 id="为什么要把-string-设计为不可变" tabindex="-1"><a class="header-anchor" href="#为什么要把-string-设计为不可变"><span>为什么要把 String 设计为不可变</span></a></h3><ul><li>节省空间 字符串常量存储在 JVM 的字符串池中可以被用户共享</li><li>提高效率 String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作</li><li>安全 String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改</li></ul><h3 id="简述-string-stringbuffer-与-stringbuilder" tabindex="-1"><a class="header-anchor" href="#简述-string-stringbuffer-与-stringbuilder"><span>简述 String/StringBuffer 与 StringBuilder</span></a></h3><ul><li>String 采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去</li><li>StringBuilder 采用无 final 修饰的字符数组进行保存，因此可变，线程不安全</li><li>StringBuffer 采用无 final 修饰的字符数组进行保存，线程安全</li></ul><h3 id="java-中一维数组和二维数组的声明方式" tabindex="-1"><a class="header-anchor" href="#java-中一维数组和二维数组的声明方式"><span>Java 中一维数组和二维数组的声明方式？</span></a></h3><p>一维数组的声明方式：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9FF;">type arrayName</span><span style="color:#ECEFF4;">[]</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9FF;"> arrayName</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>二维数组的声明方式：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9FF;">type arrayName</span><span style="color:#ECEFF4;">[][]</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[][]</span><span style="color:#D8DEE9FF;"> arrayName</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9FF;"> arrayName</span><span style="color:#ECEFF4;">[]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么-hash-值要与-length-1-相与" tabindex="-1"><a class="header-anchor" href="#为什么-hash-值要与-length-1-相与"><span>为什么 hash 值要与 length-1 相与？</span></a></h3><ul><li>把 hash 值对数组长度取模运算，模运算的消耗很大，没有位运算快。</li><li>当 length 总是 2 的 n 次方时，<code>h &amp; (length-1)</code>运算等价于对 length 取模，也就是 h%length，但是 &amp; 比 % 具有更高的效率。</li></ul><h3 id="静态变量和实例变量的区别" tabindex="-1"><a class="header-anchor" href="#静态变量和实例变量的区别"><span>静态变量和实例变量的区别</span></a></h3><p>静态变量是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。在 Java 开发中，上下文类和工具类中通常会有大量的静态成员</p><h1 id="java-基础知识完全指南" tabindex="-1"><a class="header-anchor" href="#java-基础知识完全指南"><span>Java 基础知识完全指南</span></a></h1><p>本文档涵盖了 Java 基础知识的核心概念，适用于面试准备和知识复习。</p><h2 id="_1-java-语言基础" tabindex="-1"><a class="header-anchor" href="#_1-java-语言基础"><span>1. Java 语言基础</span></a></h2><h3 id="_1-1-java-语言特性" tabindex="-1"><a class="header-anchor" href="#_1-1-java-语言特性"><span>1.1 Java 语言特性</span></a></h3><h4 id="_1-1-1-核心特点" tabindex="-1"><a class="header-anchor" href="#_1-1-1-核心特点"><span>1.1.1 核心特点</span></a></h4><p>Java 语言具有以下几个重要特性：</p><ul><li><strong>面向对象</strong>：Java 是纯面向对象的语言，能够直接反映现实生活中的对象</li><li><strong>平台无关性</strong>：通过 Java 虚拟机运行字节码，实现&quot;一次编写，到处运行&quot;</li><li><h3 id="_2-4-对象操作" tabindex="-1"><a class="header-anchor" href="#_2-4-对象操作"><span>2.4 对象操作</span></a></h3></li></ul><h4 id="_2-4-1-class-对象详解" tabindex="-1"><a class="header-anchor" href="#_2-4-1-class-对象详解"><span>2.4.1 Class 对象详解</span></a></h4><p><strong>什么是 Class 对象？</strong> Java 中的对象可以分为实例对象和 Class 对象。每个类都有唯一的 Class 对象，包含了该类的所有元信息。</p><p><strong>获取 Class 对象的三种方式：</strong></p><p>| 方式 | 语法 | 特点 | 使用场景 | | --------------- | ------------------------------------- | -------------------- | ------------------ | ------------------------------------------------------------- | | 类名.class | <code>Person.class</code> | 编译时确定，效率最高 | 已知类型时使用 | | 对象.getClass() | <code>person.getClass()</code> | 运行时获取，需要实例 | 已有对象实例时使用 | | Class.forName() | <code>Class.forName(&quot;com.example.Person&quot;)</code> | 动态加载，可能抛异常 | 动态加载类时使用 | 器将 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行 |</p><ul><li><strong>丰富的类库</strong>：提供了大量内置类库，简化开发工作</li><li><strong>安全健壮</strong>：提供异常处理和垃圾回收机制，确保程序的安全性和稳定性</li></ul><h4 id="_1-1-2-jdk-与-jre-关系" tabindex="-1"><a class="header-anchor" href="#_1-1-2-jdk-与-jre-关系"><span>1.1.2 JDK 与 JRE 关系</span></a></h4><p><strong>核心组件</strong>：</p><ul><li><strong>JDK（Java Development Kit）</strong>：Java 开发工具包，提供开发环境和运行环境</li><li><strong>JRE（Java Runtime Environment）</strong>：Java 运行环境，提供程序运行所需环境</li><li><strong>关系</strong>：JDK 包含 JRE，JRE 包含 JVM</li></ul><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>JDK = JRE + 开发工具（javac、jar等）</span></span></span>
<span class="line"><span class="line"><span>JRE = JVM + Java核心类库</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-2-基本数据类型"><span>1.2 基本数据类型</span></a></h3><h4 id="_1-2-1-八种基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-2-1-八种基本数据类型"><span>1.2.1 八种基本数据类型</span></a></h4><table><thead><tr><th>数据类型</th><th>字节数</th><th>取值范围</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-128 ~ 127</td><td>0</td></tr><tr><td>short</td><td>2</td><td>-2¹⁵ ~ 2¹⁵-1</td><td>0</td></tr><tr><td>int</td><td>4</td><td>-2³¹ ~ 2³¹-1</td><td>0</td></tr><tr><td>long</td><td>8</td><td>-2⁶³ ~ 2⁶³-1</td><td>0L</td></tr><tr><td>float</td><td>4</td><td>IEEE 754 标准</td><td>0.0f</td></tr><tr><td>double</td><td>8</td><td>IEEE 754 标准</td><td>0.0d</td></tr><tr><td>char</td><td>2</td><td>0 ~ 65535</td><td>&#39;\\u0000&#39;</td></tr><tr><td>boolean</td><td>1*</td><td>true/false</td><td>false</td></tr></tbody></table><blockquote><p>*注：boolean 占用大小根据 JVM 实现有所差异</p></blockquote><h3 id="_1-3-访问修饰符" tabindex="-1"><a class="header-anchor" href="#_1-3-访问修饰符"><span>1.3 访问修饰符</span></a></h3><h4 id="_1-3-1-四种访问级别" tabindex="-1"><a class="header-anchor" href="#_1-3-1-四种访问级别"><span>1.3.1 四种访问级别</span></a></h4><p><strong>访问修饰符说明</strong>：</p><ul><li><strong>public</strong>：对所有类可见</li><li><strong>protected</strong>：对同一包内的类和所有子类可见（不能修饰类）</li><li><strong>default</strong>：默认访问修饰符，仅在同一包内可见</li><li><strong>private</strong>：仅在同一类内可见（不能修饰类）</li></ul><h4 id="_1-3-2-访问权限对比表" tabindex="-1"><a class="header-anchor" href="#_1-3-2-访问权限对比表"><span>1.3.2 访问权限对比表</span></a></h4><table><thead><tr><th>修饰符</th><th>当前类</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>protected</td><td>✓</td><td>✓</td><td>✓</td><td>✗</td></tr><tr><td>default</td><td>✓</td><td>✓</td><td>✗</td><td>✗</td></tr><tr><td>private</td><td>✓</td><td>✗</td><td>✗</td><td>✗</td></tr></tbody></table><h3 id="_1-4-类的执行顺序" tabindex="-1"><a class="header-anchor" href="#_1-4-类的执行顺序"><span>1.4 类的执行顺序</span></a></h3><h4 id="_1-4-1-代码块执行顺序" tabindex="-1"><a class="header-anchor" href="#_1-4-1-代码块执行顺序"><span>1.4.1 代码块执行顺序</span></a></h4><p>类的初始化遵循以下顺序：</p><ol><li><strong>父类静态变量</strong></li><li><strong>父类静态代码块</strong></li><li><strong>子类静态变量</strong></li><li><strong>子类静态代码块</strong></li><li><strong>父类非静态变量</strong></li><li><strong>父类非静态代码块</strong></li><li><strong>父类构造函数</strong></li><li><strong>子类非静态变量</strong></li><li><strong>子类非静态代码块</strong></li><li><strong>子类构造函数</strong></li></ol><blockquote><p>💡 <strong>注意</strong>：静态代码块只执行一次</p></blockquote><h3 id="_1-5-类、对象、引用关系" tabindex="-1"><a class="header-anchor" href="#_1-5-类、对象、引用关系"><span>1.5 类、对象、引用关系</span></a></h3><h4 id="_1-5-1-核心概念" tabindex="-1"><a class="header-anchor" href="#_1-5-1-核心概念"><span>1.5.1 核心概念</span></a></h4><p>在 Java 中，<strong>类</strong>是定义对象属性和行为的模板，<strong>对象</strong>是类的实例，<strong>引用</strong>是指向对象在内存中地址的变量。</p><h4 id="_1-5-2-三者关系详解" tabindex="-1"><a class="header-anchor" href="#_1-5-2-三者关系详解"><span>1.5.2 三者关系详解</span></a></h4><ul><li><strong>类（Class）</strong>：通用模板，定义了一组属性和方法，用于创建对象</li><li><strong>对象（Object）</strong>：类的实例，包含类中定义的所有属性和方法的具体值</li><li><strong>引用（Reference）</strong>：指向对象的指针，存储对象在内存中的地址</li></ul><p><strong>关系图示</strong>：</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>类（模板） → 实例化 → 对象（实例） ← 指向 ← 引用（变量）</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-类与对象" tabindex="-1"><a class="header-anchor" href="#_2-类与对象"><span>2. 类与对象</span></a></h2><h3 id="_2-1-类的定义" tabindex="-1"><a class="header-anchor" href="#_2-1-类的定义"><span>2.1 类的定义</span></a></h3><h4 id="_2-1-1-类的概念" tabindex="-1"><a class="header-anchor" href="#_2-1-1-类的概念"><span>2.1.1 类的概念</span></a></h4><p>类是面向对象编程的基础，它是创建对象的模板，定义了对象应该具有的属性（成员变量）和行为（方法）。</p><h3 id="_2-2-内部类" tabindex="-1"><a class="header-anchor" href="#_2-2-内部类"><span>2.2 内部类</span></a></h3><h4 id="_2-2-1-内部类概述" tabindex="-1"><a class="header-anchor" href="#_2-2-1-内部类概述"><span>2.2.1 内部类概述</span></a></h4><p>内部类是定义在其他类内部的类，它可以访问外部类的所有成员（包括私有成员），是 Java 语言特有的机制。</p><h4 id="_2-2-2-内部类类型详解" tabindex="-1"><a class="header-anchor" href="#_2-2-2-内部类类型详解"><span>2.2.2 内部类类型详解</span></a></h4><table><thead><tr><th>内部类类型</th><th>定义位置</th><th>访问权限</th><th>特点</th></tr></thead><tbody><tr><td>成员内部类</td><td>类的成员位置</td><td>可访问外部类所有成员</td><td>不能定义静态成员，持有外部类引用</td></tr><tr><td>局部内部类</td><td>方法内部</td><td>只能访问外部类 final/effectively final 变量</td><td>只在方法内可见</td></tr><tr><td>匿名内部类</td><td>表达式中</td><td>只能访问外部类 final/effectively final 变量</td><td>一次性使用，没有类名</td></tr><tr><td>静态内部类</td><td>类的静态位置</td><td>只能访问外部类静态成员</td><td>不持有外部类引用，可独立存在</td></tr></tbody></table><p><strong>成员内部类示例：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> Outer</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#8FBCBB;"> String</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">外部类</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    class</span><span style="color:#8FBCBB;"> Inner</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> display</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">访问外部类成员：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>静态内部类示例：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> Outer</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    static</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> StaticInner</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> display</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">静态内部类</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-包装类-wrapper-classes" tabindex="-1"><a class="header-anchor" href="#_2-3-包装类-wrapper-classes"><span>2.3 包装类（Wrapper Classes）</span></a></h3><h4 id="_2-3-1-包装类概述" tabindex="-1"><a class="header-anchor" href="#_2-3-1-包装类概述"><span>2.3.1 包装类概述</span></a></h4><p>Java 提供了 8 个基本数据类型对应的包装类，实现了基本类型的面向对象封装。</p><table><thead><tr><th>基本类型</th><th>包装类</th><th>说明</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>字节类型包装</td></tr><tr><td>boolean</td><td>Boolean</td><td>布尔类型包装</td></tr><tr><td>short</td><td>Short</td><td>短整型包装</td></tr><tr><td>char</td><td>Character</td><td>字符类型包装</td></tr><tr><td>int</td><td>Integer</td><td>整型包装</td></tr><tr><td>long</td><td>Long</td><td>长整型包装</td></tr><tr><td>float</td><td>Float</td><td>单精度浮点包装</td></tr><tr><td>double</td><td>Double</td><td>双精度浮点包装</td></tr></tbody></table><h4 id="_2-3-2-包装类的必要性" tabindex="-1"><a class="header-anchor" href="#_2-3-2-包装类的必要性"><span>2.3.2 包装类的必要性</span></a></h4><p><strong>为什么需要包装类？</strong></p><ol><li><strong>泛型支持</strong>：泛型不支持基本数据类型</li><li><strong>集合框架</strong>：集合只能存储对象，不能存储基本类型</li><li><strong>面向对象思维</strong>：基本类型不是对象，不符合面向对象原则</li><li><strong>丰富的方法</strong>：包装类提供了很多实用方法，如类型转换、字符串解析等</li></ol><h4 id="_2-3-3-自动装箱与拆箱" tabindex="-1"><a class="header-anchor" href="#_2-3-3-自动装箱与拆箱"><span>2.3.3 自动装箱与拆箱</span></a></h4><p><strong>概念说明：</strong></p><ul><li><strong>装箱（Boxing）</strong>：将基本数据类型转换为对应的包装器类型</li><li><strong>拆箱（Unboxing）</strong>：将包装器类型转换为对应的基本数据类型</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">// 自动装箱</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Integer</span><span style="color:#D8DEE9;"> num</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 100</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">        // 相当于 Integer.valueOf(100)</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 自动拆箱</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> num</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">          // 相当于 num.intValue()</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-包装类缓存机制" tabindex="-1"><a class="header-anchor" href="#_2-3-4-包装类缓存机制"><span>2.3.4 包装类缓存机制</span></a></h4><p><strong>重要面试题：Integer 比较问题</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Integer</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1000</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1000</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">a </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">     // false</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Integer</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> d </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">c </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> d</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">     // true</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因分析：</strong></p><ul><li>Integer 缓存范围：-128 ~ 127</li><li>在缓存范围内，使用相同的对象引用</li><li>超出缓存范围，创建新的对象实例</li></ul><p><strong>各包装类缓存范围：</strong></p><ul><li>Integer：-128 ~ 127</li><li>Long：-128 ~ 127</li><li>Short：-128 ~ 127</li><li>Byte：-128 ~ 127（全部缓存）</li><li>Character：0 ~ 127</li><li>Boolean：true 和 false</li></ul><h2 id="对象-1" tabindex="-1"><a class="header-anchor" href="#对象-1"><span>对象</span></a></h2><h3 id="简述-java-中-class-对象-1" tabindex="-1"><a class="header-anchor" href="#简述-java-中-class-对象-1"><span>简述 Java 中 Class 对象</span></a></h3><p>java 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。 获取 Class 对象的方法：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9;">Class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">forName</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">“类的全限定名”</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">实例对象</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getClass</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">类名</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-对象创建方式" tabindex="-1"><a class="header-anchor" href="#_2-4-2-对象创建方式"><span>2.4.2 对象创建方式</span></a></h4><p>Java 中创建对象有以下几种方式：</p><p><strong>1. new 关键字（最常用）</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> person</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2. Class.newInstance()（已废弃）</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> person</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newInstance</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. Constructor.newInstance()（推荐）</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Constructor</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Person</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> constructor</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getConstructor</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> person</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> constructor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newInstance</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. clone()方法</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> person1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> person2</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">Person</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9;"> person1</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clone</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">  // 需要实现Cloneable接口</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 反序列化</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> person1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">byte</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9;"> bytes</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SerializationUtils</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">serialize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">person1</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> person2</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">Person</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9;"> SerializationUtils</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">deserialize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">bytes</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>各种创建方式对比：</strong></p><table><thead><tr><th>方式</th><th>性能</th><th>灵活性</th><th>使用场景</th></tr></thead><tbody><tr><td>new</td><td>最高</td><td>低</td><td>普通对象创建</td></tr><tr><td>Constructor.newInstance()</td><td>中</td><td>高</td><td>反射创建对象</td></tr><tr><td>clone()</td><td>高</td><td>中</td><td>对象复制</td></tr><tr><td>反序列化</td><td>低</td><td>高</td><td>网络传输、持久化</td></tr></tbody></table><h4 id="_2-4-3-对象内存布局" tabindex="-1"><a class="header-anchor" href="#_2-4-3-对象内存布局"><span>2.4.3 对象内存布局</span></a></h4><p>Java 对象在内存中的布局结构如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1679034098498-ad6d11cc-5f47-4c13-ae20-3dd8f382e1c3.png" alt="对象内存布局"></p><table><thead><tr><th>组成部分</th><th>说明</th><th>大小</th></tr></thead><tbody><tr><td><strong>对象头（Object Header）</strong></td><td>包含 Mark Word 和 Class Pointer</td><td>8-16 字节</td></tr><tr><td>Mark Word</td><td>存储哈希码、GC 年龄、锁状态等</td><td>4-8 字节</td></tr><tr><td>Class Pointer</td><td>指向类元数据的指针</td><td>4-8 字节</td></tr><tr><td><strong>数组长度（Length）</strong></td><td>仅数组对象存在，记录数组长度</td><td>4 字节</td></tr><tr><td><strong>实例数据（Instance Data）</strong></td><td>对象的成员变量数据</td><td>变长</td></tr><tr><td><strong>对齐填充（Padding）</strong></td><td>保证对象大小是 8 的倍数</td><td>0-7 字节</td></tr></tbody></table><p><strong>内存布局详解：</strong></p><ol><li><p><strong>对象头（Object Header）</strong></p><ul><li>Mark Word：包含对象的运行时数据，如哈希码、GC 分代年龄、锁状态标志等</li><li>Class Pointer：指向对象所属类的 Class 对象的内存地址</li></ul></li><li><p><strong>数组长度（Length）</strong></p><ul><li>只有数组对象才有这个字段</li><li>用于记录数组的长度，占用 4 字节</li></ul></li><li><p><strong>实例数据（Instance Data）</strong></p><ul><li>存储对象的所有成员变量（不包括静态变量）</li><li>按照变量声明顺序存储</li></ul></li><li><p><strong>对齐填充（Padding）</strong></p><ul><li>确保对象大小是 8 字节的整数倍</li><li>提高内存访问效率</li></ul></li></ol><h2 id="_3-引用类型" tabindex="-1"><a class="header-anchor" href="#_3-引用类型"><span>3. 引用类型</span></a></h2><h3 id="_3-1-java-引用类型概述" tabindex="-1"><a class="header-anchor" href="#_3-1-java-引用类型概述"><span>3.1 Java 引用类型概述</span></a></h3><p>Java 中提供了四种不同强度的引用类型，用于不同的使用场景。</p><h3 id="_3-2-四种引用类型详解" tabindex="-1"><a class="header-anchor" href="#_3-2-四种引用类型详解"><span>3.2 四种引用类型详解</span></a></h3><table><thead><tr><th>引用类型</th><th>强度</th><th>回收时机</th><th>使用场景</th></tr></thead><tbody><tr><td><strong>强引用</strong></td><td>最强</td><td>永不回收（除非显式设为 null）</td><td>日常编程中的对象引用</td></tr><tr><td><strong>软引用</strong></td><td>较强</td><td>内存不足时回收</td><td>缓存实现</td></tr><tr><td><strong>弱引用</strong></td><td>较弱</td><td>GC 时即回收</td><td>防止内存泄漏</td></tr><tr><td><strong>虚引用</strong></td><td>最弱</td><td>随时可能被回收</td><td>堆外内存管理、资源释放通知</td></tr></tbody></table><h4 id="_3-2-1-强引用-strongreference" tabindex="-1"><a class="header-anchor" href="#_3-2-1-强引用-strongreference"><span>3.2.1 强引用（StrongReference）</span></a></h4><p><strong>特点：</strong></p><ul><li>垃圾回收器永远不会回收被强引用指向的对象</li><li>即使内存不足导致 OOM，也不会回收强引用对象</li><li>只有当引用被显式设置为 null 时，对象才可能被回收</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Object</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Object</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 强引用</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 只要obj指向Object对象，该对象就不会被回收</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">obj </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> null;</span><span style="color:#616E88;"> // 断开引用，对象可能被回收</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-软引用-softreference" tabindex="-1"><a class="header-anchor" href="#_3-2-2-软引用-softreference"><span>3.2.2 软引用（SoftReference）</span></a></h4><p><strong>特点：</strong></p><ul><li>描述非必需但仍有用的对象</li><li>内存充足时不会被回收</li><li>内存不足时，系统会回收软引用对象</li><li>适合实现缓存机制</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">SoftReference</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> softRef</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> SoftReference</span><span style="color:#ECEFF4;">&lt;&gt;(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">缓存数据</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> softRef</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 可能返回null</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-弱引用-weakreference" tabindex="-1"><a class="header-anchor" href="#_3-2-3-弱引用-weakreference"><span>3.2.3 弱引用（WeakReference）</span></a></h4><p><strong>特点：</strong></p><ul><li>引用强度比软引用更弱</li><li>无论内存是否充足，GC 时都会被回收</li><li>常用于防止内存泄漏</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">WeakReference</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> weakRef</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> WeakReference</span><span style="color:#ECEFF4;">&lt;&gt;(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">弱引用对象</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> weakRef</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // GC后可能返回null</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-4-虚引用-phantomreference" tabindex="-1"><a class="header-anchor" href="#_3-2-4-虚引用-phantomreference"><span>3.2.4 虚引用（PhantomReference）</span></a></h4><p><strong>特点：</strong></p><ul><li>最弱的引用关系</li><li>无法通过虚引用获取对象实例（get()方法永远返回 null）</li><li>必须与 ReferenceQueue 配合使用</li><li>主要用于管理堆外内存</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">ReferenceQueue</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> queue</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> ReferenceQueue</span><span style="color:#ECEFF4;">&lt;&gt;()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">PhantomReference</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> phantomRef</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> PhantomReference</span><span style="color:#ECEFF4;">&lt;&gt;(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">虚引用</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> queue</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// phantomRef.get() 永远返回 null</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-方法与对象操作" tabindex="-1"><a class="header-anchor" href="#_4-方法与对象操作"><span>4. 方法与对象操作</span></a></h2><h3 id="_4-1-方法调用规则" tabindex="-1"><a class="header-anchor" href="#_4-1-方法调用规则"><span>4.1 方法调用规则</span></a></h3><h4 id="_4-1-1-静态方法调用限制" tabindex="-1"><a class="header-anchor" href="#_4-1-1-静态方法调用限制"><span>4.1.1 静态方法调用限制</span></a></h4><p><strong>问题：静态方法能否调用非静态方法？</strong></p><p><strong>答案：不可以</strong></p><p><strong>原因分析：</strong></p><ul><li>静态方法属于类，在类加载时就已存在</li><li>非静态方法属于实例，需要对象创建后才能调用</li><li>调用静态方法时，对象可能尚未初始化</li><li>静态方法只能访问静态成员（变量和方法）</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> Example</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> static</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> staticMethod</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 错误：不能直接调用非静态方法</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // nonStaticMethod();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 正确：需要创建对象实例</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        Example</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Example</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">nonStaticMethod</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> nonStaticMethod</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 非静态方法可以调用静态方法</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        staticMethod</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2-抽象方法修饰符限制" tabindex="-1"><a class="header-anchor" href="#_4-1-2-抽象方法修饰符限制"><span>4.1.2 抽象方法修饰符限制</span></a></h4><p><strong>问题：abstract 方法是否可以同时被 static、native、synchronized 修饰？</strong></p><p><strong>答案：都不可以</strong></p><table><thead><tr><th>修饰符</th><th>冲突原因</th></tr></thead><tbody><tr><td>static</td><td>抽象方法需要子类重写，静态方法无法被重写</td></tr><tr><td>native</td><td>本地方法有具体实现，抽象方法没有实现</td></tr><tr><td>synchronized</td><td>同步与方法实现细节相关，抽象方法无实现</td></tr></tbody></table><h3 id="_4-2-object-类核心方法" tabindex="-1"><a class="header-anchor" href="#_4-2-object-类核心方法"><span>4.2 Object 类核心方法</span></a></h3><h4 id="_4-2-1-object-类公共方法" tabindex="-1"><a class="header-anchor" href="#_4-2-1-object-类公共方法"><span>4.2.1 Object 类公共方法</span></a></h4><table><thead><tr><th>方法</th><th>说明</th><th>用途</th></tr></thead><tbody><tr><td><code>equals(Object obj)</code></td><td>对象相等性比较</td><td>判断两个对象是否相等</td></tr><tr><td><code>hashCode()</code></td><td>获取对象哈希码</td><td>哈希表存储、快速查找</td></tr><tr><td><code>toString()</code></td><td>对象字符串表示</td><td>调试、日志输出</td></tr><tr><td><code>clone()</code></td><td>对象克隆</td><td>创建对象副本</td></tr><tr><td><code>getClass()</code></td><td>获取运行时类信息</td><td>反射操作</td></tr><tr><td><code>notify()</code></td><td>唤醒等待线程</td><td>线程间通信</td></tr><tr><td><code>notifyAll()</code></td><td>唤醒所有等待线程</td><td>线程间通信</td></tr><tr><td><code>wait()</code></td><td>线程等待</td><td>线程间通信</td></tr><tr><td><code>finalize()</code></td><td>垃圾回收前调用</td><td>资源清理（已废弃）</td></tr></tbody></table><h3 id="深拷贝、浅拷贝是什么-1" tabindex="-1"><a class="header-anchor" href="#深拷贝、浅拷贝是什么-1"><span>深拷贝、浅拷贝是什么？</span></a></h3><ul><li>浅拷贝并不是真的拷贝，只是复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。</li><li>深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</li></ul><h3 id="如何实现对象克隆-1" tabindex="-1"><a class="header-anchor" href="#如何实现对象克隆-1"><span>如何实现对象克隆？</span></a></h3><p>有两种方式：</p><ol><li>实现 Cloneable 接口并重写 Object 类中的 clone()方法；</li><li>实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。</li></ol><h3 id="jdk-8-为什么要-hashcode-异或其右移十六位的值-1" tabindex="-1"><a class="header-anchor" href="#jdk-8-为什么要-hashcode-异或其右移十六位的值-1"><span>JDK 8 为什么要 hashcode 异或其右移十六位的值</span></a></h3><p>因为在 JDK 7 中扰动了 4 次，计算 hash 值的性能会稍差一点点。从速度、功效、质量来考虑，JDK 8 优化了高位运算的算法，通过 hashCode()的高 16 位异或低 16 位实现：<code>(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>。这么做可以在数组 table 的 length 比较小的时候，也能保证考虑到高低 Bit 都参与到 Hash 的计算中，同时不会有太大的开销。</p><h3 id="两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对-1" tabindex="-1"><a class="header-anchor" href="#两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对-1"><span>两个对象值相同(x.equals(y) == true)，但却可有不同的 hash code，这句话对不对？</span></a></h3><p>不对，如果两个对象 x 和 y 满足 x.equals(y) == true，它们的哈希码（hash code）应当相同。 Java 对于 eqauls 方法和 hashCode 方法是这样规定的：</p><ol><li>如果两个对象相同（equals 方法返回 true），那么它们的 hashCode 值一定要相同；</li><li>如果两个对象的 hashCode 相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在 Set 集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。</li></ol><p>首先 equals 方法必须满足自反性（x.equals(x)必须返回 true）、对称性（x.equals(y)返回 true 时，y.equals(x)也必须返回 true）、传递性（x.equals(y)和 y.equals(z)都返回 true 时，x.equals(z)也必须返回 true）和一致性（当 x 和 y 引用的对象信息没有被修改时，多次调用 x.equals(y)应该得到同样的返回值），而且对于任何非 null 值的引用 x，x.equals(null)必须返回 false。</p><h3 id="实现高质量的-equals-方法的诀窍包括-1" tabindex="-1"><a class="header-anchor" href="#实现高质量的-equals-方法的诀窍包括-1"><span>实现高质量的 equals 方法的诀窍包括</span></a></h3><ol><li>使用==操作符检查”参数是否为这个对象的引用”；</li><li>使用 instanceof 操作符检查”参数是否为正确的类型”；</li><li>对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；</li><li>编写完 equals 方法后，问自己它是否满足对称性、传递性、一致性；</li><li>重写 equals 时总是要重写 hashCode；</li><li>不要将 equals 方法参数中的 Object 对象替换为其他的类型，在重写时不要忘掉 @Override 注解。</li></ol><h3 id="java-中-和-eqauls-的区别-1" tabindex="-1"><a class="header-anchor" href="#java-中-和-eqauls-的区别-1"><span>Java 中 == 和 eqauls()的区别</span></a></h3><ul><li>== 比较的是引用，equals 比较的是内容。</li><li>如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。</li><li>equals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。</li></ul><h3 id="equals-和-hashcode-的区别-1" tabindex="-1"><a class="header-anchor" href="#equals-和-hashcode-的区别-1"><span>equals()和 hashcode 的区别</span></a></h3><p>在 Java 中，equals()和 hashCode()方法都是用于处理对象相等性的方法，但它们的作用有所不同。</p><ul><li>equals()方法用于比较两个对象的内容是否相同，而不是比较它们的引用是否相等。默认情况下，equals()方法使用对象的引用相等性来比较对象，也就是说，它只有在两个对象引用指向同一个对象时才返回 true。如果需要比较两个对象的内容，就需要在类中重写 equals() 方法，并根据对象的内容来比较对象。</li><li>hashCode()方法用于获取对象的哈希码，这是一个整数值，用于将对象存储在哈希表等数据结构中。哈希码是根据对象的内容计算出来的，因此如果两个对象的内容相同，它们的哈希码也应该相同。如果一个类重写了 equals() 方法，那么它也应该重写 hashCode() 方法，以保证相等的对象具有相等的哈希码。</li></ul><p>需要注意的是，两个对象的 hashCode() 方法返回相等的哈希码，并不意味着这两个对象是相等的，因为哈希码在计算过程中可能会存在冲突。因此，在比较对象相等性时，必须同时比较对象的哈希码和内容。</p><h2 id="异常-1" tabindex="-1"><a class="header-anchor" href="#异常-1"><span>异常</span></a></h2><h3 id="简述-java-异常的分类-1" tabindex="-1"><a class="header-anchor" href="#简述-java-异常的分类-1"><span>简述 Java 异常的分类</span></a></h3><p>Java 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。</p><ul><li>Error 常见的有 StackOverFlowError、OutOfMemoryError 等等</li><li>Exception 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译</li></ul><h3 id="常见的异常有哪些-1" tabindex="-1"><a class="header-anchor" href="#常见的异常有哪些-1"><span>常见的异常有哪些？</span></a></h3><ul><li>NullPointerException 空指针异常</li><li>ArrayIndexOutOfBoundsException 索引越界异常</li><li>InputFormatException 输入类型不匹配</li><li>SQLException SQL 异常</li><li>IllegalArgumentException 非法参数</li><li>NumberFormatException 类型转换异常</li></ul><h3 id="异常要怎么解决-1" tabindex="-1"><a class="header-anchor" href="#异常要怎么解决-1"><span>异常要怎么解决？</span></a></h3><p>Java 标准库内建了一些通用的异常，这些类以 Throwable 为顶层父类。Throwable 又派生出 Error 类和 Exception 类</p><ul><li>错误：Error 类以及他的子类的实例，代表了 JVM 本身的错误。错误不能被程序员通过代码处理，Error 很少出现。因此，程序员应该关注 Exception 为父类的分支下的各种异常类</li><li>异常：Exception 以及他的子类，代表程序运行时发送的各种不期望发生的事件。可以被 Java 异常处理机制使用，是异常处理的核心</li></ul><p>处理方法:</p><ul><li>try catch</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">try</span><span style="color:#ECEFF4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">	// 程序代码</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">catch</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">ExceptionName</span><span style="color:#D8DEE9;"> e1</span><span style="color:#ECEFF4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">	//Catch 块</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>throw throw 关键字作用是抛出一个异常，抛出的时候是抛出的是一个异常类的实例化对象，在异常处理中，try 语句要捕获的是一个异常对象，那么此异常对象也可以自己抛出</li><li>throws 定义一个方法的时候可以使用 throws 关键字声明。使用 throws 关键字声明的方法表示此方法不处理异常，而交给方法调用处进行处理</li></ul><h3 id="运行时异常与受检异常有何异同-1" tabindex="-1"><a class="header-anchor" href="#运行时异常与受检异常有何异同-1"><span>运行时异常与受检异常有何异同？</span></a></h3><p>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java 编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。 异常和继承一样，是面向对象程序设计中经常被滥用的东西，在 Effective Java 中对异常的使用给出了以下指导原则：</p><ul><li>不要将异常处理用于正常的控制流（设计良好的 API 不应该强迫它的调用者为了正常的控制流而使用异常）</li><li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常</li><li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）</li><li>优先使用标准的异常</li><li>每个方法抛出的异常都要有文档</li><li>保持异常的原子性</li><li>不要在 catch 中忽略掉捕获到的异常</li></ul><h2 id="注解-1" tabindex="-1"><a class="header-anchor" href="#注解-1"><span>注解</span></a></h2><h3 id="简述注解-1" tabindex="-1"><a class="header-anchor" href="#简述注解-1"><span>简述注解</span></a></h3><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p><h3 id="简述元注解-1" tabindex="-1"><a class="header-anchor" href="#简述元注解-1"><span>简述元注解</span></a></h3><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p><ul><li>@Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。</li><li>@Target：表示注解作用的范围。</li><li>@Documented：将注解中的元素包含到 Javadoc 中去。</li><li>@Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li><li>@Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义</li></ul><h2 id="关键字相关-1" tabindex="-1"><a class="header-anchor" href="#关键字相关-1"><span>关键字相关</span></a></h2><h3 id="final、finally-和-finalize-的区别是什么-1" tabindex="-1"><a class="header-anchor" href="#final、finally-和-finalize-的区别是什么-1"><span>final、finally 和 finalize 的区别是什么？</span></a></h3><ul><li>final：用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承</li><li>finally：作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下</li><li>finalize：是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存</li></ul><h3 id="java-中的-final-关键字有哪些用法-1" tabindex="-1"><a class="header-anchor" href="#java-中的-final-关键字有哪些用法-1"><span>Java 中的 final 关键字有哪些用法？</span></a></h3><ul><li>修饰类：表示该类不能被继承；</li><li>修饰方法：表示方法不能被重写；</li><li>修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</li></ul><h3 id="volatile-有什么作用-1" tabindex="-1"><a class="header-anchor" href="#volatile-有什么作用-1"><span>volatile 有什么作用？</span></a></h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1677824831929-34dc6429-1cee-4222-9a20-973d021e3afe.png#averageHue=%23f1ede2&amp;clientId=u74b777b2-7848-4&amp;id=qbGxm&amp;name=image.png&amp;originHeight=846&amp;originWidth=1032&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=320533&amp;status=done&amp;style=none&amp;taskId=u4ba11097-1490-46ae-a497-03a70bf13a6&amp;title=" alt="image.png"></p><ol><li>保证内存可见性 可见性是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果，另一个线程马上就能看到。</li><li>禁止指令重排序 cpu 是和缓存做交互的，但是由于 cpu 运行效率太高，所以会不等待当前命令返回结果从而继续执行下一个命令，就会有乱序执行的情况发生</li></ol><h3 id="简述-throw-与-throws-的区别-1" tabindex="-1"><a class="header-anchor" href="#简述-throw-与-throws-的区别-1"><span>简述 throw 与 throws 的区别</span></a></h3><ul><li>throw：一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常</li><li>throws：一般用于方法声明上，代表该方法可能会抛出的异常列表</li></ul><h3 id="出现在-java-程序中的-finally-代码块是否一定会执行-1" tabindex="-1"><a class="header-anchor" href="#出现在-java-程序中的-finally-代码块是否一定会执行-1"><span>出现在 Java 程序中的 finally 代码块是否一定会执行？</span></a></h3><ul><li>当遇到下面情况不会执行： <ul><li>当程序在进入 try 语句块之前就出现异常时会直接结束</li><li>当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码</li></ul></li><li>其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行</li><li>当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句</li></ul><h3 id="switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上-1" tabindex="-1"><a class="header-anchor" href="#switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上-1"><span>switch 是否能作用在 byte 上，是否能作用在 long、float 上，是否能作用在 String 上？</span></a></h3><p>在 Java 5 以前，switch(expr)中，expr 只能是 byte、short、char、int。从 Java 5 开始，Java 中引入了枚举类型，expr 也可以是 enum 类型，从 Java 7 开始，expr 还可以是字符串（String），但是长整型（long）,浮点数（float）在目前所有的版本中都是不可以的。</p><h3 id="float-f-3-4-是否正确-1" tabindex="-1"><a class="header-anchor" href="#float-f-3-4-是否正确-1"><span>float f=3.4 是否正确？</span></a></h3><p>不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换 float f =(float)3.4; 或者写成 float f =3.4F</p><h3 id="java-语言中关键字-static-的作用是什么-1" tabindex="-1"><a class="header-anchor" href="#java-语言中关键字-static-的作用是什么-1"><span>Java 语言中关键字 static 的作用是什么？</span></a></h3><p>static 的主要作用有两个：</p><ul><li>为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间</li><li>使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性</li></ul><p>具体而言 static 又可分为 4 种使用方式：</p><ul><li>修饰成员变量 用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用</li><li>修饰成员方法 static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法</li><li>修饰代码块 JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次</li><li>修饰内部类 static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法</li></ul><h2 id="其他-1" tabindex="-1"><a class="header-anchor" href="#其他-1"><span>其他</span></a></h2><h3 id="short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗-1" tabindex="-1"><a class="header-anchor" href="#short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗-1"><span>short s1 = 1; s1 = s1 + 1; 与 short s1 = 1; s1 += 1;有错吗</span></a></h3><p>对于 short s1 = 1; s1 = s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p><h3 id="和-的区别-1" tabindex="-1"><a class="header-anchor" href="#和-的区别-1"><span>&amp;和&amp;&amp;的区别</span></a></h3><ul><li>&amp;运算符有两种用法：(1)按位与；(2)逻辑与</li><li>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;，例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为：username != null &amp;&amp;!username.equals(“”)，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</li></ul><h3 id="为什么要把-string-设计为不可变-1" tabindex="-1"><a class="header-anchor" href="#为什么要把-string-设计为不可变-1"><span>为什么要把 String 设计为不可变</span></a></h3><ul><li>节省空间 字符串常量存储在 JVM 的字符串池中可以被用户共享</li><li>提高效率 String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作</li><li>安全 String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改</li></ul><h3 id="简述-string-stringbuffer-与-stringbuilder-1" tabindex="-1"><a class="header-anchor" href="#简述-string-stringbuffer-与-stringbuilder-1"><span>简述 String/StringBuffer 与 StringBuilder</span></a></h3><ul><li>String 采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去</li><li>StringBuilder 采用无 final 修饰的字符数组进行保存，因此可变，线程不安全</li><li>StringBuffer 采用无 final 修饰的字符数组进行保存，线程安全</li></ul><h3 id="java-中一维数组和二维数组的声明方式-1" tabindex="-1"><a class="header-anchor" href="#java-中一维数组和二维数组的声明方式-1"><span>Java 中一维数组和二维数组的声明方式？</span></a></h3><p>一维数组的声明方式：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9FF;">type arrayName</span><span style="color:#ECEFF4;">[]</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9FF;"> arrayName</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>二维数组的声明方式：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9FF;">type arrayName</span><span style="color:#ECEFF4;">[][]</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[][]</span><span style="color:#D8DEE9FF;"> arrayName</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9FF;"> arrayName</span><span style="color:#ECEFF4;">[]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么-hash-值要与-length-1-相与-1" tabindex="-1"><a class="header-anchor" href="#为什么-hash-值要与-length-1-相与-1"><span>为什么 hash 值要与 length-1 相与？</span></a></h3><ul><li>把 hash 值对数组长度取模运算，模运算的消耗很大，没有位运算快。</li><li>当 length 总是 2 的 n 次方时，<code>h &amp; (length-1)</code>运算等价于对 length 取模，也就是 h%length，但是 &amp; 比 % 具有更高的效率。</li></ul><h3 id="静态变量和实例变量的区别-1" tabindex="-1"><a class="header-anchor" href="#静态变量和实例变量的区别-1"><span>静态变量和实例变量的区别</span></a></h3><p>静态变量是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。在 Java 开发中，上下文类和工具类中通常会有大量的静态成员</p>`,354)]))}const p=s(t,[["render",i],["__file","Java基础.html.vue"]]),d=JSON.parse('{"path":"/md/interview/java/basic/Java%E5%9F%BA%E7%A1%80.html","title":"Java 基础知识完全指南","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"基础相关","slug":"基础相关","link":"#基础相关","children":[{"level":3,"title":"Java 语言具有哪些特点","slug":"java-语言具有哪些特点","link":"#java-语言具有哪些特点","children":[]},{"level":3,"title":"JDK 与 JRE","slug":"jdk-与-jre","link":"#jdk-与-jre","children":[]},{"level":3,"title":"Java 基本数据类型","slug":"java-基本数据类型","link":"#java-基本数据类型","children":[]},{"level":3,"title":"简述 Java 访问修饰符","slug":"简述-java-访问修饰符","link":"#简述-java-访问修饰符","children":[]},{"level":3,"title":"Java 代码块执行顺序","slug":"java-代码块执行顺序","link":"#java-代码块执行顺序","children":[]},{"level":3,"title":"Java 中类、对象、引用三者是什么关系","slug":"java-中类、对象、引用三者是什么关系","link":"#java-中类、对象、引用三者是什么关系","children":[]}]},{"level":2,"title":"类","slug":"类","link":"#类","children":[{"level":3,"title":"简述类","slug":"简述类","link":"#简述类","children":[]},{"level":3,"title":"内部类相关","slug":"内部类相关","link":"#内部类相关","children":[]},{"level":3,"title":"包装类","slug":"包装类","link":"#包装类","children":[]}]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[{"level":3,"title":"简述 Java 中 Class 对象","slug":"简述-java-中-class-对象","link":"#简述-java-中-class-对象","children":[]},{"level":3,"title":"创建对象有哪些方式","slug":"创建对象有哪些方式","link":"#创建对象有哪些方式","children":[]},{"level":3,"title":"一个对象的内存布局是怎么样的?","slug":"一个对象的内存布局是怎么样的","link":"#一个对象的内存布局是怎么样的","children":[]}]},{"level":2,"title":"引用","slug":"引用","link":"#引用","children":[{"level":3,"title":"四种引用类型?","slug":"四种引用类型","link":"#四种引用类型","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？","slug":"是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用","link":"#是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用","children":[]},{"level":3,"title":"抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized 修饰","slug":"抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰","link":"#抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰","children":[]},{"level":3,"title":"Object 中有哪些公共方法？","slug":"object-中有哪些公共方法","link":"#object-中有哪些公共方法","children":[]},{"level":3,"title":"深拷贝、浅拷贝是什么？","slug":"深拷贝、浅拷贝是什么","link":"#深拷贝、浅拷贝是什么","children":[]},{"level":3,"title":"如何实现对象克隆？","slug":"如何实现对象克隆","link":"#如何实现对象克隆","children":[]},{"level":3,"title":"JDK 8 为什么要 hashcode 异或其右移十六位的值","slug":"jdk-8-为什么要-hashcode-异或其右移十六位的值","link":"#jdk-8-为什么要-hashcode-异或其右移十六位的值","children":[]},{"level":3,"title":"两个对象值相同(x.equals(y) == true)，但却可有不同的 hash code，这句话对不对？","slug":"两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对","link":"#两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对","children":[]},{"level":3,"title":"实现高质量的 equals 方法的诀窍包括","slug":"实现高质量的-equals-方法的诀窍包括","link":"#实现高质量的-equals-方法的诀窍包括","children":[]},{"level":3,"title":"Java 中 == 和 eqauls()的区别","slug":"java-中-和-eqauls-的区别","link":"#java-中-和-eqauls-的区别","children":[]},{"level":3,"title":"equals()和 hashcode 的区别","slug":"equals-和-hashcode-的区别","link":"#equals-和-hashcode-的区别","children":[]}]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"简述 Java 异常的分类","slug":"简述-java-异常的分类","link":"#简述-java-异常的分类","children":[]},{"level":3,"title":"常见的异常有哪些？","slug":"常见的异常有哪些","link":"#常见的异常有哪些","children":[]},{"level":3,"title":"异常要怎么解决？","slug":"异常要怎么解决","link":"#异常要怎么解决","children":[]},{"level":3,"title":"运行时异常与受检异常有何异同？","slug":"运行时异常与受检异常有何异同","link":"#运行时异常与受检异常有何异同","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"简述注解","slug":"简述注解","link":"#简述注解","children":[]},{"level":3,"title":"简述元注解","slug":"简述元注解","link":"#简述元注解","children":[]}]},{"level":2,"title":"关键字相关","slug":"关键字相关","link":"#关键字相关","children":[{"level":3,"title":"final、finally 和 finalize 的区别是什么？","slug":"final、finally-和-finalize-的区别是什么","link":"#final、finally-和-finalize-的区别是什么","children":[]},{"level":3,"title":"Java 中的 final 关键字有哪些用法？","slug":"java-中的-final-关键字有哪些用法","link":"#java-中的-final-关键字有哪些用法","children":[]},{"level":3,"title":"volatile 有什么作用？","slug":"volatile-有什么作用","link":"#volatile-有什么作用","children":[]},{"level":3,"title":"简述 throw 与 throws 的区别","slug":"简述-throw-与-throws-的区别","link":"#简述-throw-与-throws-的区别","children":[]},{"level":3,"title":"出现在 Java 程序中的 finally 代码块是否一定会执行？","slug":"出现在-java-程序中的-finally-代码块是否一定会执行","link":"#出现在-java-程序中的-finally-代码块是否一定会执行","children":[]},{"level":3,"title":"switch 是否能作用在 byte 上，是否能作用在 long、float 上，是否能作用在 String 上？","slug":"switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上","link":"#switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上","children":[]},{"level":3,"title":"float f=3.4 是否正确？","slug":"float-f-3-4-是否正确","link":"#float-f-3-4-是否正确","children":[]},{"level":3,"title":"Java 语言中关键字 static 的作用是什么？","slug":"java-语言中关键字-static-的作用是什么","link":"#java-语言中关键字-static-的作用是什么","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"short s1 = 1; s1 = s1 + 1; 与 short s1 = 1; s1 += 1;有错吗","slug":"short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗","link":"#short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗","children":[]},{"level":3,"title":"&和&&的区别","slug":"和-的区别","link":"#和-的区别","children":[]},{"level":3,"title":"为什么要把 String 设计为不可变","slug":"为什么要把-string-设计为不可变","link":"#为什么要把-string-设计为不可变","children":[]},{"level":3,"title":"简述 String/StringBuffer 与 StringBuilder","slug":"简述-string-stringbuffer-与-stringbuilder","link":"#简述-string-stringbuffer-与-stringbuilder","children":[]},{"level":3,"title":"Java 中一维数组和二维数组的声明方式？","slug":"java-中一维数组和二维数组的声明方式","link":"#java-中一维数组和二维数组的声明方式","children":[]},{"level":3,"title":"为什么 hash 值要与 length-1 相与？","slug":"为什么-hash-值要与-length-1-相与","link":"#为什么-hash-值要与-length-1-相与","children":[]},{"level":3,"title":"静态变量和实例变量的区别","slug":"静态变量和实例变量的区别","link":"#静态变量和实例变量的区别","children":[]}]},{"level":2,"title":"1. Java 语言基础","slug":"_1-java-语言基础","link":"#_1-java-语言基础","children":[{"level":3,"title":"1.1 Java 语言特性","slug":"_1-1-java-语言特性","link":"#_1-1-java-语言特性","children":[]},{"level":3,"title":"1.2 基本数据类型","slug":"_1-2-基本数据类型","link":"#_1-2-基本数据类型","children":[]},{"level":3,"title":"1.3 访问修饰符","slug":"_1-3-访问修饰符","link":"#_1-3-访问修饰符","children":[]},{"level":3,"title":"1.4 类的执行顺序","slug":"_1-4-类的执行顺序","link":"#_1-4-类的执行顺序","children":[]},{"level":3,"title":"1.5 类、对象、引用关系","slug":"_1-5-类、对象、引用关系","link":"#_1-5-类、对象、引用关系","children":[]}]},{"level":2,"title":"2. 类与对象","slug":"_2-类与对象","link":"#_2-类与对象","children":[{"level":3,"title":"2.1 类的定义","slug":"_2-1-类的定义","link":"#_2-1-类的定义","children":[]},{"level":3,"title":"2.2 内部类","slug":"_2-2-内部类","link":"#_2-2-内部类","children":[]},{"level":3,"title":"2.3 包装类（Wrapper Classes）","slug":"_2-3-包装类-wrapper-classes","link":"#_2-3-包装类-wrapper-classes","children":[]}]},{"level":2,"title":"对象","slug":"对象-1","link":"#对象-1","children":[{"level":3,"title":"简述 Java 中 Class 对象","slug":"简述-java-中-class-对象-1","link":"#简述-java-中-class-对象-1","children":[]}]},{"level":2,"title":"3. 引用类型","slug":"_3-引用类型","link":"#_3-引用类型","children":[{"level":3,"title":"3.1 Java 引用类型概述","slug":"_3-1-java-引用类型概述","link":"#_3-1-java-引用类型概述","children":[]},{"level":3,"title":"3.2 四种引用类型详解","slug":"_3-2-四种引用类型详解","link":"#_3-2-四种引用类型详解","children":[]}]},{"level":2,"title":"4. 方法与对象操作","slug":"_4-方法与对象操作","link":"#_4-方法与对象操作","children":[{"level":3,"title":"4.1 方法调用规则","slug":"_4-1-方法调用规则","link":"#_4-1-方法调用规则","children":[]},{"level":3,"title":"4.2 Object 类核心方法","slug":"_4-2-object-类核心方法","link":"#_4-2-object-类核心方法","children":[]},{"level":3,"title":"深拷贝、浅拷贝是什么？","slug":"深拷贝、浅拷贝是什么-1","link":"#深拷贝、浅拷贝是什么-1","children":[]},{"level":3,"title":"如何实现对象克隆？","slug":"如何实现对象克隆-1","link":"#如何实现对象克隆-1","children":[]},{"level":3,"title":"JDK 8 为什么要 hashcode 异或其右移十六位的值","slug":"jdk-8-为什么要-hashcode-异或其右移十六位的值-1","link":"#jdk-8-为什么要-hashcode-异或其右移十六位的值-1","children":[]},{"level":3,"title":"两个对象值相同(x.equals(y) == true)，但却可有不同的 hash code，这句话对不对？","slug":"两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对-1","link":"#两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对-1","children":[]},{"level":3,"title":"实现高质量的 equals 方法的诀窍包括","slug":"实现高质量的-equals-方法的诀窍包括-1","link":"#实现高质量的-equals-方法的诀窍包括-1","children":[]},{"level":3,"title":"Java 中 == 和 eqauls()的区别","slug":"java-中-和-eqauls-的区别-1","link":"#java-中-和-eqauls-的区别-1","children":[]},{"level":3,"title":"equals()和 hashcode 的区别","slug":"equals-和-hashcode-的区别-1","link":"#equals-和-hashcode-的区别-1","children":[]}]},{"level":2,"title":"异常","slug":"异常-1","link":"#异常-1","children":[{"level":3,"title":"简述 Java 异常的分类","slug":"简述-java-异常的分类-1","link":"#简述-java-异常的分类-1","children":[]},{"level":3,"title":"常见的异常有哪些？","slug":"常见的异常有哪些-1","link":"#常见的异常有哪些-1","children":[]},{"level":3,"title":"异常要怎么解决？","slug":"异常要怎么解决-1","link":"#异常要怎么解决-1","children":[]},{"level":3,"title":"运行时异常与受检异常有何异同？","slug":"运行时异常与受检异常有何异同-1","link":"#运行时异常与受检异常有何异同-1","children":[]}]},{"level":2,"title":"注解","slug":"注解-1","link":"#注解-1","children":[{"level":3,"title":"简述注解","slug":"简述注解-1","link":"#简述注解-1","children":[]},{"level":3,"title":"简述元注解","slug":"简述元注解-1","link":"#简述元注解-1","children":[]}]},{"level":2,"title":"关键字相关","slug":"关键字相关-1","link":"#关键字相关-1","children":[{"level":3,"title":"final、finally 和 finalize 的区别是什么？","slug":"final、finally-和-finalize-的区别是什么-1","link":"#final、finally-和-finalize-的区别是什么-1","children":[]},{"level":3,"title":"Java 中的 final 关键字有哪些用法？","slug":"java-中的-final-关键字有哪些用法-1","link":"#java-中的-final-关键字有哪些用法-1","children":[]},{"level":3,"title":"volatile 有什么作用？","slug":"volatile-有什么作用-1","link":"#volatile-有什么作用-1","children":[]},{"level":3,"title":"简述 throw 与 throws 的区别","slug":"简述-throw-与-throws-的区别-1","link":"#简述-throw-与-throws-的区别-1","children":[]},{"level":3,"title":"出现在 Java 程序中的 finally 代码块是否一定会执行？","slug":"出现在-java-程序中的-finally-代码块是否一定会执行-1","link":"#出现在-java-程序中的-finally-代码块是否一定会执行-1","children":[]},{"level":3,"title":"switch 是否能作用在 byte 上，是否能作用在 long、float 上，是否能作用在 String 上？","slug":"switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上-1","link":"#switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上-1","children":[]},{"level":3,"title":"float f=3.4 是否正确？","slug":"float-f-3-4-是否正确-1","link":"#float-f-3-4-是否正确-1","children":[]},{"level":3,"title":"Java 语言中关键字 static 的作用是什么？","slug":"java-语言中关键字-static-的作用是什么-1","link":"#java-语言中关键字-static-的作用是什么-1","children":[]}]},{"level":2,"title":"其他","slug":"其他-1","link":"#其他-1","children":[{"level":3,"title":"short s1 = 1; s1 = s1 + 1; 与 short s1 = 1; s1 += 1;有错吗","slug":"short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗-1","link":"#short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗-1","children":[]},{"level":3,"title":"&和&&的区别","slug":"和-的区别-1","link":"#和-的区别-1","children":[]},{"level":3,"title":"为什么要把 String 设计为不可变","slug":"为什么要把-string-设计为不可变-1","link":"#为什么要把-string-设计为不可变-1","children":[]},{"level":3,"title":"简述 String/StringBuffer 与 StringBuilder","slug":"简述-string-stringbuffer-与-stringbuilder-1","link":"#简述-string-stringbuffer-与-stringbuilder-1","children":[]},{"level":3,"title":"Java 中一维数组和二维数组的声明方式？","slug":"java-中一维数组和二维数组的声明方式-1","link":"#java-中一维数组和二维数组的声明方式-1","children":[]},{"level":3,"title":"为什么 hash 值要与 length-1 相与？","slug":"为什么-hash-值要与-length-1-相与-1","link":"#为什么-hash-值要与-length-1-相与-1","children":[]},{"level":3,"title":"静态变量和实例变量的区别","slug":"静态变量和实例变量的区别-1","link":"#静态变量和实例变量的区别-1","children":[]}]}],"git":{"updatedTime":1711074643000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":11,"url":"https://github.com/hyfly233"},{"name":"栗山未来","username":"栗山未来","email":"33020548+hyfly233@users.noreply.github.com","commits":1,"url":"https://github.com/栗山未来"},{"name":"hyfly233","username":"hyfly233","email":"1274694743@qq.com","commits":9,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/interview/java/basic/Java基础.md"}');export{p as comp,d as data};
