import{_ as n,c as a,f as l,o as e}from"./app-chPKMbRn.js";const p={};function i(o,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="基础相关" tabindex="-1"><a class="header-anchor" href="#基础相关"><span>基础相关</span></a></h2><h3 id="java-语言具有哪些特点" tabindex="-1"><a class="header-anchor" href="#java-语言具有哪些特点"><span>Java 语言具有哪些特点</span></a></h3><ul><li>Java 为纯面向对象的语言。它能够直接反应现实生活中的对象。</li><li>具有平台无关性。Java 利用 Java 虚拟机运行字节码，编译后的程序可在其它平台运行。</li><li>Java 为解释型语言，编译器把 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行，具有很好的可移植性。</li><li>Java 提供了很多内置类库。</li><li>Java 具有较好的安全性和健壮性，Java 提供了异常处理和垃圾回收机制。</li></ul><h3 id="jdk-与-jre" tabindex="-1"><a class="header-anchor" href="#jdk-与-jre"><span>JDK 与 JRE</span></a></h3><ul><li>JDK：Java 开发工具包（Java Development Kit），提供了 Java 的开发环境和运行环境</li><li>JRE：Java 运行环境（Java Runtime Environment），提供了 Java 运行所需的环境</li><li>JDK 包含了 JRE</li></ul><h3 id="java-基本数据类型" tabindex="-1"><a class="header-anchor" href="#java-基本数据类型"><span>Java 基本数据类型</span></a></h3><ul><li>byte: 占用 1 个字节，取值范围-128 ~ 127</li><li>short: 占用 2 个字节，取值范围-215 ~ 215-1</li><li>int：占用 4 个字节，取值范围-231 ~ 231-1</li><li>long：占用 8 个字节</li><li>float：占用 4 个字节</li><li>double：占用 8 个字节</li><li>char: 占用 2 个字节</li><li>boolean：占用大小根据实现虚拟机不同有所差异</li></ul><h3 id="简述-java-访问修饰符" tabindex="-1"><a class="header-anchor" href="#简述-java-访问修饰符"><span>简述 Java 访问修饰符</span></a></h3><ul><li>public: 对所有类可见</li><li>protected : 对同一包内的类和所有子类可见，不能修饰类</li><li>default: 默认访问修饰符，在同一包内可见</li><li>private: 在同一类内可见，不能修饰类</li></ul><table><thead><tr><th>修饰符</th><th>当前类</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>y</td><td>y</td><td>y</td><td>y</td></tr><tr><td>protected</td><td>y</td><td>y</td><td>y</td><td>×</td></tr><tr><td>default</td><td>y</td><td>y</td><td>×</td><td>×</td></tr><tr><td>private</td><td>y</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="java-代码块执行顺序" tabindex="-1"><a class="header-anchor" href="#java-代码块执行顺序"><span>Java 代码块执行顺序</span></a></h3><ul><li>静态代码块只执行一次</li><li>先后顺序：父类静态变量 =&gt; 父类静态代码块 =&gt; 子类静态变量 =&gt; 子类静态代码块 =&gt; 父类非静态变量 =&gt; 父类非静态代码块 =&gt; 父类构造函数 =&gt; 子类非静态变量 =&gt; 子类非静态代码块 =&gt; 子类构造函数</li></ul><h3 id="java-中类、对象、引用三者是什么关系" tabindex="-1"><a class="header-anchor" href="#java-中类、对象、引用三者是什么关系"><span>Java 中类、对象、引用三者是什么关系</span></a></h3><p>在 Java 中，类是一种定义对象属性和行为的模板，对象是类的一个实例，而引用是指向对象在内存中的地址的变量</p><ul><li>类是一个通用的模板，它定义了一组属性和方法，可以用来创建对象</li><li>对象是由类创建的实例，它包含了类中定义的所有属性和方法的值和实现。可以通过使用 new 关键字来创建对象，然后可以使用该对象调用类中的方法和访问其属性</li><li>引用是一个指向对象的指针，它存储对象在内存中的地址。当使用 new 关键字创建对象时，返回的是对象在内存中的地址，可以将该地址存储在一个引用变量中。然后，可以使用该引用变量来访问对象的属性和方法</li></ul><p>因此，类是创建对象的模板，对象是类的实例，而引用是指向对象的指针。可以通过引用来访问对象的属性和方法</p><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><h3 id="简述类" tabindex="-1"><a class="header-anchor" href="#简述类"><span>简述类</span></a></h3><p>类是一个通用的模板，它定义了一组属性和方法，可以用来创建对象</p><h3 id="内部类相关" tabindex="-1"><a class="header-anchor" href="#内部类相关"><span>内部类相关</span></a></h3><h4 id="简述内部类及其作用" tabindex="-1"><a class="header-anchor" href="#简述内部类及其作用"><span>简述内部类及其作用</span></a></h4><ul><li>成员内部类 作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性</li><li>局部内部类 存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量</li><li>匿名内部类 只能使用一次，没有类名，只能访问外部类的 final 变量</li><li>静态内部类 类似类的静态成员变量</li></ul><h3 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类"><span>包装类</span></a></h3><h4 id="integer-a-1000-integer-b-1000-a-b-的结果是什么-那如果-a-b-都为-1-结果又是什么" tabindex="-1"><a class="header-anchor" href="#integer-a-1000-integer-b-1000-a-b-的结果是什么-那如果-a-b-都为-1-结果又是什么"><span>Integer a = 1000，Integer b = 1000，a==b 的结果是什么？那如果 a，b 都为 1，结果又是什么？</span></a></h4><ul><li>Integer a = 1000，Integer b = 1000，a==b 结果为 false</li><li>Integer a = 1，Integer b = 1，a==b 结果为 true</li><li>Integer 包装类缓存的范围，在-128~127 之间会缓存起来，比较的是直接缓存的数据，在此之外比较的是对象</li></ul><h4 id="什么是包装类" tabindex="-1"><a class="header-anchor" href="#什么是包装类"><span>什么是包装类</span></a></h4><p>Java 中有 8 个基本类型，分别对应的 8 个包装类</p><ul><li>byte -- Byte</li><li>boolean -- Boolean</li><li>short -- Short</li><li>char -- Character</li><li>int -- Integer</li><li>long -- Long</li><li>float -- Float</li><li>double -- Double</li></ul><h4 id="为什么需要包装类" tabindex="-1"><a class="header-anchor" href="#为什么需要包装类"><span>为什么需要包装类:</span></a></h4><ul><li>基本数据类型方便、简单、高效，但泛型不支持、集合元素不支持</li><li>不符合面向对象思维</li><li>包装类提供很多方法，方便使用，如 Integer 类 toString(int i)、parseInt(String s) 方法等等</li></ul><h4 id="自动装箱拆箱" tabindex="-1"><a class="header-anchor" href="#自动装箱拆箱"><span>自动装箱拆箱</span></a></h4><p>对于 Java 基本数据类型，均对应一个包装类。</p><ul><li>装箱：将基本数据类型转换为包装器类型，如 int-&gt;Integer</li><li>拆箱：将包装器类型转换为基本数据类型，如 Integer-&gt;int</li></ul><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><h3 id="简述-java-中-class-对象" tabindex="-1"><a class="header-anchor" href="#简述-java-中-class-对象"><span>简述 Java 中 Class 对象</span></a></h3><p>java 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。 获取 Class 对象的方法：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9;">Class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">forName</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">“类的全限定名”</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">实例对象</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getClass</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">类名</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建对象有哪些方式" tabindex="-1"><a class="header-anchor" href="#创建对象有哪些方式"><span>创建对象有哪些方式</span></a></h3><p>有五种创建对象的方式</p><ol><li>new 关键字</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>Class.newInstance</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newInstance</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>Constructor.newInstance</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Constructor</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Person</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> constructor</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getConstructor</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> constructor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newInstance</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>clone</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p2</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> p1</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clone</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>反序列化</li></ol><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">byte</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9;"> bytes</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SerializationUtils</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">serialize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">p1</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">Person</span><span style="color:#D8DEE9;"> p2</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">Person</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9;">SerializationUtils</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">deserialize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">bytes</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一个对象的内存布局是怎么样的" tabindex="-1"><a class="header-anchor" href="#一个对象的内存布局是怎么样的"><span>一个对象的内存布局是怎么样的?</span></a></h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1679034098498-ad6d11cc-5f47-4c13-ae20-3dd8f382e1c3.png#averageHue=%23a4f2c0&amp;clientId=ub4b1a7b2-78f5-4&amp;id=MAx2s&amp;name=image.png&amp;originHeight=653&amp;originWidth=1080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145534&amp;status=done&amp;style=none&amp;taskId=u1c918607-0cba-40bb-8699-73f99cf5d1d&amp;title=" alt="image.png"></p><ol><li>对象头: 对象头又分为 MarkWord 和 Class Pointer 两部分 <ol><li>MarkWord：包含一系列的标记位，比如轻量级锁的标记位，偏向锁标记位,gc 记录信息等等</li><li>ClassPointer：用来指向对象对应的 Class 对象（其对应的元数据对象）的内存地址。在 32 位系统占 4 字节，在 64 位系统中占 8 字节。</li></ol></li><li>Length：只在数组对象中存在，用来记录数组的长度，占用 4 字节</li><li>Instance data：对象实际数据，对象实际数据包括了对象的所有成员变量，其大小由各个成员变量的大小决定。(这里不包括静态成员变量，因为其是在方法区维护的)</li><li>Padding：Java 对象占用空间是 8 字节对齐的，即所有 Java 对象占用 bytes 数必须是 8 的倍数,是因为当我们从磁盘中取一个数据时，不会说我想取一个字节就是一个字节，都是按照一块儿一块儿来取的，这一块大小是 8 个字节，所以为了完整，padding 的作用就是补充字节，保证对象是 8 字节的整数倍。</li></ol><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用"><span>引用</span></a></h2><h3 id="四种引用类型" tabindex="-1"><a class="header-anchor" href="#四种引用类型"><span>四种引用类型?</span></a></h3><ul><li>强引用 StrongReference 垃圾回收器不会回收被引用的对象，哪怕内存不足时，JVM 也会直接抛出 OutOfMemoryError，除非赋值为 null</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">Object</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Object</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> //只要obj还指向Object对象，Object对象就不会被回收</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>软引用 SoftReference 软引用是用来描述一些非必需但仍有用的对象。在内存足够的时候，软引用对象不会被回收，只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常</li><li>弱引用 WeakReference 弱引用的引用强度比软引用要更弱一些，无论内存是否足够，只要 JVM 开始进行垃圾回收，那些被弱引用关联的对象都会被回收</li><li>虚引用 PhantomReference 虚引用是最弱的一种引用关系，如果一个对象仅持有虚引用，那么它就和没有任何引用一样，它随时可能会被回收，在 JDK1.2 之后，用 PhantomReference 类来表示，通过查看这个类的源码，发现它只有一个构造函数和一个 get() 方法，而且它的 get() 方法仅仅是返回一个 null，也就是说将永远无法通过虚引用来获取对象，虚引用必须要和 ReferenceQueue 引用队列一起使用，NIO 的堆外内存就是靠其管理</li></ul><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用" tabindex="-1"><a class="header-anchor" href="#是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用"><span>是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？</span></a></h3><p>不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化</p><h3 id="抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰" tabindex="-1"><a class="header-anchor" href="#抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰"><span>抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized 修饰</span></a></h3><p><strong>都不能</strong></p><ul><li>抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的</li><li>本地方法是由本地代码实现的方法，而抽象方法是没有实现的，也是矛盾的</li><li>synchronized 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的</li></ul><h3 id="object-中有哪些公共方法" tabindex="-1"><a class="header-anchor" href="#object-中有哪些公共方法"><span>Object 中有哪些公共方法？</span></a></h3><ul><li>equals()</li><li>clone()</li><li>getClass()</li><li>notify(),notifyAll(),wait()</li><li>toString()</li></ul><h3 id="深拷贝、浅拷贝是什么" tabindex="-1"><a class="header-anchor" href="#深拷贝、浅拷贝是什么"><span>深拷贝、浅拷贝是什么？</span></a></h3><ul><li>浅拷贝并不是真的拷贝，只是复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。</li><li>深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</li></ul><h3 id="如何实现对象克隆" tabindex="-1"><a class="header-anchor" href="#如何实现对象克隆"><span>如何实现对象克隆？</span></a></h3><p>有两种方式：</p><ol><li>实现 Cloneable 接口并重写 Object 类中的 clone()方法；</li><li>实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。</li></ol><h3 id="jdk-8-为什么要-hashcode-异或其右移十六位的值" tabindex="-1"><a class="header-anchor" href="#jdk-8-为什么要-hashcode-异或其右移十六位的值"><span>JDK 8 为什么要 hashcode 异或其右移十六位的值</span></a></h3><p>因为在 JDK 7 中扰动了 4 次，计算 hash 值的性能会稍差一点点。从速度、功效、质量来考虑，JDK 8 优化了高位运算的算法，通过 hashCode()的高 16 位异或低 16 位实现：<code>(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>。这么做可以在数组 table 的 length 比较小的时候，也能保证考虑到高低 Bit 都参与到 Hash 的计算中，同时不会有太大的开销。</p><h3 id="两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对" tabindex="-1"><a class="header-anchor" href="#两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对"><span>两个对象值相同(x.equals(y) == true)，但却可有不同的 hash code，这句话对不对？</span></a></h3><p>不对，如果两个对象 x 和 y 满足 x.equals(y) == true，它们的哈希码（hash code）应当相同。 Java 对于 eqauls 方法和 hashCode 方法是这样规定的：</p><ol><li>如果两个对象相同（equals 方法返回 true），那么它们的 hashCode 值一定要相同；</li><li>如果两个对象的 hashCode 相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在 Set 集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。</li></ol><p>首先 equals 方法必须满足自反性（x.equals(x)必须返回 true）、对称性（x.equals(y)返回 true 时，y.equals(x)也必须返回 true）、传递性（x.equals(y)和 y.equals(z)都返回 true 时，x.equals(z)也必须返回 true）和一致性（当 x 和 y 引用的对象信息没有被修改时，多次调用 x.equals(y)应该得到同样的返回值），而且对于任何非 null 值的引用 x，x.equals(null)必须返回 false。</p><h3 id="实现高质量的-equals-方法的诀窍包括" tabindex="-1"><a class="header-anchor" href="#实现高质量的-equals-方法的诀窍包括"><span>实现高质量的 equals 方法的诀窍包括</span></a></h3><ol><li>使用==操作符检查”参数是否为这个对象的引用”；</li><li>使用 instanceof 操作符检查”参数是否为正确的类型”；</li><li>对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；</li><li>编写完 equals 方法后，问自己它是否满足对称性、传递性、一致性；</li><li>重写 equals 时总是要重写 hashCode；</li><li>不要将 equals 方法参数中的 Object 对象替换为其他的类型，在重写时不要忘掉 @Override 注解。</li></ol><h3 id="java-中-和-eqauls-的区别" tabindex="-1"><a class="header-anchor" href="#java-中-和-eqauls-的区别"><span>Java 中 == 和 eqauls()的区别</span></a></h3><ul><li>== 比较的是引用，equals 比较的是内容。</li><li>如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。</li><li>equals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。</li></ul><h3 id="equals-和-hashcode-的区别" tabindex="-1"><a class="header-anchor" href="#equals-和-hashcode-的区别"><span>equals()和 hashcode 的区别</span></a></h3><p>在 Java 中，equals()和 hashCode()方法都是用于处理对象相等性的方法，但它们的作用有所不同。</p><ul><li>equals()方法用于比较两个对象的内容是否相同，而不是比较它们的引用是否相等。默认情况下，equals()方法使用对象的引用相等性来比较对象，也就是说，它只有在两个对象引用指向同一个对象时才返回 true。如果需要比较两个对象的内容，就需要在类中重写 equals() 方法，并根据对象的内容来比较对象。</li><li>hashCode()方法用于获取对象的哈希码，这是一个整数值，用于将对象存储在哈希表等数据结构中。哈希码是根据对象的内容计算出来的，因此如果两个对象的内容相同，它们的哈希码也应该相同。如果一个类重写了 equals() 方法，那么它也应该重写 hashCode() 方法，以保证相等的对象具有相等的哈希码。</li></ul><p>需要注意的是，两个对象的 hashCode() 方法返回相等的哈希码，并不意味着这两个对象是相等的，因为哈希码在计算过程中可能会存在冲突。因此，在比较对象相等性时，必须同时比较对象的哈希码和内容。</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><h3 id="简述-java-异常的分类" tabindex="-1"><a class="header-anchor" href="#简述-java-异常的分类"><span>简述 Java 异常的分类</span></a></h3><p>Java 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。</p><ul><li>Error 常见的有 StackOverFlowError、OutOfMemoryError 等等</li><li>Exception 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译</li></ul><h3 id="常见的异常有哪些" tabindex="-1"><a class="header-anchor" href="#常见的异常有哪些"><span>常见的异常有哪些？</span></a></h3><ul><li>NullPointerException 空指针异常</li><li>ArrayIndexOutOfBoundsException 索引越界异常</li><li>InputFormatException 输入类型不匹配</li><li>SQLException SQL 异常</li><li>IllegalArgumentException 非法参数</li><li>NumberFormatException 类型转换异常</li></ul><h3 id="异常要怎么解决" tabindex="-1"><a class="header-anchor" href="#异常要怎么解决"><span>异常要怎么解决？</span></a></h3><p>Java 标准库内建了一些通用的异常，这些类以 Throwable 为顶层父类。Throwable 又派生出 Error 类和 Exception 类</p><ul><li>错误：Error 类以及他的子类的实例，代表了 JVM 本身的错误。错误不能被程序员通过代码处理，Error 很少出现。因此，程序员应该关注 Exception 为父类的分支下的各种异常类</li><li>异常：Exception 以及他的子类，代表程序运行时发送的各种不期望发生的事件。可以被 Java 异常处理机制使用，是异常处理的核心</li></ul><p>处理方法:</p><ul><li>try catch</li></ul><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">try</span><span style="color:#ECEFF4;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">	// 程序代码</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">catch</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">ExceptionName</span><span style="color:#D8DEE9;"> e1</span><span style="color:#ECEFF4;">){</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">	//Catch 块</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>throw throw 关键字作用是抛出一个异常，抛出的时候是抛出的是一个异常类的实例化对象，在异常处理中，try 语句要捕获的是一个异常对象，那么此异常对象也可以自己抛出</li><li>throws 定义一个方法的时候可以使用 throws 关键字声明。使用 throws 关键字声明的方法表示此方法不处理异常，而交给方法调用处进行处理</li></ul><h3 id="运行时异常与受检异常有何异同" tabindex="-1"><a class="header-anchor" href="#运行时异常与受检异常有何异同"><span>运行时异常与受检异常有何异同？</span></a></h3><p>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java 编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。 异常和继承一样，是面向对象程序设计中经常被滥用的东西，在 Effective Java 中对异常的使用给出了以下指导原则：</p><ul><li>不要将异常处理用于正常的控制流（设计良好的 API 不应该强迫它的调用者为了正常的控制流而使用异常）</li><li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常</li><li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）</li><li>优先使用标准的异常</li><li>每个方法抛出的异常都要有文档</li><li>保持异常的原子性</li><li>不要在 catch 中忽略掉捕获到的异常</li></ul><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="简述注解" tabindex="-1"><a class="header-anchor" href="#简述注解"><span>简述注解</span></a></h3><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p><h3 id="简述元注解" tabindex="-1"><a class="header-anchor" href="#简述元注解"><span>简述元注解</span></a></h3><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p><ul><li>@Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。</li><li>@Target：表示注解作用的范围。</li><li>@Documented：将注解中的元素包含到 Javadoc 中去。</li><li>@Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li><li>@Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义</li></ul><h2 id="关键字相关" tabindex="-1"><a class="header-anchor" href="#关键字相关"><span>关键字相关</span></a></h2><h3 id="final、finally-和-finalize-的区别是什么" tabindex="-1"><a class="header-anchor" href="#final、finally-和-finalize-的区别是什么"><span>final、finally 和 finalize 的区别是什么？</span></a></h3><ul><li>final：用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承</li><li>finally：作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下</li><li>finalize：是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存</li></ul><h3 id="java-中的-final-关键字有哪些用法" tabindex="-1"><a class="header-anchor" href="#java-中的-final-关键字有哪些用法"><span>Java 中的 final 关键字有哪些用法？</span></a></h3><ul><li>修饰类：表示该类不能被继承；</li><li>修饰方法：表示方法不能被重写；</li><li>修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</li></ul><h3 id="volatile-有什么作用" tabindex="-1"><a class="header-anchor" href="#volatile-有什么作用"><span>volatile 有什么作用？</span></a></h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1677824831929-34dc6429-1cee-4222-9a20-973d021e3afe.png#averageHue=%23f1ede2&amp;clientId=u74b777b2-7848-4&amp;id=qbGxm&amp;name=image.png&amp;originHeight=846&amp;originWidth=1032&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=320533&amp;status=done&amp;style=none&amp;taskId=u4ba11097-1490-46ae-a497-03a70bf13a6&amp;title=" alt="image.png"></p><ol><li>保证内存可见性 可见性是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果，另一个线程马上就能看到。</li><li>禁止指令重排序 cpu 是和缓存做交互的，但是由于 cpu 运行效率太高，所以会不等待当前命令返回结果从而继续执行下一个命令，就会有乱序执行的情况发生</li></ol><h3 id="简述-throw-与-throws-的区别" tabindex="-1"><a class="header-anchor" href="#简述-throw-与-throws-的区别"><span>简述 throw 与 throws 的区别</span></a></h3><ul><li>throw：一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常</li><li>throws：一般用于方法声明上，代表该方法可能会抛出的异常列表</li></ul><h3 id="出现在-java-程序中的-finally-代码块是否一定会执行" tabindex="-1"><a class="header-anchor" href="#出现在-java-程序中的-finally-代码块是否一定会执行"><span>出现在 Java 程序中的 finally 代码块是否一定会执行？</span></a></h3><ul><li>当遇到下面情况不会执行： <ul><li>当程序在进入 try 语句块之前就出现异常时会直接结束</li><li>当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码</li></ul></li><li>其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行</li><li>当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句</li></ul><h3 id="switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上" tabindex="-1"><a class="header-anchor" href="#switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上"><span>switch 是否能作用在 byte 上，是否能作用在 long、float 上，是否能作用在 String 上？</span></a></h3><p>在 Java 5 以前，switch(expr)中，expr 只能是 byte、short、char、int。从 Java 5 开始，Java 中引入了枚举类型，expr 也可以是 enum 类型，从 Java 7 开始，expr 还可以是字符串（String），但是长整型（long）,浮点数（float）在目前所有的版本中都是不可以的。</p><h3 id="float-f-3-4-是否正确" tabindex="-1"><a class="header-anchor" href="#float-f-3-4-是否正确"><span>float f=3.4 是否正确？</span></a></h3><p>不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换 float f =(float)3.4; 或者写成 float f =3.4F</p><h3 id="java-语言中关键字-static-的作用是什么" tabindex="-1"><a class="header-anchor" href="#java-语言中关键字-static-的作用是什么"><span>Java 语言中关键字 static 的作用是什么？</span></a></h3><p>static 的主要作用有两个：</p><ul><li>为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间</li><li>使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性</li></ul><p>具体而言 static 又可分为 4 种使用方式：</p><ul><li>修饰成员变量 用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用</li><li>修饰成员方法 static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法</li><li>修饰代码块 JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次</li><li>修饰内部类 static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗" tabindex="-1"><a class="header-anchor" href="#short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗"><span>short s1 = 1; s1 = s1 + 1; 与 short s1 = 1; s1 += 1;有错吗</span></a></h3><p>对于 short s1 = 1; s1 = s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别"><span>&amp;和&amp;&amp;的区别</span></a></h3><ul><li>&amp;运算符有两种用法：(1)按位与；(2)逻辑与</li><li>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;，例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为：username != null &amp;&amp;!username.equals(“”)，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</li></ul><h3 id="为什么要把-string-设计为不可变" tabindex="-1"><a class="header-anchor" href="#为什么要把-string-设计为不可变"><span>为什么要把 String 设计为不可变</span></a></h3><ul><li>节省空间 字符串常量存储在 JVM 的字符串池中可以被用户共享</li><li>提高效率 String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作</li><li>安全 String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改</li></ul><h3 id="简述-string-stringbuffer-与-stringbuilder" tabindex="-1"><a class="header-anchor" href="#简述-string-stringbuffer-与-stringbuilder"><span>简述 String/StringBuffer 与 StringBuilder</span></a></h3><ul><li>String 采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去</li><li>StringBuilder 采用无 final 修饰的字符数组进行保存，因此可变，线程不安全</li><li>StringBuffer 采用无 final 修饰的字符数组进行保存，线程安全</li></ul><h3 id="java-中一维数组和二维数组的声明方式" tabindex="-1"><a class="header-anchor" href="#java-中一维数组和二维数组的声明方式"><span>Java 中一维数组和二维数组的声明方式？</span></a></h3><p>一维数组的声明方式：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9FF;">type arrayName</span><span style="color:#ECEFF4;">[]</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9FF;"> arrayName</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>二维数组的声明方式：</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#D8DEE9FF;">type arrayName</span><span style="color:#ECEFF4;">[][]</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[][]</span><span style="color:#D8DEE9FF;"> arrayName</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">type</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9FF;"> arrayName</span><span style="color:#ECEFF4;">[]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么-hash-值要与-length-1-相与" tabindex="-1"><a class="header-anchor" href="#为什么-hash-值要与-length-1-相与"><span>为什么 hash 值要与 length-1 相与？</span></a></h3><ul><li>把 hash 值对数组长度取模运算，模运算的消耗很大，没有位运算快。</li><li>当 length 总是 2 的 n 次方时，<code>h &amp; (length-1)</code>运算等价于对 length 取模，也就是 h%length，但是 &amp; 比 % 具有更高的效率。</li></ul><h3 id="静态变量和实例变量的区别" tabindex="-1"><a class="header-anchor" href="#静态变量和实例变量的区别"><span>静态变量和实例变量的区别</span></a></h3><p>静态变量是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。在 Java 开发中，上下文类和工具类中通常会有大量的静态成员</p><h1 id="java-性能调优与问题排查指南" tabindex="-1"><a class="header-anchor" href="#java-性能调优与问题排查指南"><span>Java 性能调优与问题排查指南</span></a></h1><blockquote><p>本文档全面介绍 Java 应用性能调优的各个方面，包括异常处理、JVM 调优、缓存优化、分布式部署等核心内容。</p></blockquote><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#1-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">1. 异常处理</a></li><li><a href="#2-jvm%E8%B0%83%E4%BC%98">2. JVM 调优</a></li><li><a href="#3-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">3. 性能优化</a></li><li><a href="#4-%E5%88%86%E5%B8%83%E5%BC%8F%E6%89%A9%E5%B1%95">4. 分布式扩展</a></li><li><a href="#5-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5">5. 问题排查</a></li></ul><hr><h2 id="_1-异常处理" tabindex="-1"><a class="header-anchor" href="#_1-异常处理"><span>1. 异常处理</span></a></h2><h3 id="_1-1-java-异常体系结构" tabindex="-1"><a class="header-anchor" href="#_1-1-java-异常体系结构"><span>1.1 Java 异常体系结构</span></a></h3><p>Java 异常体系以<code>Throwable</code>为根类，分为两大分支：</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>Throwable</span></span></span>
<span class="line"><span class="line"><span>├── Error（系统错误，程序无法处理）</span></span></span>
<span class="line"><span class="line"><span>│   ├── StackOverflowError</span></span></span>
<span class="line"><span class="line"><span>│   ├── OutOfMemoryError</span></span></span>
<span class="line"><span class="line"><span>│   └── VirtualMachineError</span></span></span>
<span class="line"><span class="line"><span>└── Exception（可处理的异常）</span></span></span>
<span class="line"><span class="line"><span>    ├── RuntimeException（运行时异常）</span></span></span>
<span class="line"><span class="line"><span>    │   ├── NullPointerException</span></span></span>
<span class="line"><span class="line"><span>    │   ├── IndexOutOfBoundsException</span></span></span>
<span class="line"><span class="line"><span>    │   └── IllegalArgumentException</span></span></span>
<span class="line"><span class="line"><span>    └── CheckedException（编译时异常）</span></span></span>
<span class="line"><span class="line"><span>        ├── IOException</span></span></span>
<span class="line"><span class="line"><span>        ├── SQLException</span></span></span>
<span class="line"><span class="line"><span>        └── ClassNotFoundException</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>异常类型对比：</strong></p><table><thead><tr><th>异常类型</th><th>特点</th><th>处理方式</th><th>常见示例</th></tr></thead><tbody><tr><td><strong>Error</strong></td><td>JVM 系统级错误</td><td>程序无法处理</td><td>OutOfMemoryError</td></tr><tr><td><strong>RuntimeException</strong></td><td>运行时异常</td><td>可选择处理</td><td>NullPointerException</td></tr><tr><td><strong>CheckedException</strong></td><td>编译时异常</td><td>必须处理</td><td>IOException</td></tr></tbody></table><h3 id="_1-2-throwable-类核心方法详解" tabindex="-1"><a class="header-anchor" href="#_1-2-throwable-类核心方法详解"><span>1.2 Throwable 类核心方法详解</span></a></h3><p><code>Throwable</code>类是所有异常的根类，提供了异常处理的核心功能。</p><h4 id="_1-2-1-构造方法" tabindex="-1"><a class="header-anchor" href="#_1-2-1-构造方法"><span>1.2.1 构造方法</span></a></h4><p><code>Throwable</code>提供了四种构造方法，满足不同的异常创建需求：</p><table><thead><tr><th>构造方法</th><th>说明</th><th>使用场景</th></tr></thead><tbody><tr><td><code>Throwable()</code></td><td>无参构造</td><td>简单异常创建</td></tr><tr><td><code>Throwable(String message)</code></td><td>带异常信息</td><td>提供异常描述</td></tr><tr><td><code>Throwable(String message, Throwable cause)</code></td><td>异常链</td><td>包装底层异常</td></tr><tr><td><code>Throwable(Throwable cause)</code></td><td>异常包装</td><td>简化异常链创建</td></tr></tbody></table><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">// Throwable类的关键属性</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">private</span><span style="color:#8FBCBB;"> String</span><span style="color:#D8DEE9;"> detailMessage</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">  // 异常详细信息</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">private</span><span style="color:#8FBCBB;"> Throwable</span><span style="color:#D8DEE9;"> cause</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> this;</span><span style="color:#616E88;"> // 异常原因</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 四种构造方法实现</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#88C0D0;"> Throwable</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    fillInStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#88C0D0;"> Throwable</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;"> message</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    fillInStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    detailMessage </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> message</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#88C0D0;"> Throwable</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;"> message</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> Throwable</span><span style="color:#D8DEE9FF;"> cause</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    fillInStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    detailMessage </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> message</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">cause</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> cause</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#88C0D0;"> Throwable</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Throwable</span><span style="color:#D8DEE9FF;"> cause</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    fillInStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    detailMessage </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">cause </span><span style="color:#81A1C1;">==</span><span style="color:#81A1C1;"> null</span><span style="color:#81A1C1;"> ?</span><span style="color:#81A1C1;"> null</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> cause</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">cause</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> cause</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-核心信息获取方法" tabindex="-1"><a class="header-anchor" href="#_1-2-2-核心信息获取方法"><span>1.2.2 核心信息获取方法</span></a></h4><table><thead><tr><th>方法</th><th>功能</th><th>返回值</th></tr></thead><tbody><tr><td><code>getMessage()</code></td><td>获取异常消息</td><td>String</td></tr><tr><td><code>getLocalizedMessage()</code></td><td>获取本地化消息</td><td>String</td></tr><tr><td><code>toString()</code></td><td>获取异常字符串表示</td><td>String</td></tr><tr><td><code>getStackTrace()</code></td><td>获取堆栈跟踪</td><td>StackTraceElement[]</td></tr></tbody></table><p><strong>getMessage()方法：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#8FBCBB;"> String</span><span style="color:#88C0D0;"> getMessage</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9FF;"> detailMessage</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>getLocalizedMessage()方法：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#8FBCBB;"> String</span><span style="color:#88C0D0;"> getLocalizedMessage</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#88C0D0;"> getMessage</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 默认返回getMessage()结果</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>toString()方法：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#8FBCBB;"> String</span><span style="color:#88C0D0;"> toString</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">    String</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getClass</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">getName</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">    String</span><span style="color:#D8DEE9;"> message</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getLocalizedMessage</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">message </span><span style="color:#81A1C1;">!=</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> ?</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">+</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> message</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-堆栈跟踪方法" tabindex="-1"><a class="header-anchor" href="#_1-2-3-堆栈跟踪方法"><span>1.2.3 堆栈跟踪方法</span></a></h4><p><strong>printStackTrace()方法：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">// 将异常堆栈信息打印到标准错误流</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> printStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    printStackTrace</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心实现逻辑：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">private</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> printStackTrace</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">PrintStreamOrWriter</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    // 使用IdentityHashMap防止循环引用</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">    Set</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Throwable</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> dejaVu</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Collections</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newSetFromMap</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        new</span><span style="color:#8FBCBB;"> IdentityHashMap</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Throwable</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> Boolean</span><span style="color:#ECEFF4;">&gt;())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    dejaVu</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    synchronized</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">lock</span><span style="color:#ECEFF4;">())</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 打印异常信息</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 打印堆栈跟踪</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        StackTraceElement</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9;"> trace</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getOurStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">StackTraceElement</span><span style="color:#D8DEE9;"> traceElement</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9FF;"> trace</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">at </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> traceElement</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 打印被抑制的异常</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">Throwable</span><span style="color:#D8DEE9;"> se</span><span style="color:#81A1C1;"> :</span><span style="color:#88C0D0;"> getSuppressed</span><span style="color:#ECEFF4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            se</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">printEnclosedStackTrace</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> trace</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> SUPPRESSED_CAPTION</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#EBCB8B;">\\t</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> dejaVu</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 打印原因异常</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        Throwable</span><span style="color:#D8DEE9;"> ourCause</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getCause</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">ourCause </span><span style="color:#81A1C1;">!=</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            ourCause</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">printEnclosedStackTrace</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> trace</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> CAUSE_CAPTION</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> dejaVu</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>getStackTrace()方法：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#8FBCBB;"> StackTraceElement</span><span style="color:#ECEFF4;">[]</span><span style="color:#88C0D0;"> getStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#88C0D0;"> getOurStackTrace</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">clone</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 返回副本防止修改</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-jvm-内存结构与异常" tabindex="-1"><a class="header-anchor" href="#_1-3-jvm-内存结构与异常"><span>1.3 JVM 内存结构与异常</span></a></h3><h4 id="_1-3-1-栈与堆的概念区别" tabindex="-1"><a class="header-anchor" href="#_1-3-1-栈与堆的概念区别"><span>1.3.1 栈与堆的概念区别</span></a></h4><p><strong>数据结构 vs 内存管理：</strong></p><table><thead><tr><th>概念</th><th>数据结构</th><th>内存管理</th></tr></thead><tbody><tr><td><strong>栈</strong></td><td>后进先出(LIFO)结构</td><td>自动分配回收的内存区域</td></tr><tr><td><strong>堆</strong></td><td>完全二叉树结构</td><td>动态分配的内存区域</td></tr></tbody></table><p><strong>JVM 内存区域对比：</strong></p><table><thead><tr><th>内存区域</th><th>虚拟机栈</th><th>虚拟机堆</th></tr></thead><tbody><tr><td><strong>内存管理</strong></td><td>JVM 自动分配</td><td>程序动态申请，GC 自动回收</td></tr><tr><td><strong>存储内容</strong></td><td>局部变量、方法参数、返回值</td><td>对象实例、数组</td></tr><tr><td><strong>访问速度</strong></td><td>快速</td><td>较慢</td></tr><tr><td><strong>大小限制</strong></td><td>连续内存空间，默认 1MB</td><td>可动态扩展</td></tr><tr><td><strong>线程共享</strong></td><td>线程私有</td><td>线程共享</td></tr><tr><td><strong>数据结构</strong></td><td>栈结构（LIFO）</td><td>树状结构管理</td></tr></tbody></table><h4 id="_1-3-2-内存区域可能的异常" tabindex="-1"><a class="header-anchor" href="#_1-3-2-内存区域可能的异常"><span>1.3.2 内存区域可能的异常</span></a></h4><table><thead><tr><th>内存区域</th><th>可能异常</th><th>产生原因</th></tr></thead><tbody><tr><td><strong>虚拟机栈</strong></td><td><code>StackOverflowError</code></td><td>栈深度超过限制（如无限递归）</td></tr><tr><td><strong>虚拟机栈</strong></td><td><code>OutOfMemoryError</code></td><td>栈内存不足（多线程创建过多栈）</td></tr><tr><td><strong>虚拟机堆</strong></td><td><code>OutOfMemoryError</code></td><td>堆内存不足，无法分配新对象</td></tr></tbody></table><p><strong>异常示例：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">// StackOverflowError示例</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> recursiveMethod</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    recursiveMethod</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 无限递归导致栈溢出</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// HeapOutOfMemoryError示例</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Object</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> list</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> ArrayList</span><span style="color:#ECEFF4;">&lt;&gt;()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">while</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">true</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    list</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">new</span><span style="color:#88C0D0;"> Object</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不断创建对象导致堆内存溢出</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-异常堆栈信息分析" tabindex="-1"><a class="header-anchor" href="#_1-4-异常堆栈信息分析"><span>1.4 异常堆栈信息分析</span></a></h3><h4 id="_1-4-1-异常堆栈阅读指南" tabindex="-1"><a class="header-anchor" href="#_1-4-1-异常堆栈阅读指南"><span>1.4.1 异常堆栈阅读指南</span></a></h4><p><strong>异常堆栈结构：</strong></p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>异常类型: 异常详细信息</span></span></span>
<span class="line"><span class="line"><span>    at 包名.类名.方法名(文件名:行号)  ← 最先抛出异常的位置</span></span></span>
<span class="line"><span class="line"><span>    at 包名.类名.方法名(文件名:行号)  ← 调用链向上追溯</span></span></span>
<span class="line"><span class="line"><span>    at 包名.类名.方法名(文件名:行号)  ← 最后捕获异常的位置</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>阅读原则：</strong></p><ul><li><strong>异常信息</strong>：异常类型 + 详细描述</li><li><strong>异常路径</strong>：按照先进后出的顺序打印</li><li><strong>最下方</strong>：最早抛出异常的源头</li><li><strong>最上方</strong>：最后传播异常的位置</li></ul><h4 id="_1-4-2-jvm-堆栈信息优化机制" tabindex="-1"><a class="header-anchor" href="#_1-4-2-jvm-堆栈信息优化机制"><span>1.4.2 JVM 堆栈信息优化机制</span></a></h4><p><strong>为什么 JVM 要省略部分堆栈信息？</strong></p><ol><li><strong>性能优化</strong>：减少 I/O 打印开销</li><li><strong>避免重复</strong>：忽略相同的堆栈信息</li><li><strong>提高可读性</strong>：突出关键信息</li></ol><p><strong>省略机制实现：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">private</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> printEnclosedStackTrace</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">PrintStreamOrWriter</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                                   StackTraceElement</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9FF;"> enclosingTrace</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                                   String</span><span style="color:#D8DEE9FF;"> caption</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                                   String</span><span style="color:#D8DEE9FF;"> prefix</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                                   Set</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">Throwable</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> dejaVu</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    // 防止循环引用</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">dejaVu</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">contains</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">))</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">[CIRCULAR REFERENCE:</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#81A1C1;"> this</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    dejaVu</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">    StackTraceElement</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9;"> trace</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getOurStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    int</span><span style="color:#D8DEE9;"> m</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> trace</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    int</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> enclosingTrace</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    // 找出重复的堆栈帧数量</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    while</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">m </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;"> &amp;&amp;</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;"> &amp;&amp;</span><span style="color:#D8DEE9FF;"> trace</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">m</span><span style="color:#ECEFF4;">].</span><span style="color:#88C0D0;">equals</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">enclosingTrace</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">]))</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">        m</span><span style="color:#81A1C1;">--;</span><span style="color:#D8DEE9FF;"> n</span><span style="color:#81A1C1;">--;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    int</span><span style="color:#D8DEE9;"> framesInCommon</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> trace</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;"> -</span><span style="color:#D8DEE9FF;"> m</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    // 打印堆栈信息</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">prefix </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> caption </span><span style="color:#81A1C1;">+</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    for</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">&lt;=</span><span style="color:#D8DEE9FF;"> m</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">prefix </span><span style="color:#81A1C1;">+</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">at </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> trace</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">i</span><span style="color:#ECEFF4;">])</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    // 显示省略的帧数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">framesInCommon </span><span style="color:#81A1C1;">!=</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">prefix </span><span style="color:#81A1C1;">+</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">... </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> framesInCommon </span><span style="color:#81A1C1;">+</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;"> more</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-3-完整堆栈信息输出" tabindex="-1"><a class="header-anchor" href="#_1-4-3-完整堆栈信息输出"><span>1.4.3 完整堆栈信息输出</span></a></h4><p><strong>自定义异常处理器示例：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">/**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"> * 完整异常堆栈信息处理器</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"> */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> FullStackTraceHandler</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;font-weight:bold;"> Thread</span><span style="color:#ECEFF4;font-weight:bold;">.</span><span style="color:#8FBCBB;font-weight:bold;">UncaughtExceptionHandler</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Override</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> uncaughtException</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Thread</span><span style="color:#D8DEE9;"> t</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> Throwable</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        StackTraceElement</span><span style="color:#ECEFF4;">[]</span><span style="color:#D8DEE9;"> elements</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getStackTrace</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Exception in thread </span><span style="color:#EBCB8B;">\\&quot;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> t</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getName</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#EBCB8B;">\\&quot;</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 打印完整堆栈信息</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">StackTraceElement</span><span style="color:#D8DEE9;"> element</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9FF;"> elements</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">at </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> element</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>        System.err.println(&quot;\\tat &quot; + se);
    }

    Throwable ec = e.getCause();
    if (null != ec) {
        uncaughtException(t, ec);
    }
}
</code></pre><p>}</p><p>public static void main(String[] args) { Thread.setDefaultUncaughtExceptionHandler(new ExceptionHandler()); new CompleteException().someMethodThrowable(); }</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>---</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>## 2. JVM调优</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>### 2.1 JVM调优概述</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>JVM调优是提升Java应用性能的核心手段，涉及内存管理、垃圾回收、线程优化等多个方面。</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>#### 2.1.1 JVM调优核心策略</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>| 调优方向 | 具体措施 | 预期效果 |</span></span></span>
<span class="line"><span class="line"><span>|----------|----------|----------|</span></span></span>
<span class="line"><span class="line"><span>| **内存优化** | 调整堆大小、配置内存比例 | 减少GC频率，提高内存利用率 |</span></span></span>
<span class="line"><span class="line"><span>| **GC优化** | 选择合适的垃圾收集器 | 降低GC暂停时间 |</span></span></span>
<span class="line"><span class="line"><span>| **代码优化** | 减少对象创建、优化算法 | 减少JVM负担 |</span></span></span>
<span class="line"><span class="line"><span>| **监控诊断** | 使用性能监控工具 | 及时发现性能瓶颈 |</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>#### 2.1.2 JVM调优步骤</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>1. **性能监控**：使用JConsole、VisualVM等工具收集性能数据</span></span></span>
<span class="line"><span class="line"><span>2. **参数调整**：根据应用特性调整JVM参数</span></span></span>
<span class="line"><span class="line"><span>3. **GC策略选择**：选择适合的垃圾收集器</span></span></span>
<span class="line"><span class="line"><span>4. **代码优化**：优化应用程序代码</span></span></span>
<span class="line"><span class="line"><span>5. **数据存储优化**：使用缓存、内存映射等技术</span></span></span>
<span class="line"><span class="line"><span>6. **内存泄漏检测**：及时发现和修复内存泄漏</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>---</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>## 3. 性能优化</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>### 3.1 云端部署优化</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>#### 3.1.1 项目部署流程</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>**标准部署步骤：**</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>1. **本地打包**</span></span></span>
<span class="line"><span class="line"><span>   \`\`\`shell</span></span></span>
<span class="line"><span class="line"><span>   mvn clean package</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p><strong>服务器部署</strong></p><ul><li>上传 JAR 包到服务器</li><li>创建额外的<code>application.properties</code>配置文件</li><li>编写启动脚本<code>deploy.sh</code></li></ul></li><li><p><strong>优化启动</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#88C0D0;">nohup</span><span style="color:#A3BE8C;"> java</span><span style="color:#A3BE8C;"> -Xms2048m</span><span style="color:#A3BE8C;"> -Xmx2048m</span><span style="color:#A3BE8C;"> -XX:NewSize=1024m</span><span style="color:#A3BE8C;"> -XX:MaxNewSize=1024m</span><span style="color:#EBCB8B;"> \\</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">-jar </span><span style="color:#A3BE8C;">test.jar</span><span style="color:#A3BE8C;"> --spring.config.addition-location=/var/application.properties</span><span style="color:#ECEFF4;"> &amp;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_3-1-2-jvm-启动参数详解" tabindex="-1"><a class="header-anchor" href="#_3-1-2-jvm-启动参数详解"><span>3.1.2 JVM 启动参数详解</span></a></h4><table><thead><tr><th>参数</th><th>说明</th><th>推荐值</th></tr></thead><tbody><tr><td><code>-Xms</code></td><td>JVM 初始堆内存</td><td>与-Xmx 相同</td></tr><tr><td><code>-Xmx</code></td><td>JVM 最大堆内存</td><td>根据可用内存设置</td></tr><tr><td><code>-XX:NewSize</code></td><td>初始新生代大小</td><td>堆内存的 1/3 到 1/2</td></tr><tr><td><code>-XX:MaxNewSize</code></td><td>最大新生代大小</td><td>与 NewSize 相同</td></tr><tr><td><code>nohup</code></td><td>后台运行，控制台关闭后程序继续</td><td>生产环境必须</td></tr><tr><td><code>--spring.config.addition-location</code></td><td>指定额外配置文件</td><td>环境差异化配置</td></tr></tbody></table><p><strong>参数设置原则：</strong></p><ul><li>初始值与最大值相同，减少内存扩展开销</li><li>新生代大小合理配置，平衡 GC 效率</li><li>添加额外配置文件路径，支持环境差异化配置</li></ul><h3 id="_3-2-tomcat-配置优化" tabindex="-1"><a class="header-anchor" href="#_3-2-tomcat-配置优化"><span>3.2 Tomcat 配置优化</span></a></h3><h4 id="_3-2-1-核心配置参数" tabindex="-1"><a class="header-anchor" href="#_3-2-1-核心配置参数"><span>3.2.1 核心配置参数</span></a></h4><p>在<code>application.properties</code>中配置 Tomcat 优化参数：</p><div class="language-properties line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-properties;"><code><span class="line"><span class="line"><span style="color:#616E88;"># 线程配置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.threads.min-spare</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">10          </span><span style="color:#616E88;"># 最小线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.threads.max</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">200               </span><span style="color:#616E88;"># 最大线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.max-connections</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">8192          </span><span style="color:#616E88;"># 最大连接数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.accept-count</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">100              </span><span style="color:#616E88;"># 线程等待队列长度</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 连接优化</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.connection-timeout</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">20000      </span><span style="color:#616E88;"># 连接超时时间(ms)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.keep-alive-timeout</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">60000      </span><span style="color:#616E88;"># KeepAlive超时时间(ms)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.max-keep-alive-requests</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">100   </span><span style="color:#616E88;"># KeepAlive最大请求数</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 性能优化</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.compression.enabled</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">true             </span><span style="color:#616E88;"># 开启压缩</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.compression.mime-types</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">text/html,text/css,application/javascript,application/json</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-tomcat-优化参数详解" tabindex="-1"><a class="header-anchor" href="#_3-2-2-tomcat-优化参数详解"><span>3.2.2 Tomcat 优化参数详解</span></a></h4><table><thead><tr><th>参数类别</th><th>参数</th><th>作用</th><th>推荐值</th></tr></thead><tbody><tr><td><strong>线程配置</strong></td><td>min-spare</td><td>最小空闲线程数，提高响应速度</td><td>10-50</td></tr><tr><td><strong>线程配置</strong></td><td>max</td><td>最大线程数，控制并发处理能力</td><td>200-800</td></tr><tr><td><strong>连接配置</strong></td><td>max-connections</td><td>最大连接数，控制服务器负载</td><td>8192-10000</td></tr><tr><td><strong>队列配置</strong></td><td>accept-count</td><td>等待队列长度，缓冲高并发请求</td><td>100-1000</td></tr><tr><td><strong>性能配置</strong></td><td>keep-alive</td><td>保持连接，减少握手开销</td><td>启用</td></tr></tbody></table><hr><h2 id="_4-分布式扩展" tabindex="-1"><a class="header-anchor" href="#_4-分布式扩展"><span>4. 分布式扩展</span></a></h2><h3 id="_4-1-nginx-负载均衡与反向代理" tabindex="-1"><a class="header-anchor" href="#_4-1-nginx-负载均衡与反向代理"><span>4.1 Nginx 负载均衡与反向代理</span></a></h3><h4 id="_4-1-1-openresty-安装配置" tabindex="-1"><a class="header-anchor" href="#_4-1-1-openresty-安装配置"><span>4.1.1 OpenResty 安装配置</span></a></h4><p><strong>安装步骤：</strong></p><ol><li><p><strong>依赖安装</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#88C0D0;">yum</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> pcre-devel</span><span style="color:#A3BE8C;"> openssl-devel</span><span style="color:#A3BE8C;"> gcc</span><span style="color:#A3BE8C;"> curl</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>OpenResty 安装</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#616E88;"># 下载并解压</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">wget</span><span style="color:#A3BE8C;"> https://openresty.org/download/openresty-1.19.9.1.tar.gz</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">tar</span><span style="color:#A3BE8C;"> -xvzf</span><span style="color:#A3BE8C;"> openresty-1.19.9.1.tar.gz</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">cd</span><span style="color:#A3BE8C;"> openresty-1.19.9.1</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 编译安装</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">./configure</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">make</span><span style="color:#ECEFF4;"> &amp;&amp;</span><span style="color:#88C0D0;"> make</span><span style="color:#A3BE8C;"> install</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>验证安装</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#616E88;"># Nginx默认安装路径</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">/usr/local/openresty/nginx</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_4-1-2-静态资源部署" tabindex="-1"><a class="header-anchor" href="#_4-1-2-静态资源部署"><span>4.1.2 静态资源部署</span></a></h4><p><strong>目录结构配置：</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#88C0D0;">/usr/local/openresty/nginx/html/</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">├──</span><span style="color:#A3BE8C;"> index.html</span><span style="color:#616E88;">          # 默认页面</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">└──</span><span style="color:#A3BE8C;"> resources/</span><span style="color:#616E88;">          # 静态资源目录</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    ├──</span><span style="color:#A3BE8C;"> css/</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    ├──</span><span style="color:#A3BE8C;"> js/</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    ├──</span><span style="color:#A3BE8C;"> images/</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    └──</span><span style="color:#A3BE8C;"> fonts/</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Nginx 配置示例：</strong></p><div class="language-nginx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-nginx;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">server</span><span style="color:#D8DEE9FF;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    listen </span><span style="color:#B48EAD;">80</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    server_name </span><span style="color:#D8DEE9FF;">example.com</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # 静态资源location</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    location</span><span style="color:#D8DEE9FF;"> /resources/ {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        root </span><span style="color:#D8DEE9FF;">/usr/local/openresty/nginx/html</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        expires </span><span style="color:#B48EAD;">30d</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">                    # 缓存30天</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        add_header </span><span style="color:#D8DEE9FF;">Cache-Control </span><span style="color:#A3BE8C;">&quot;public, immutable&quot;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # 首页配置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    location</span><span style="color:#D8DEE9FF;"> / {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        root </span><span style="color:#D8DEE9FF;">/usr/local/openresty/nginx/html</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        index </span><span style="color:#D8DEE9FF;">index.html</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-3-动态请求反向代理" tabindex="-1"><a class="header-anchor" href="#_4-1-3-动态请求反向代理"><span>4.1.3 动态请求反向代理</span></a></h4><p><strong>负载均衡配置：</strong></p><div class="language-nginx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-nginx;"><code><span class="line"><span class="line"><span style="color:#616E88;"># 后端服务器集群配置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">upstream</span><span style="color:#D8DEE9FF;"> backend_server {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    server</span><span style="color:#D8DEE9FF;"> 192.168.1.100:8080 </span><span style="color:#D8DEE9;">weight</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;"> max_fails=2 </span><span style="color:#D8DEE9;">fail_timeout</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">30s</span><span style="color:#D8DEE9FF;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    server 192.168.1.101:8080 </span><span style="color:#D8DEE9;">weight</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;"> max_fails=2 </span><span style="color:#D8DEE9;">fail_timeout</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">30s</span><span style="color:#D8DEE9FF;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    server 192.168.1.102:8080 </span><span style="color:#D8DEE9;">weight</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;"> max_fails=2 </span><span style="color:#D8DEE9;">fail_timeout</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">30s</span><span style="color:#D8DEE9FF;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # 健康检查</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    keepalive </span><span style="color:#B48EAD;">32</span><span style="color:#D8DEE9FF;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server</span><span style="color:#D8DEE9FF;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    listen </span><span style="color:#B48EAD;">80</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # API请求代理</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    location</span><span style="color:#D8DEE9FF;"> /api/ {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_pass </span><span style="color:#D8DEE9FF;">http://backend_server</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        # 请求头设置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_set_header </span><span style="color:#D8DEE9FF;">Host </span><span style="color:#81A1C1;">$</span><span style="color:#D8DEE9;">http_host</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_set_header </span><span style="color:#D8DEE9FF;">X-Real-IP </span><span style="color:#81A1C1;">$</span><span style="color:#D8DEE9;">remote_addr</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_set_header </span><span style="color:#D8DEE9FF;">X-Forwarded-For </span><span style="color:#81A1C1;">$</span><span style="color:#D8DEE9;">proxy_add_x_forwarded_for</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_set_header </span><span style="color:#D8DEE9FF;">X-Forwarded-Proto </span><span style="color:#81A1C1;">$</span><span style="color:#D8DEE9;">scheme</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        # 超时设置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_connect_timeout </span><span style="color:#B48EAD;">30s</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_send_timeout </span><span style="color:#B48EAD;">30s</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_read_timeout </span><span style="color:#B48EAD;">30s</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        # 缓冲设置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_buffering on;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_buffer_size </span><span style="color:#B48EAD;">4k</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        proxy_buffers </span><span style="color:#B48EAD;">8</span><span style="color:#B48EAD;"> 4k</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>负载均衡策略对比：</strong></p><table><thead><tr><th>策略</th><th>说明</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>round-robin</strong></td><td>轮询（默认）</td><td>服务器性能相近</td></tr><tr><td><strong>weight</strong></td><td>加权轮询</td><td>服务器性能不同</td></tr><tr><td><strong>ip_hash</strong></td><td>IP 哈希</td><td>需要会话保持</td></tr><tr><td><strong>least_conn</strong></td><td>最少连接</td><td>长连接应用</td></tr></tbody></table><h3 id="_4-2-java-服务分布式部署" tabindex="-1"><a class="header-anchor" href="#_4-2-java-服务分布式部署"><span>4.2 Java 服务分布式部署</span></a></h3><h4 id="_4-2-1-服务部署脚本" tabindex="-1"><a class="header-anchor" href="#_4-2-1-服务部署脚本"><span>4.2.1 服务部署脚本</span></a></h4><p><strong>启动脚本示例 (start.sh)：</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">APP_NAME</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">user-service</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">JAR_FILE</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">user-service-1.0.0.jar</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">PID_FILE</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/var/run/</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">APP_NAME</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">.pid</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">LOG_FILE</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/var/log/</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">APP_NAME</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">.log</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># JVM参数配置</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">JVM_OPTS</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">-Xms1024m -Xmx2048m</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">JVM_OPTS</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9;">$JVM_OPTS</span><span style="color:#A3BE8C;"> -XX:+UseG1GC</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">JVM_OPTS</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9;">$JVM_OPTS</span><span style="color:#A3BE8C;"> -XX:MaxGCPauseMillis=200</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">JVM_OPTS</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9;">$JVM_OPTS</span><span style="color:#A3BE8C;"> -XX:+PrintGCDetails</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">JVM_OPTS</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9;">$JVM_OPTS</span><span style="color:#A3BE8C;"> -Xloggc:/var/log/</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">APP_NAME</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">-gc.log</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 启动应用</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">start</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -f</span><span style="color:#D8DEE9;"> $PID_FILE</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Service is already running</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        exit</span><span style="color:#B48EAD;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    fi</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Starting </span><span style="color:#D8DEE9;">$APP_NAME</span><span style="color:#A3BE8C;">...</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    nohup</span><span style="color:#A3BE8C;"> java</span><span style="color:#D8DEE9;"> $JVM_OPTS</span><span style="color:#A3BE8C;"> -jar</span><span style="color:#D8DEE9;"> $JAR_FILE</span><span style="color:#81A1C1;"> &gt;</span><span style="color:#D8DEE9;"> $LOG_FILE</span><span style="color:#81A1C1;"> 2&gt;&amp;1</span><span style="color:#ECEFF4;"> &amp;</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#81A1C1;"> $!</span><span style="color:#81A1C1;"> &gt;</span><span style="color:#D8DEE9;"> $PID_FILE</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Service started with PID: </span><span style="color:#ECEFF4;">$(</span><span style="color:#88C0D0;">cat</span><span style="color:#D8DEE9;"> $PID_FILE</span><span style="color:#ECEFF4;">)&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 停止应用</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">stop</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> !</span><span style="color:#81A1C1;"> -f</span><span style="color:#D8DEE9;"> $PID_FILE</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Service is not running</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        exit</span><span style="color:#B48EAD;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    fi</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    PID</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">$(</span><span style="color:#88C0D0;">cat</span><span style="color:#D8DEE9;"> $PID_FILE</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Stopping </span><span style="color:#D8DEE9;">$APP_NAME</span><span style="color:#A3BE8C;"> (PID: </span><span style="color:#D8DEE9;">$PID</span><span style="color:#A3BE8C;">)...</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    kill</span><span style="color:#D8DEE9;"> $PID</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    rm</span><span style="color:#A3BE8C;"> -f</span><span style="color:#D8DEE9;"> $PID_FILE</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Service stopped</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 重启应用</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">restart</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    stop</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    sleep</span><span style="color:#B48EAD;"> 5</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    start</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> in</span></span></span>
<span class="line"><span class="line"><span style="color:#EBCB8B;">    start</span><span style="color:#81A1C1;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        start</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        ;;</span></span></span>
<span class="line"><span class="line"><span style="color:#EBCB8B;">    stop</span><span style="color:#81A1C1;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        stop</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        ;;</span></span></span>
<span class="line"><span class="line"><span style="color:#EBCB8B;">    restart</span><span style="color:#81A1C1;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        restart</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        ;;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    *)</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Usage: </span><span style="color:#D8DEE9;">$0</span><span style="color:#A3BE8C;"> {start|stop|restart}</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        exit</span><span style="color:#B48EAD;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        ;;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">esac</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-tomcat-访问日志配置" tabindex="-1"><a class="header-anchor" href="#_4-2-2-tomcat-访问日志配置"><span>4.2.2 Tomcat 访问日志配置</span></a></h4><p><strong>在 application.properties 中启用访问日志：</strong></p><div class="language-properties line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-properties;"><code><span class="line"><span class="line"><span style="color:#616E88;"># 访问日志配置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.accesslog.enabled</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">true</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.accesslog.directory</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">/var/log/tomcat</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.accesslog.file-date-format</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">.yyyy-MM-dd</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.accesslog.pattern</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">%h %l %u %t </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%r</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;"> %s %b %D</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.accesslog.prefix</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">access_log</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">server.tomcat.accesslog.suffix</span><span style="color:#ECEFF4;">=</span><span style="color:#D8DEE9FF;">.log</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-分布式会话管理" tabindex="-1"><a class="header-anchor" href="#_4-3-分布式会话管理"><span>4.3 分布式会话管理</span></a></h3><h4 id="_4-3-1-会话管理方案对比" tabindex="-1"><a class="header-anchor" href="#_4-3-1-会话管理方案对比"><span>4.3.1 会话管理方案对比</span></a></h4><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Cookie</strong></td><td>客户端存储，服务器无状态</td><td>安全性差，大小限制</td><td>简单状态信息</td></tr><tr><td><strong>Session</strong></td><td>服务器端存储，相对安全</td><td>服务器压力大，扩展性差</td><td>单机应用</td></tr><tr><td><strong>Token(JWT)</strong></td><td>无状态，跨域支持好</td><td>无法主动失效，信息泄露风险</td><td>微服务架构</td></tr><tr><td><strong>Redis Session</strong></td><td>集中存储，高可用</td><td>增加网络开销</td><td>分布式应用</td></tr></tbody></table><h4 id="_4-3-2-token-方案实现" tabindex="-1"><a class="header-anchor" href="#_4-3-2-token-方案实现"><span>4.3.2 Token 方案实现</span></a></h4><p><strong>JWT Token 示例：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Service</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> TokenService</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> String</span><span style="color:#D8DEE9;"> SECRET_KEY</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">mySecretKey</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#81A1C1;"> long</span><span style="color:#D8DEE9;"> EXPIRATION_TIME</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 86400000</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 24小时</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> String</span><span style="color:#88C0D0;"> generateToken</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> username</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#D8DEE9;"> Jwts</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">builder</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">setSubject</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">username</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">setIssuedAt</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">new</span><span style="color:#88C0D0;"> Date</span><span style="color:#ECEFF4;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">setExpiration</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">new</span><span style="color:#88C0D0;"> Date</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">System</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">currentTimeMillis</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> EXPIRATION_TIME</span><span style="color:#ECEFF4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">signWith</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">SignatureAlgorithm</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">HS256</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> SECRET_KEY</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">compact</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> boolean</span><span style="color:#88C0D0;"> validateToken</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> token</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        try</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            Jwts</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">parser</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">setSigningKey</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">SECRET_KEY</span><span style="color:#ECEFF4;">).</span><span style="color:#88C0D0;">parseClaimsJws</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">token</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#81A1C1;"> true;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span><span style="color:#81A1C1;"> catch</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">JwtException</span><span style="color:#ECEFF4;"> |</span><span style="color:#8FBCBB;"> IllegalArgumentException</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#81A1C1;"> false;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-查询优化" tabindex="-1"><a class="header-anchor" href="#_4-4-查询优化"><span>4.4 查询优化</span></a></h3><h4 id="_4-4-1-redis-缓存优化" tabindex="-1"><a class="header-anchor" href="#_4-4-1-redis-缓存优化"><span>4.4.1 Redis 缓存优化</span></a></h4><p><strong>缓存模式对比：</strong></p><table><thead><tr><th>缓存模式</th><th>说明</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>Cache-Aside</strong></td><td>应用程序管理缓存</td><td>控制灵活</td><td>代码复杂</td></tr><tr><td><strong>Read-Through</strong></td><td>缓存层管理数据读取</td><td>代码简洁</td><td>缓存层复杂</td></tr><tr><td><strong>Write-Through</strong></td><td>同步写入缓存和数据库</td><td>数据一致性好</td><td>写入性能差</td></tr><tr><td><strong>Write-Behind</strong></td><td>异步写入数据库</td><td>写入性能好</td><td>数据可能丢失</td></tr></tbody></table><p><strong>缓存脏读处理策略：</strong></p><ol><li><p><strong>设置合理的过期时间</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Cacheable</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> key</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">#id</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> expire</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3600</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> // 1小时过期</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#8FBCBB;"> User</span><span style="color:#88C0D0;"> getUserById</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Long</span><span style="color:#D8DEE9FF;"> id</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> userRepository</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">findById</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">id</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>主动缓存更新</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">CacheEvict</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> key</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">#user.id</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#8FBCBB;"> User</span><span style="color:#88C0D0;"> updateUser</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">User</span><span style="color:#D8DEE9FF;"> user</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">    User</span><span style="color:#D8DEE9;"> updated</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> userRepository</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">save</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">user</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    // 重新加载缓存</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9FF;"> updated</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>缓存击穿防护：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Service</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> UserService</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> RedisTemplate</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> Object</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> redisTemplate</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> StringRedisTemplate</span><span style="color:#D8DEE9;"> stringRedisTemplate</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> User</span><span style="color:#88C0D0;"> getUserById</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Long</span><span style="color:#D8DEE9;"> id</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        String</span><span style="color:#D8DEE9;"> key</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">user:</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> id</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 1. 查询缓存</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        User</span><span style="color:#D8DEE9;"> user</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">User</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9;"> redisTemplate</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">opsForValue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">get</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">key</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">user </span><span style="color:#81A1C1;">!=</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#D8DEE9FF;"> user</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 2. 分布式锁防止缓存击穿</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        String</span><span style="color:#D8DEE9;"> lockKey</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">lock:user:</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> id</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        String</span><span style="color:#D8DEE9;"> lockValue</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> UUID</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">randomUUID</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        try</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">            // 尝试获取锁（5秒超时）</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">            Boolean</span><span style="color:#D8DEE9;"> locked</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> stringRedisTemplate</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">opsForValue</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">setIfAbsent</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">lockKey</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> lockValue</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Duration</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">ofSeconds</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">Boolean</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">TRUE</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">equals</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">locked</span><span style="color:#ECEFF4;">))</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                // 获取锁成功，查询数据库</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">                user </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> userRepository</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">findById</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">id</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">user </span><span style="color:#81A1C1;">!=</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                    // 设置缓存（30分钟）</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                    redisTemplate</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">opsForValue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">set</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">key</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> user</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Duration</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">ofMinutes</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">30</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                    // 防止缓存穿透，设置空值（5分钟）</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                    redisTemplate</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">opsForValue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">set</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">key</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Object</span><span style="color:#ECEFF4;">(),</span><span style="color:#D8DEE9;"> Duration</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">ofMinutes</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                }</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                return</span><span style="color:#D8DEE9FF;"> user</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                // 获取锁失败，短暂等待后重试</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                Thread</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">sleep</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">50</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                return</span><span style="color:#88C0D0;"> getUserById</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">id</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span><span style="color:#81A1C1;"> finally</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">            // 释放锁</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">            releaseLock</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">lockKey</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> lockValue</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> releaseLock</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> lockKey</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> String</span><span style="color:#D8DEE9;"> lockValue</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        String</span><span style="color:#D8DEE9;"> script</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                       &quot;</span><span style="color:#A3BE8C;">return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        stringRedisTemplate</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">execute</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            RedisScript</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">of</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">script</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Long</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">class</span><span style="color:#ECEFF4;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            Collections</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">singletonList</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">lockKey</span><span style="color:#ECEFF4;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">            lockValue</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-2-本地缓存优化" tabindex="-1"><a class="header-anchor" href="#_4-4-2-本地缓存优化"><span>4.4.2 本地缓存优化</span></a></h4><p><strong>Guava Cache 配置：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Configuration</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> CacheConfig</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Bean</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> Cache</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> Object</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#88C0D0;"> localCache</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#D8DEE9;"> CacheBuilder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newBuilder</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">maximumSize</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">10000</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;">                    // 最大缓存条数</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">expireAfterWrite</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">30</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">MINUTES</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> // 写入30分钟后过期</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">expireAfterAccess</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">MINUTES</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> // 访问10分钟后过期</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">refreshAfterWrite</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">MINUTES</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;">  // 写入5分钟后刷新</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">recordStats</span><span style="color:#ECEFF4;">()</span><span style="color:#616E88;">                          // 启用统计</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">removalListener</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">notification </span><span style="color:#8FBCBB;">-&gt;</span><span style="color:#ECEFF4;"> {</span><span style="color:#616E88;">       // 移除监听器</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                    System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Cache removed: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> notification</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getKey</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                        +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">, cause: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> notification</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getCause</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                })</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">build</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>本地缓存使用示例：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Service</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> ProductService</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Autowired</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#8FBCBB;"> Cache</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> Object</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> localCache</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> Product</span><span style="color:#88C0D0;"> getProduct</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> productId</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">Product</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9;"> localCache</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">productId</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">            // 缓存未命中时的加载逻辑</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#D8DEE9;"> productRepository</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">findById</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">productId</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        })</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> updateProduct</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Product</span><span style="color:#D8DEE9;"> product</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        productRepository</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">save</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">product</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 清理本地缓存</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        localCache</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">invalidate</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">product</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getId</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-3-热点缓存策略" tabindex="-1"><a class="header-anchor" href="#_4-4-3-热点缓存策略"><span>4.4.3 热点缓存策略</span></a></h4><p><strong>热点数据识别：</strong></p><ol><li><p><strong>访问频次统计</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Component</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> HotDataDetector</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> Map</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> AtomicInteger</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> accessCount</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> ConcurrentHashMap</span><span style="color:#ECEFF4;">&lt;&gt;()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#81A1C1;"> int</span><span style="color:#D8DEE9;"> HOT_THRESHOLD</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 100</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 热点阈值</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> boolean</span><span style="color:#88C0D0;"> isHotData</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> key</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        int</span><span style="color:#D8DEE9;"> count</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> accessCount</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">computeIfAbsent</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">key</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> k </span><span style="color:#8FBCBB;">-&gt;</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> AtomicInteger</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                              .</span><span style="color:#88C0D0;">incrementAndGet</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#D8DEE9FF;"> count </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> HOT_THRESHOLD</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Scheduled</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">fixedRate</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 300000</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> // 5分钟重置一次</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> resetAccessCount</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        accessCount</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clear</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>热点数据预热</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Component</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> CacheWarmup</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">EventListener</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Async</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> warmupCache</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">ApplicationReadyEvent</span><span style="color:#D8DEE9;"> event</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 预热热点商品数据</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> hotProductIds</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getHotProductIds</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> productId</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9FF;"> hotProductIds</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            productService</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getProduct</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">productId</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>热点数据淘汰策略</strong></p><table><thead><tr><th>策略</th><th>说明</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>LRU</strong></td><td>最近最少使用</td><td>通用场景</td></tr><tr><td><strong>LFU</strong></td><td>最少使用频次</td><td>访问模式稳定</td></tr><tr><td><strong>TTL</strong></td><td>时间过期</td><td>时效性数据</td></tr><tr><td><strong>Random</strong></td><td>随机淘汰</td><td>内存紧张时</td></tr></tbody></table></li></ol><h4 id="_4-4-4-nginx-代理缓存" tabindex="-1"><a class="header-anchor" href="#_4-4-4-nginx-代理缓存"><span>4.4.4 Nginx 代理缓存</span></a></h4><p><strong>缓存路径配置：</strong></p><p>在<code>nginx.conf</code>中配置缓存路径：</p><div class="language-nginx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-nginx;"><code><span class="line"><span class="line"><span style="color:#616E88;"># 缓存路径配置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">proxy_cache_path </span><span style="color:#D8DEE9FF;">/usr/local/openresty/nginx/cache_temp</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">                 levels=1:2                          </span><span style="color:#616E88;"># 两层目录结构</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">                 keys_zone=tmp_cache:100m             </span><span style="color:#616E88;"># 缓存区名称和内存大小</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">                 inactive=7d                          </span><span style="color:#616E88;"># 7天未访问自动删除</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">                 max_size=10g                         </span><span style="color:#616E88;"># 最大缓存文件大小</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">                 use_temp_path=off</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">                   # 关闭临时文件路径</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Location 缓存配置：</strong></p><div class="language-nginx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-nginx;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">location</span><span style="color:#D8DEE9FF;"> /api/ {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    proxy_pass </span><span style="color:#D8DEE9FF;">http://backend_server</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # 缓存配置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    proxy_cache </span><span style="color:#D8DEE9FF;">tmp_cache</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">                           # 使用缓存区</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    proxy_cache_valid </span><span style="color:#B48EAD;">200</span><span style="color:#B48EAD;"> 206</span><span style="color:#B48EAD;"> 304</span><span style="color:#B48EAD;"> 302</span><span style="color:#B48EAD;"> 10d</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">          # 成功响应缓存10天</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    proxy_cache_valid </span><span style="color:#B48EAD;">404</span><span style="color:#B48EAD;"> 1m</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">                       # 404缓存1分钟</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    proxy_cache_key $</span><span style="color:#D8DEE9;">scheme</span><span style="color:#81A1C1;">$</span><span style="color:#D8DEE9;">proxy_host</span><span style="color:#81A1C1;">$</span><span style="color:#D8DEE9;">request_uri</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">  # 缓存key规则</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # 缓存控制</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    proxy_cache_bypass $</span><span style="color:#D8DEE9;">http_pragma</span><span style="color:#81A1C1;"> $</span><span style="color:#D8DEE9;">http_authorization</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> # 绕过缓存条件</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    proxy_no_cache $</span><span style="color:#D8DEE9;">http_pragma</span><span style="color:#81A1C1;"> $</span><span style="color:#D8DEE9;">http_authorization</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">     # 不缓存条件</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # 响应头</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    add_header </span><span style="color:#D8DEE9FF;">X-Cache-Status </span><span style="color:#81A1C1;">$</span><span style="color:#D8DEE9;">upstream_cache_status</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">    # 添加缓存状态头</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缓存参数详解：</strong></p><table><thead><tr><th>参数</th><th>说明</th><th>推荐值</th></tr></thead><tbody><tr><td><code>levels</code></td><td>目录层级结构</td><td>1:2</td></tr><tr><td><code>keys_zone</code></td><td>内存缓存区大小</td><td>100m</td></tr><tr><td><code>inactive</code></td><td>非活跃数据过期时间</td><td>7d</td></tr><tr><td><code>max_size</code></td><td>最大磁盘缓存大小</td><td>10g</td></tr><tr><td><code>proxy_cache_valid</code></td><td>不同状态码缓存时间</td><td>根据业务设定</td></tr></tbody></table><h3 id="_4-5-openresty-lua-扩展" tabindex="-1"><a class="header-anchor" href="#_4-5-openresty-lua-扩展"><span>4.5 OpenResty + Lua 扩展</span></a></h3><h4 id="_4-5-1-lua-模块配置" tabindex="-1"><a class="header-anchor" href="#_4-5-1-lua-模块配置"><span>4.5.1 Lua 模块配置</span></a></h4><p><strong>在 nginx.conf 的 http 模块下配置：</strong></p><div class="language-nginx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-nginx;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">http</span><span style="color:#D8DEE9FF;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # Lua模块路径</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    lua_package_path</span><span style="color:#A3BE8C;"> &quot;/usr/local/openresty/lualib/?.lua;;&quot;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    lua_package_cpath</span><span style="color:#A3BE8C;"> &quot;/usr/local/openresty/lualib/?.so;;&quot;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # 共享字典配置</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    lua_shared_dict</span><span style="color:#D8DEE9FF;"> my_cache </span><span style="color:#B48EAD;">128m</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    lua_shared_dict</span><span style="color:#D8DEE9FF;"> api_limit </span><span style="color:#B48EAD;">10m</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    # 其他配置...</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-5-2-lua-脚本应用" tabindex="-1"><a class="header-anchor" href="#_4-5-2-lua-脚本应用"><span>4.5.2 Lua 脚本应用</span></a></h4><p><strong>简单 Lua 测试：</strong></p><div class="language-nginx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-nginx;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">location</span><span style="color:#81A1C1;"> =</span><span style="color:#EBCB8B;"> /lua </span><span style="color:#D8DEE9FF;">{</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    default_type </span><span style="color:#A3BE8C;">&#39;text/plain&#39;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    content_by_lua_block</span><span style="color:#D8DEE9FF;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello, Lua!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Current time: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">, </span><span style="color:#D8DEE9;">ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">now</span><span style="color:#D8DEE9FF;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    };</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>共享字典缓存示例：</strong></p><div class="language-nginx line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-nginx;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">location</span><span style="color:#D8DEE9FF;"> ^~/api/cache/ {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    default_type </span><span style="color:#A3BE8C;">&#39;application/json&#39;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    content_by_lua_file</span><span style="color:#A3BE8C;"> &#39;/usr/local/openresty/nginx/lua/cache_handler.lua&#39;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>cache_handler.lua 文件内容：</strong></p><div class="language-lua line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-lua;"><code><span class="line"><span class="line"><span style="color:#616E88;">-- 获取共享字典</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">local</span><span style="color:#D8DEE9;"> cache</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> ngx</span><span style="color:#D8DEE9FF;">.shared.my_cache</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">-- 获取请求参数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">local</span><span style="color:#D8DEE9;"> key</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> ngx</span><span style="color:#D8DEE9FF;">.var.arg_key</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">local</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> ngx</span><span style="color:#D8DEE9FF;">.var.arg_value</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#81A1C1;"> not</span><span style="color:#D8DEE9;"> key</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    ngx</span><span style="color:#D8DEE9FF;">.status </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 400</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">{&quot;error&quot;: &quot;key parameter is required&quot;}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">end</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">-- GET请求：获取缓存</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9;"> ngx</span><span style="color:#D8DEE9FF;">.var.request_method </span><span style="color:#81A1C1;">==</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">GET</span><span style="color:#ECEFF4;">&quot; </span><span style="color:#81A1C1;">then</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    local</span><span style="color:#D8DEE9;"> cached_value</span><span style="color:#81A1C1;"> =</span><span style="color:#8FBCBB;"> cache</span><span style="color:#D8DEE9FF;">:</span><span style="color:#88C0D0;">get</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">key</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9;"> cached_value</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">{&quot;key&quot;: &quot;</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">, </span><span style="color:#D8DEE9;">key</span><span style="color:#D8DEE9FF;">, </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">&quot;, &quot;value&quot;: &quot;</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">, </span><span style="color:#D8DEE9;">cached_value</span><span style="color:#D8DEE9FF;">, </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">&quot;}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    else</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.status </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 404</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">{&quot;error&quot;: &quot;key not found&quot;}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    end</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">-- POST请求：设置缓存</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">elseif</span><span style="color:#D8DEE9;"> ngx</span><span style="color:#D8DEE9FF;">.var.request_method </span><span style="color:#81A1C1;">==</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">POST</span><span style="color:#ECEFF4;">&quot; </span><span style="color:#81A1C1;">then</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#81A1C1;"> not</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.status </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 400</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">{&quot;error&quot;: &quot;value parameter is required&quot;}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    end</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    local</span><span style="color:#D8DEE9;"> success</span><span style="color:#D8DEE9FF;">, </span><span style="color:#D8DEE9;">err</span><span style="color:#81A1C1;"> =</span><span style="color:#8FBCBB;"> cache</span><span style="color:#D8DEE9FF;">:</span><span style="color:#88C0D0;">set</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">key</span><span style="color:#D8DEE9FF;">, </span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">3600</span><span style="color:#D8DEE9FF;">) </span><span style="color:#616E88;">-- 缓存1小时</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9;"> success</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">{&quot;message&quot;: &quot;cache set successfully&quot;}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    else</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.status </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 500</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">{&quot;error&quot;: &quot;failed to set cache: </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">, </span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">, </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">&quot;}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    end</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">-- DELETE请求：删除缓存</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">elseif</span><span style="color:#D8DEE9;"> ngx</span><span style="color:#D8DEE9FF;">.var.request_method </span><span style="color:#81A1C1;">==</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">DELETE</span><span style="color:#ECEFF4;">&quot; </span><span style="color:#81A1C1;">then</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">    cache</span><span style="color:#D8DEE9FF;">:</span><span style="color:#88C0D0;">delete</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">key</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">{&quot;message&quot;: &quot;cache deleted&quot;}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">else</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    ngx</span><span style="color:#D8DEE9FF;">.status </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 405</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    ngx</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">say</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">{&quot;error&quot;: &quot;method not allowed&quot;}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">end</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态资源-cdn" tabindex="-1"><a class="header-anchor" href="#静态资源-cdn"><span>静态资源 CDN</span></a></h3><p>刷新方式</p><h3 id="全页面静态化-phantomjs" tabindex="-1"><a class="header-anchor" href="#全页面静态化-phantomjs"><span>全页面静态化 PhantomJS</span></a></h3><p>爬虫</p><p>初始化标记</p><p>CDN 部署</p><h2 id="流量削峰" tabindex="-1"><a class="header-anchor" href="#流量削峰"><span>流量削峰</span></a></h2><h3 id="秒杀令牌" tabindex="-1"><a class="header-anchor" href="#秒杀令牌"><span>秒杀令牌</span></a></h3><p>权限模块</p><p>令牌频次控制</p><h3 id="秒杀大闸" tabindex="-1"><a class="header-anchor" href="#秒杀大闸"><span>秒杀大闸</span></a></h3><p>库存联动</p><h3 id="队列泄洪" tabindex="-1"><a class="header-anchor" href="#队列泄洪"><span>队列泄洪</span></a></h3><h2 id="交易优化-商城秒杀" tabindex="-1"><a class="header-anchor" href="#交易优化-商城秒杀"><span>交易优化（商城秒杀）</span></a></h2><h3 id="高效验证" tabindex="-1"><a class="header-anchor" href="#高效验证"><span>高效验证</span></a></h3><p>缓存</p><p>索引</p><h3 id="缓存库存" tabindex="-1"><a class="header-anchor" href="#缓存库存"><span>缓存库存</span></a></h3><p>原子操作</p><p>一致性</p><h3 id="库存售罄防击穿" tabindex="-1"><a class="header-anchor" href="#库存售罄防击穿"><span>库存售罄防击穿</span></a></h3><p>缓存令牌</p><h3 id="交易异步化" tabindex="-1"><a class="header-anchor" href="#交易异步化"><span>交易异步化</span></a></h3><p>异步</p><p>轮询</p><h3 id="rocketmq-事务型消息" tabindex="-1"><a class="header-anchor" href="#rocketmq-事务型消息"><span>RocketMQ 事务型消息</span></a></h3><p>生产者</p><p>消费者</p><p>消息反查</p><h2 id="防刷限流" tabindex="-1"><a class="header-anchor" href="#防刷限流"><span>防刷限流</span></a></h2><h3 id="验证码" tabindex="-1"><a class="header-anchor" href="#验证码"><span>验证码</span></a></h3><h3 id="令牌桶限流" tabindex="-1"><a class="header-anchor" href="#令牌桶限流"><span>令牌桶限流</span></a></h3><p>ratelimiter</p><h3 id="防黄牛防刷" tabindex="-1"><a class="header-anchor" href="#防黄牛防刷"><span>防黄牛防刷</span></a></h3><p>设备指纹</p><hr><h2 id="_5-问题排查" tabindex="-1"><a class="header-anchor" href="#_5-问题排查"><span>5. 问题排查</span></a></h2><h3 id="_5-1-jvm-性能调优最佳实践" tabindex="-1"><a class="header-anchor" href="#_5-1-jvm-性能调优最佳实践"><span>5.1 JVM 性能调优最佳实践</span></a></h3><h4 id="_5-1-1-jvm-调优核心原则" tabindex="-1"><a class="header-anchor" href="#_5-1-1-jvm-调优核心原则"><span>5.1.1 JVM 调优核心原则</span></a></h4><p>JVM 调优是一个系统性工程，需要遵循以下核心原则：</p><table><thead><tr><th>调优步骤</th><th>具体措施</th><th>目标效果</th></tr></thead><tbody><tr><td><strong>1. 性能监控</strong></td><td>使用 JConsole、VisualVM、JProfiler</td><td>了解应用运行状态</td></tr><tr><td><strong>2. 参数调整</strong></td><td>调整堆大小、GC 策略、线程池</td><td>优化内存和并发性能</td></tr><tr><td><strong>3. GC 优化</strong></td><td>选择合适的垃圾收集器</td><td>减少 GC 暂停时间</td></tr><tr><td><strong>4. 代码优化</strong></td><td>减少对象创建、优化算法</td><td>降低 JVM 负担</td></tr><tr><td><strong>5. 存储优化</strong></td><td>使用缓存、内存映射文件</td><td>减少 IO 负担</td></tr><tr><td><strong>6. 内存检测</strong></td><td>及时发现和修复内存泄漏</td><td>保证应用稳定性</td></tr></tbody></table><h4 id="_5-1-2-垃圾收集器选择指南" tabindex="-1"><a class="header-anchor" href="#_5-1-2-垃圾收集器选择指南"><span>5.1.2 垃圾收集器选择指南</span></a></h4><table><thead><tr><th>GC 类型</th><th>适用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>Serial GC</strong></td><td>单核 CPU、小内存应用</td><td>简单、内存占用小</td><td>STW 时间长</td></tr><tr><td><strong>Parallel GC</strong></td><td>多核 CPU、吞吐量优先</td><td>高吞吐量</td><td>STW 时间较长</td></tr><tr><td><strong>CMS GC</strong></td><td>大内存、低延迟要求</td><td>并发收集、STW 时间短</td><td>内存碎片问题</td></tr><tr><td><strong>G1 GC</strong></td><td>大内存、可预测暂停时间</td><td>可控暂停时间</td><td>吞吐量略低</td></tr><tr><td><strong>ZGC/Shenandoah</strong></td><td>超大内存、极低延迟</td><td>超低延迟</td><td>新技术，稳定性待验证</td></tr></tbody></table><h3 id="_5-2-线上问题排查工具" tabindex="-1"><a class="header-anchor" href="#_5-2-线上问题排查工具"><span>5.2 线上问题排查工具</span></a></h3><h4 id="_5-2-1-jvm-诊断工具详解" tabindex="-1"><a class="header-anchor" href="#_5-2-1-jvm-诊断工具详解"><span>5.2.1 JVM 诊断工具详解</span></a></h4><p><strong>核心诊断工具：</strong></p><table><thead><tr><th>工具</th><th>功能</th><th>使用场景</th><th>命令示例</th></tr></thead><tbody><tr><td><strong>jps</strong></td><td>查看 Java 进程</td><td>获取进程 ID</td><td><code>jps -v | grep appname</code></td></tr><tr><td><strong>jinfo</strong></td><td>查看 JVM 参数</td><td>检查配置</td><td><code>jinfo -flags PID</code></td></tr><tr><td><strong>jstat</strong></td><td>查看 GC 统计</td><td>性能分析</td><td><code>jstat -gcutil PID 1s</code></td></tr><tr><td><strong>jstack</strong></td><td>查看线程栈</td><td>死锁分析</td><td><code>jstack -l PID</code></td></tr><tr><td><strong>jmap</strong></td><td>内存分析</td><td>OOM 问题排查</td><td><code>jmap -dump:file=heap.hprof PID</code></td></tr></tbody></table><h4 id="_5-2-2-jstat-命令详解" tabindex="-1"><a class="header-anchor" href="#_5-2-2-jstat-命令详解"><span>5.2.2 jstat 命令详解</span></a></h4><p><strong>GC 统计信息解读：</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#88C0D0;">jstat</span><span style="color:#A3BE8C;"> -gcutil</span><span style="color:#A3BE8C;"> PID</span><span style="color:#A3BE8C;"> 1s</span><span style="color:#B48EAD;"> 10</span><span style="color:#616E88;">  # 每秒输出一次，共10次</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>输出字段说明：</strong></p><table><thead><tr><th>字段</th><th>含义</th><th>正常范围</th></tr></thead><tbody><tr><td><strong>S0</strong></td><td>Survivor 0 区使用率</td><td>0-100%</td></tr><tr><td><strong>S1</strong></td><td>Survivor 1 区使用率</td><td>0-100%</td></tr><tr><td><strong>E</strong></td><td>Eden 区使用率</td><td>通常较高</td></tr><tr><td><strong>O</strong></td><td>老年代使用率</td><td>&lt;80%</td></tr><tr><td><strong>M</strong></td><td>元数据区使用率</td><td>&lt;90%</td></tr><tr><td><strong>CCS</strong></td><td>压缩类空间使用率</td><td>&lt;90%</td></tr><tr><td><strong>YGC</strong></td><td>Young GC 次数</td><td>监控增长趋势</td></tr><tr><td><strong>YGCT</strong></td><td>Young GC 总时间(秒)</td><td>单次&lt;100ms</td></tr><tr><td><strong>FGC</strong></td><td>Full GC 次数</td><td>尽量避免</td></tr><tr><td><strong>FGCT</strong></td><td>Full GC 总时间(秒)</td><td>单次&lt;1s</td></tr><tr><td><strong>GCT</strong></td><td>总 GC 时间(秒)</td><td>&lt;总运行时间 5%</td></tr></tbody></table><h4 id="_5-2-3-线程栈分析" tabindex="-1"><a class="header-anchor" href="#_5-2-3-线程栈分析"><span>5.2.3 线程栈分析</span></a></h4><p><strong>jstack 命令使用：</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#616E88;"># 生成线程栈快照</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">jstack</span><span style="color:#A3BE8C;"> -l</span><span style="color:#A3BE8C;"> PID</span><span style="color:#81A1C1;"> &gt;</span><span style="color:#A3BE8C;"> thread_dump.txt</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 分析死锁</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">jstack</span><span style="color:#A3BE8C;"> PID</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> grep</span><span style="color:#A3BE8C;"> -A</span><span style="color:#B48EAD;"> 5</span><span style="color:#A3BE8C;"> -B</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Found deadlock</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 分析高CPU使用的线程</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">top</span><span style="color:#A3BE8C;"> -Hp</span><span style="color:#A3BE8C;"> PID</span><span style="color:#616E88;">  # 找到高CPU线程ID</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">printf</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">%x\\n</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> THREAD_ID</span><span style="color:#616E88;">  # 转换为16进制</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">jstack</span><span style="color:#A3BE8C;"> PID</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> grep</span><span style="color:#A3BE8C;"> -A</span><span style="color:#B48EAD;"> 10</span><span style="color:#A3BE8C;"> 0x[16进制线程ID]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-oom-问题排查" tabindex="-1"><a class="header-anchor" href="#_5-3-oom-问题排查"><span>5.3 OOM 问题排查</span></a></h3><h4 id="_5-3-1-oom-预防配置" tabindex="-1"><a class="header-anchor" href="#_5-3-1-oom-预防配置"><span>5.3.1 OOM 预防配置</span></a></h4><p><strong>启动参数配置：</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#88C0D0;">java</span><span style="color:#A3BE8C;"> -Xms2048m</span><span style="color:#A3BE8C;"> -Xmx4096m</span><span style="color:#EBCB8B;"> \\</span></span></span>
<span class="line"><span class="line"><span style="color:#A3BE8C;">     -XX:+HeapDumpOnOutOfMemoryError</span><span style="color:#EBCB8B;"> \\</span></span></span>
<span class="line"><span class="line"><span style="color:#A3BE8C;">     -XX:HeapDumpPath=/var/log/heapdump/</span><span style="color:#EBCB8B;"> \\</span></span></span>
<span class="line"><span class="line"><span style="color:#A3BE8C;">     -XX:+PrintGCDetails</span><span style="color:#EBCB8B;"> \\</span></span></span>
<span class="line"><span class="line"><span style="color:#A3BE8C;">     -XX:+PrintGCTimeStamps</span><span style="color:#EBCB8B;"> \\</span></span></span>
<span class="line"><span class="line"><span style="color:#A3BE8C;">     -Xloggc:/var/log/gc.log</span><span style="color:#EBCB8B;"> \\</span></span></span>
<span class="line"><span class="line"><span style="color:#A3BE8C;">     -jar</span><span style="color:#A3BE8C;"> application.jar</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数说明：</strong></p><table><thead><tr><th>参数</th><th>作用</th><th>推荐值</th></tr></thead><tbody><tr><td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>OOM 时自动生成堆转储</td><td>必须启用</td></tr><tr><td><code>-XX:HeapDumpPath</code></td><td>堆转储文件路径</td><td>可写目录</td></tr><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印详细 GC 信息</td><td>生产环境启用</td></tr><tr><td><code>-Xloggc</code></td><td>GC 日志文件路径</td><td>独立文件</td></tr></tbody></table><h4 id="_5-3-2-堆转储文件分析" tabindex="-1"><a class="header-anchor" href="#_5-3-2-堆转储文件分析"><span>5.3.2 堆转储文件分析</span></a></h4><p><strong>使用 JProfiler 分析堆转储：</strong></p><ol><li><p><strong>内存泄漏检测</strong></p><ul><li>查看对象引用链</li><li>分析大对象占用</li><li>检查集合类大小</li></ul></li><li><p><strong>内存使用模式分析</strong></p><ul><li>对象分配热点</li><li>内存增长趋势</li><li>GC 效率评估</li></ul></li></ol><p><strong>Memory Analyzer (MAT) 使用：</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#616E88;"># 安装MAT</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">wget</span><span style="color:#A3BE8C;"> https://eclipse.org/mat/downloads.php</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 分析堆转储文件</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">./MemoryAnalyzer</span><span style="color:#A3BE8C;"> -vmargs</span><span style="color:#A3BE8C;"> -Xmx4g</span><span style="color:#A3BE8C;"> -data</span><span style="color:#A3BE8C;"> workspace</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-性能监控与告警" tabindex="-1"><a class="header-anchor" href="#_5-4-性能监控与告警"><span>5.4 性能监控与告警</span></a></h3><h4 id="_5-4-1-关键指标监控" tabindex="-1"><a class="header-anchor" href="#_5-4-1-关键指标监控"><span>5.4.1 关键指标监控</span></a></h4><p><strong>核心性能指标：</strong></p><table><thead><tr><th>指标分类</th><th>监控指标</th><th>告警阈值</th><th>处理建议</th></tr></thead><tbody><tr><td><strong>内存</strong></td><td>堆内存使用率</td><td>&gt;85%</td><td>调整堆大小或优化代码</td></tr><tr><td><strong>GC</strong></td><td>Full GC 频率</td><td>&gt;1 次/小时</td><td>优化 GC 策略</td></tr><tr><td><strong>线程</strong></td><td>线程数量</td><td>&gt;1000</td><td>检查线程泄漏</td></tr><tr><td><strong>CPU</strong></td><td>CPU 使用率</td><td>&gt;80%</td><td>性能优化或扩容</td></tr><tr><td><strong>响应</strong></td><td>接口响应时间</td><td>&gt;1s</td><td>代码优化或缓存</td></tr></tbody></table><h4 id="_5-4-2-自动化监控脚本" tabindex="-1"><a class="header-anchor" href="#_5-4-2-自动化监控脚本"><span>5.4.2 自动化监控脚本</span></a></h4><p><strong>JVM 监控脚本示例：</strong></p><div class="language-bash line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-bash;"><code><span class="line"><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">APP_NAME</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">user-service</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">PID</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">$(</span><span style="color:#88C0D0;">ps</span><span style="color:#A3BE8C;"> aux</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> grep</span><span style="color:#D8DEE9;"> $APP_NAME</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> grep</span><span style="color:#A3BE8C;"> -v</span><span style="color:#A3BE8C;"> grep</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> awk</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">{print $2}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -z</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$PID</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Application not running</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    exit</span><span style="color:#B48EAD;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">fi</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 获取JVM指标</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">HEAP_USED</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">$(</span><span style="color:#88C0D0;">jstat</span><span style="color:#A3BE8C;"> -gc</span><span style="color:#D8DEE9;"> $PID</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> tail</span><span style="color:#A3BE8C;"> -1</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> awk</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">{print ($3+$4+$6+$8)/($3+$4+$5+$6+$7+$8)*100}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">GC_COUNT</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">$(</span><span style="color:#88C0D0;">jstat</span><span style="color:#A3BE8C;"> -gc</span><span style="color:#D8DEE9;"> $PID</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> tail</span><span style="color:#A3BE8C;"> -1</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> awk</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">{print $12+$13}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">THREAD_COUNT</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">$(</span><span style="color:#88C0D0;">jstack</span><span style="color:#D8DEE9;"> $PID</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> grep</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">^</span><span style="color:#EBCB8B;">\\&quot;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> wc</span><span style="color:#A3BE8C;"> -l</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"># 告警检查</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> ((</span><span style="color:#D8DEE9FF;"> $(</span><span style="color:#D8DEE9;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$HEAP_USED</span><span style="color:#A3BE8C;"> &gt; 85</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> |</span><span style="color:#D8DEE9;"> bc</span><span style="color:#81A1C1;"> -</span><span style="color:#D8DEE9;">l</span><span style="color:#ECEFF4;">) )</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ALERT: High heap usage: </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">HEAP_USED</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">%</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">fi</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;"> $THREAD_COUNT</span><span style="color:#81A1C1;"> -gt</span><span style="color:#B48EAD;"> 1000</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ALERT: High thread count: </span><span style="color:#D8DEE9;">$THREAD_COUNT</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">fi</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Heap Usage: </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">HEAP_USED</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">%, Threads: </span><span style="color:#D8DEE9;">$THREAD_COUNT</span><span style="color:#A3BE8C;">, GC Count: </span><span style="color:#D8DEE9;">$GC_COUNT</span><span style="color:#ECEFF4;">&quot;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本文档全面介绍了 Java 性能调优的各个方面，包括：</p><ol><li><strong>异常处理</strong>：深入理解 Java 异常体系和堆栈分析</li><li><strong>JVM 调优</strong>：内存管理、垃圾回收、参数配置</li><li><strong>性能优化</strong>：缓存策略、分布式部署、配置优化</li><li><strong>分布式扩展</strong>：负载均衡、会话管理、微服务架构</li><li><strong>问题排查</strong>：监控工具、性能分析、故障诊断</li></ol><p>通过系统化的调优方法和工具使用，可以显著提升 Java 应用的性能和稳定性。在实际应用中，应该根据具体业务场景选择合适的优化策略，并建立完善的监控和告警机制。</p>`,358)]))}const c=n(p,[["render",i],["__file","Java调优.html.vue"]]),t=JSON.parse('{"path":"/md/interview/java/basic/Java%E8%B0%83%E4%BC%98.html","title":"Java 性能调优与问题排查指南","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"基础相关","slug":"基础相关","link":"#基础相关","children":[{"level":3,"title":"Java 语言具有哪些特点","slug":"java-语言具有哪些特点","link":"#java-语言具有哪些特点","children":[]},{"level":3,"title":"JDK 与 JRE","slug":"jdk-与-jre","link":"#jdk-与-jre","children":[]},{"level":3,"title":"Java 基本数据类型","slug":"java-基本数据类型","link":"#java-基本数据类型","children":[]},{"level":3,"title":"简述 Java 访问修饰符","slug":"简述-java-访问修饰符","link":"#简述-java-访问修饰符","children":[]},{"level":3,"title":"Java 代码块执行顺序","slug":"java-代码块执行顺序","link":"#java-代码块执行顺序","children":[]},{"level":3,"title":"Java 中类、对象、引用三者是什么关系","slug":"java-中类、对象、引用三者是什么关系","link":"#java-中类、对象、引用三者是什么关系","children":[]}]},{"level":2,"title":"类","slug":"类","link":"#类","children":[{"level":3,"title":"简述类","slug":"简述类","link":"#简述类","children":[]},{"level":3,"title":"内部类相关","slug":"内部类相关","link":"#内部类相关","children":[]},{"level":3,"title":"包装类","slug":"包装类","link":"#包装类","children":[]}]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[{"level":3,"title":"简述 Java 中 Class 对象","slug":"简述-java-中-class-对象","link":"#简述-java-中-class-对象","children":[]},{"level":3,"title":"创建对象有哪些方式","slug":"创建对象有哪些方式","link":"#创建对象有哪些方式","children":[]},{"level":3,"title":"一个对象的内存布局是怎么样的?","slug":"一个对象的内存布局是怎么样的","link":"#一个对象的内存布局是怎么样的","children":[]}]},{"level":2,"title":"引用","slug":"引用","link":"#引用","children":[{"level":3,"title":"四种引用类型?","slug":"四种引用类型","link":"#四种引用类型","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？","slug":"是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用","link":"#是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用","children":[]},{"level":3,"title":"抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized 修饰","slug":"抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰","link":"#抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰","children":[]},{"level":3,"title":"Object 中有哪些公共方法？","slug":"object-中有哪些公共方法","link":"#object-中有哪些公共方法","children":[]},{"level":3,"title":"深拷贝、浅拷贝是什么？","slug":"深拷贝、浅拷贝是什么","link":"#深拷贝、浅拷贝是什么","children":[]},{"level":3,"title":"如何实现对象克隆？","slug":"如何实现对象克隆","link":"#如何实现对象克隆","children":[]},{"level":3,"title":"JDK 8 为什么要 hashcode 异或其右移十六位的值","slug":"jdk-8-为什么要-hashcode-异或其右移十六位的值","link":"#jdk-8-为什么要-hashcode-异或其右移十六位的值","children":[]},{"level":3,"title":"两个对象值相同(x.equals(y) == true)，但却可有不同的 hash code，这句话对不对？","slug":"两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对","link":"#两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对","children":[]},{"level":3,"title":"实现高质量的 equals 方法的诀窍包括","slug":"实现高质量的-equals-方法的诀窍包括","link":"#实现高质量的-equals-方法的诀窍包括","children":[]},{"level":3,"title":"Java 中 == 和 eqauls()的区别","slug":"java-中-和-eqauls-的区别","link":"#java-中-和-eqauls-的区别","children":[]},{"level":3,"title":"equals()和 hashcode 的区别","slug":"equals-和-hashcode-的区别","link":"#equals-和-hashcode-的区别","children":[]}]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"简述 Java 异常的分类","slug":"简述-java-异常的分类","link":"#简述-java-异常的分类","children":[]},{"level":3,"title":"常见的异常有哪些？","slug":"常见的异常有哪些","link":"#常见的异常有哪些","children":[]},{"level":3,"title":"异常要怎么解决？","slug":"异常要怎么解决","link":"#异常要怎么解决","children":[]},{"level":3,"title":"运行时异常与受检异常有何异同？","slug":"运行时异常与受检异常有何异同","link":"#运行时异常与受检异常有何异同","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"简述注解","slug":"简述注解","link":"#简述注解","children":[]},{"level":3,"title":"简述元注解","slug":"简述元注解","link":"#简述元注解","children":[]}]},{"level":2,"title":"关键字相关","slug":"关键字相关","link":"#关键字相关","children":[{"level":3,"title":"final、finally 和 finalize 的区别是什么？","slug":"final、finally-和-finalize-的区别是什么","link":"#final、finally-和-finalize-的区别是什么","children":[]},{"level":3,"title":"Java 中的 final 关键字有哪些用法？","slug":"java-中的-final-关键字有哪些用法","link":"#java-中的-final-关键字有哪些用法","children":[]},{"level":3,"title":"volatile 有什么作用？","slug":"volatile-有什么作用","link":"#volatile-有什么作用","children":[]},{"level":3,"title":"简述 throw 与 throws 的区别","slug":"简述-throw-与-throws-的区别","link":"#简述-throw-与-throws-的区别","children":[]},{"level":3,"title":"出现在 Java 程序中的 finally 代码块是否一定会执行？","slug":"出现在-java-程序中的-finally-代码块是否一定会执行","link":"#出现在-java-程序中的-finally-代码块是否一定会执行","children":[]},{"level":3,"title":"switch 是否能作用在 byte 上，是否能作用在 long、float 上，是否能作用在 String 上？","slug":"switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上","link":"#switch-是否能作用在-byte-上-是否能作用在-long、float-上-是否能作用在-string-上","children":[]},{"level":3,"title":"float f=3.4 是否正确？","slug":"float-f-3-4-是否正确","link":"#float-f-3-4-是否正确","children":[]},{"level":3,"title":"Java 语言中关键字 static 的作用是什么？","slug":"java-语言中关键字-static-的作用是什么","link":"#java-语言中关键字-static-的作用是什么","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"short s1 = 1; s1 = s1 + 1; 与 short s1 = 1; s1 += 1;有错吗","slug":"short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗","link":"#short-s1-1-s1-s1-1-与-short-s1-1-s1-1-有错吗","children":[]},{"level":3,"title":"&和&&的区别","slug":"和-的区别","link":"#和-的区别","children":[]},{"level":3,"title":"为什么要把 String 设计为不可变","slug":"为什么要把-string-设计为不可变","link":"#为什么要把-string-设计为不可变","children":[]},{"level":3,"title":"简述 String/StringBuffer 与 StringBuilder","slug":"简述-string-stringbuffer-与-stringbuilder","link":"#简述-string-stringbuffer-与-stringbuilder","children":[]},{"level":3,"title":"Java 中一维数组和二维数组的声明方式？","slug":"java-中一维数组和二维数组的声明方式","link":"#java-中一维数组和二维数组的声明方式","children":[]},{"level":3,"title":"为什么 hash 值要与 length-1 相与？","slug":"为什么-hash-值要与-length-1-相与","link":"#为什么-hash-值要与-length-1-相与","children":[]},{"level":3,"title":"静态变量和实例变量的区别","slug":"静态变量和实例变量的区别","link":"#静态变量和实例变量的区别","children":[]}]},{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"1. 异常处理","slug":"_1-异常处理","link":"#_1-异常处理","children":[{"level":3,"title":"1.1 Java 异常体系结构","slug":"_1-1-java-异常体系结构","link":"#_1-1-java-异常体系结构","children":[]},{"level":3,"title":"1.2 Throwable 类核心方法详解","slug":"_1-2-throwable-类核心方法详解","link":"#_1-2-throwable-类核心方法详解","children":[]},{"level":3,"title":"1.3 JVM 内存结构与异常","slug":"_1-3-jvm-内存结构与异常","link":"#_1-3-jvm-内存结构与异常","children":[]},{"level":3,"title":"1.4 异常堆栈信息分析","slug":"_1-4-异常堆栈信息分析","link":"#_1-4-异常堆栈信息分析","children":[]},{"level":3,"title":"3.2 Tomcat 配置优化","slug":"_3-2-tomcat-配置优化","link":"#_3-2-tomcat-配置优化","children":[]}]},{"level":2,"title":"4. 分布式扩展","slug":"_4-分布式扩展","link":"#_4-分布式扩展","children":[{"level":3,"title":"4.1 Nginx 负载均衡与反向代理","slug":"_4-1-nginx-负载均衡与反向代理","link":"#_4-1-nginx-负载均衡与反向代理","children":[]},{"level":3,"title":"4.2 Java 服务分布式部署","slug":"_4-2-java-服务分布式部署","link":"#_4-2-java-服务分布式部署","children":[]},{"level":3,"title":"4.3 分布式会话管理","slug":"_4-3-分布式会话管理","link":"#_4-3-分布式会话管理","children":[]},{"level":3,"title":"4.4 查询优化","slug":"_4-4-查询优化","link":"#_4-4-查询优化","children":[]},{"level":3,"title":"4.5 OpenResty + Lua 扩展","slug":"_4-5-openresty-lua-扩展","link":"#_4-5-openresty-lua-扩展","children":[]},{"level":3,"title":"静态资源 CDN","slug":"静态资源-cdn","link":"#静态资源-cdn","children":[]},{"level":3,"title":"全页面静态化 PhantomJS","slug":"全页面静态化-phantomjs","link":"#全页面静态化-phantomjs","children":[]}]},{"level":2,"title":"流量削峰","slug":"流量削峰","link":"#流量削峰","children":[{"level":3,"title":"秒杀令牌","slug":"秒杀令牌","link":"#秒杀令牌","children":[]},{"level":3,"title":"秒杀大闸","slug":"秒杀大闸","link":"#秒杀大闸","children":[]},{"level":3,"title":"队列泄洪","slug":"队列泄洪","link":"#队列泄洪","children":[]}]},{"level":2,"title":"交易优化（商城秒杀）","slug":"交易优化-商城秒杀","link":"#交易优化-商城秒杀","children":[{"level":3,"title":"高效验证","slug":"高效验证","link":"#高效验证","children":[]},{"level":3,"title":"缓存库存","slug":"缓存库存","link":"#缓存库存","children":[]},{"level":3,"title":"库存售罄防击穿","slug":"库存售罄防击穿","link":"#库存售罄防击穿","children":[]},{"level":3,"title":"交易异步化","slug":"交易异步化","link":"#交易异步化","children":[]},{"level":3,"title":"RocketMQ 事务型消息","slug":"rocketmq-事务型消息","link":"#rocketmq-事务型消息","children":[]}]},{"level":2,"title":"防刷限流","slug":"防刷限流","link":"#防刷限流","children":[{"level":3,"title":"验证码","slug":"验证码","link":"#验证码","children":[]},{"level":3,"title":"令牌桶限流","slug":"令牌桶限流","link":"#令牌桶限流","children":[]},{"level":3,"title":"防黄牛防刷","slug":"防黄牛防刷","link":"#防黄牛防刷","children":[]}]},{"level":2,"title":"5. 问题排查","slug":"_5-问题排查","link":"#_5-问题排查","children":[{"level":3,"title":"5.1 JVM 性能调优最佳实践","slug":"_5-1-jvm-性能调优最佳实践","link":"#_5-1-jvm-性能调优最佳实践","children":[]},{"level":3,"title":"5.2 线上问题排查工具","slug":"_5-2-线上问题排查工具","link":"#_5-2-线上问题排查工具","children":[]},{"level":3,"title":"5.3 OOM 问题排查","slug":"_5-3-oom-问题排查","link":"#_5-3-oom-问题排查","children":[]},{"level":3,"title":"5.4 性能监控与告警","slug":"_5-4-性能监控与告警","link":"#_5-4-性能监控与告警","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1711074643000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":5,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/interview/java/basic/Java调优.md"}');export{c as comp,t as data};
