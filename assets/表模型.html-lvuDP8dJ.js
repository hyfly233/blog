import{_ as l,c as n,f as a,o as e}from"./app-chPKMbRn.js";const i={};function p(r,s){return e(),n("div",null,s[0]||(s[0]=[a(`<h2 id="表模型分类" tabindex="-1"><a class="header-anchor" href="#表模型分类"><span>表模型分类</span></a></h2><p>在 Doris 中支持三种表模型：</p><ul><li>明细模型（Duplicate Key Model）：允许指定的 Key 列重复，Doirs 存储层保留所有写入的数据，适用于必须保留所有原始数据记录的情况；</li><li>主键模型（Unique Key Model）：每一行的 Key 值唯一，可确保给定的 Key 列不会存在重复行，Doris 存储层对每个 key 只保留最新写入的数据，适用于数据更新的情况；</li><li>聚合模型（Aggregate Key Model）：可根据 Key 列聚合数据，Doris 存储层保留聚合后的数据，从而可以减少存储空间和提升查询性能；通常用于需要汇总或聚合信息（如总数或平均值）的情况。</li></ul><p>在建表后，表模型的属性已经确认，无法修改。针对业务选择合适的模型至关重要：</p><ul><li>Duplicate Key：适合任意维度的 Ad-hoc 查询。虽然同样无法利用预聚合的特性，但是不受聚合模型的约束，可以发挥列存模型的优势（只读取相关列，而不需要读取所有 Key 列）。</li><li>Unique Key：针对需要唯一主键约束的场景，可以保证主键唯一性约束。但是无法利用 ROLLUP 等预聚合带来的查询优势。</li><li>Aggregate Key：可以通过预聚合，极大地降低聚合查询时所需扫描的数据量和查询的计算量，非常适合有固定模式的报表类查询场景。但是该模型对 count(*) 查询很不友好。同时因为固定了 Value 列上的聚合方式，在进行其他类型的聚合查询时，需要考虑语意正确性。</li><li>部分列更新：请查阅文档主键模型部分列更新与聚合模型部份列更新获取相关使用建议。</li></ul><h2 id="排序键" tabindex="-1"><a class="header-anchor" href="#排序键"><span>排序键</span></a></h2><p>在 Doris 中，数据以列的形式存储，一张表可以分为 key 列与 value 列。其中，key 列用于分组与排序，value 列用于参与聚合。Key 列可以是一个或多个字段，在建表时，按照各种表模型中，Aggregate Key、Unique Key 和 Duplicate Key 的列进行数据排序存储。</p><p>不同的表模型都需要在建表时指定 Key 列，分别有不同的意义：对于 Duplicate Key 模型，Key 列表示排序，没有唯一键的约束。在 Aggregate Key 与 Unique Key 模型中，会基于 Key 列进行聚合，Key 列既有排序的能力，又有唯一键的约束。</p><p>合理使用排序键可以带来以下收益：</p><ul><li>加速查询性能：排序键有助于减少数据扫描量。对于范围查询或过滤查询，可以利用排序键直接定位数据的位置。对于需要需要进行排序的查询，也可以利用排序键进行排序加速；</li><li>数据压缩优化：数据按排序键有序存储会提高压缩的效率，相似的数据会聚集在一起，压缩率会大幅度提高，从而减小数据的存储空间。</li><li>减少去重成本：当使用 Unique Key 表时，通过排序键，Doris 能更有效地进行去重操作，保证数据唯一性。</li></ul><p>选择排序键时，可以遵循以下建议：</p><ul><li>Key 列必须在所有 Value 列之前。</li><li>尽量选择整型类型。因为整型类型的计算和查找效率远高于字符串。</li><li>对于不同长度的整型类型的选择原则，遵循够用即可。</li><li>对于 VARCHAR 和 STRING 类型的长度，遵循够用即可原则。</li></ul><h2 id="明细模型" tabindex="-1"><a class="header-anchor" href="#明细模型"><span>明细模型</span></a></h2><p>默认建表模型，通过 DUPLICATE KEY 指定数据存储的排序列，以优化常用查询。一般建议选择三列或更少的列作为排序键</p><p>明细模型具有以下特点：</p><ul><li>保留原始数据：明细模型保留了全量的原始数据，适合于存储与查询原始数据。对于需要进行详细数据分析的应用场景，建议使用明细模型，以避免数据丢失的风险；</li><li>不去重也不聚合：与聚合模型与主键模型不同，明细模型不会对数据进行去重与聚合操作。即使两条相同的数据，每次插入时也会被完整保留；</li><li>灵活的数据查询：明细模型保留了全量的原始数据，可以从完整数据中提取细节，基于全量数据做任意维度的聚合操作，从而进行元数数据的审计及细粒度的分析。</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><p>一般明细模型中的数据只进行追加，旧数据不会更新。明细模型适用于需要存储全量原始数据的场景：</p><ul><li>日志存储：用于存储各类的程序操作日志，如访问日志、错误日志等。每一条数据都需要被详细记录，方便后续的审计与分析；</li><li>用户行为数据：在分析用户行为时，如点击数据、用户访问轨迹等，需要保留用户的详细行为，方便后续构建用户画像及对行为路径进行详细分析；</li><li>交易数据：在某些存储交易行为或订单数据时，交易结束时一般不会发生数据变更。明细模型适合保留这一类交易信息，不遗漏任意一笔记录，方便对交易进行精确的对账。</li></ul><h2 id="主键模型" tabindex="-1"><a class="header-anchor" href="#主键模型"><span>主键模型</span></a></h2><p>该模型保证 Key 列的唯一性，插入或更新数据时，新数据会覆盖具有相同 Key 的旧数据，确保数据记录为最新。与其他数据模型相比，主键模型适用于数据的更新场景，在插入过程中进行主键级别的更新覆盖。</p><p>主键模型有以下特点：</p><ul><li>基于主键进行 UPSERT：在插入数据时，主键重复的数据会更新，主键不存在的记录会插入；</li><li>基于主键进行去重：主键模型中的 Key 列具有唯一性，会对根据主键列对数据进行去重操作；</li><li>高频数据更新：支持高频数据更新场景，同时平衡数据更新性能与查询性能。</li></ul><h3 id="使用场景-1" tabindex="-1"><a class="header-anchor" href="#使用场景-1"><span>使用场景</span></a></h3><ul><li>高频数据更新：适用于上游 OLTP 数据库中的维度表，实时同步更新记录，并高效执行 UPSERT 操作；</li><li>数据高效去重：如广告投放和客户关系管理系统中，使用主键模型可以基于用户 ID 高效去重；</li><li>需要部分列更新：如画像标签场景需要变更频繁改动的动态标签，消费订单场景需要改变交易的状态。通过主键模型部分列更新能力可以完成某几列的变更操作。</li></ul><h3 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h3><p>在 Doris 中主键模型有两种实现方式：</p><ul><li>写时合并（merge-on-write）：自 1.2 版本起，Doris 默认使用写时合并模式，数据在写入时立即合并相同 Key 的记录，确保存储的始终是最新数据。写时合并兼顾查询和写入性能，避免多个版本的数据合并，并支持谓词下推到存储层。大多数场景推荐使用此模式；</li><li>读时合并（merge-on-read）：在 1.2 版本前，Doris 中的主键模型默认使用读时合并模式，数据在写入时并不进行合并，以增量的方式被追加存储，在 Doris 内保留多个版本。查询或 Compaction 时，会对数据进行相同 Key 的版本合并。读时合并适合写多读少的场景，在查询是需要进行多个版本合并，谓词无法下推，可能会影响到查询速度。</li></ul><p>在 Doris 中基于主键模型更新有两种语义：</p><ul><li>整行更新：Unique Key 模型默认的更新语义为整行UPSERT，即 UPDATE OR INSERT，该行数据的 Key 如果存在，则进行更新，如果不存在，则进行新数据插入。在整行 UPSERT 语义下，即使用户使用 Insert Into 指定部分列进行写入，Doris 也会在 Planner 中将未提供的列使用 NULL 值或者默认值进行填充。</li><li>部分列更新：如果用户希望更新部分字段，需要使用写时合并实现，并通过特定的参数来开启部分列更新的支持。</li></ul><h3 id="写时合并" tabindex="-1"><a class="header-anchor" href="#写时合并"><span>写时合并</span></a></h3><p>在建表时，使用 UNIQUE KEY 关键字可以指定主键表。通过显示开启 enable_unique_key_merge_on_write 属性可以指定写时合并模式。自 Doris 2.1 版本以后，默认开启写时合并</p><div class="language-sql line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-sql;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">CREATE</span><span style="color:#81A1C1;"> TABLE</span><span style="color:#88C0D0;"> IF</span><span style="color:#81A1C1;"> NOT</span><span style="color:#81A1C1;"> EXISTS</span><span style="color:#D8DEE9FF;"> example_tbl_unique</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    user_id         LARGEINT        </span><span style="color:#81A1C1;">NOT NULL</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    user_name       </span><span style="color:#81A1C1;">VARCHAR</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">50</span><span style="color:#D8DEE9FF;">)     </span><span style="color:#81A1C1;">NOT NULL</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    city            </span><span style="color:#81A1C1;">VARCHAR</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">20</span><span style="color:#D8DEE9FF;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    age             </span><span style="color:#81A1C1;">SMALLINT</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    sex             </span><span style="color:#81A1C1;">TINYINT</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">UNIQUE</span><span style="color:#81A1C1;"> KEY</span><span style="color:#D8DEE9FF;">(user_id, user_name)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">DISTRIBUTED</span><span style="color:#81A1C1;"> BY</span><span style="color:#81A1C1;"> HASH</span><span style="color:#D8DEE9FF;">(user_id) BUCKETS </span><span style="color:#B48EAD;">10</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">PROPERTIES (</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#A3BE8C;">enable_unique_key_merge_on_write</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">true</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读时合并" tabindex="-1"><a class="header-anchor" href="#读时合并"><span>读时合并</span></a></h3><p>在建表时，使用 UNIQUE KEY 关键字可以指定主键表。通过显示关闭 enable_unique_key_merge_on_write 属性可以指定读时合并模式。在 Doris 2.1 版本之前，默认开启读时合并：</p><div class="language-sql line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-sql;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">CREATE</span><span style="color:#81A1C1;"> TABLE</span><span style="color:#88C0D0;"> IF</span><span style="color:#81A1C1;"> NOT</span><span style="color:#81A1C1;"> EXISTS</span><span style="color:#D8DEE9FF;"> example_tbl_unique</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    user_id         LARGEINT        </span><span style="color:#81A1C1;">NOT NULL</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    username        </span><span style="color:#81A1C1;">VARCHAR</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">50</span><span style="color:#D8DEE9FF;">)     </span><span style="color:#81A1C1;">NOT NULL</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    city            </span><span style="color:#81A1C1;">VARCHAR</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">20</span><span style="color:#D8DEE9FF;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    age             </span><span style="color:#81A1C1;">SMALLINT</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    sex             </span><span style="color:#81A1C1;">TINYINT</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">UNIQUE</span><span style="color:#81A1C1;"> KEY</span><span style="color:#D8DEE9FF;">(user_id, username)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">DISTRIBUTED</span><span style="color:#81A1C1;"> BY</span><span style="color:#81A1C1;"> HASH</span><span style="color:#D8DEE9FF;">(user_id) BUCKETS </span><span style="color:#B48EAD;">10</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">PROPERTIES (</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#A3BE8C;">enable_unique_key_merge_on_write</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">false</span><span style="color:#ECEFF4;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li>Unique 表的实现方式只能在建表时确定，无法通过 schema change 进行修改；</li><li>在整行 UPSERT 语义下，即使用户使用 insert into 指定部分列进行写入，Doris 也会在 Planner 中将未提供的列使用 NULL 值或者默认值进行填充；</li><li>部分列更新。如果用户希望更新部分字段，需要使用写时合并实现，并通过特定的参数来开启部分列更新的支持。请查阅文档部分列更新获取相关使用建议。</li></ul><h3 id="局限性" tabindex="-1"><a class="header-anchor" href="#局限性"><span>局限性</span></a></h3><h2 id="聚合模型" tabindex="-1"><a class="header-anchor" href="#聚合模型"><span>聚合模型</span></a></h2><p>Doris 的聚合模型专为高效处理大规模数据查询中的聚合操作设计。它通过预聚合数据，减少重复计算，提升查询性能。聚合模型只存储聚合后的数据，节省存储空间并加速查询。</p><h3 id="使用场景-2" tabindex="-1"><a class="header-anchor" href="#使用场景-2"><span>使用场景</span></a></h3><ul><li>明细数据进行汇总：用于电商平台的月销售业绩、金融风控的客户交易总额、广告投放的点击量等业务场景中，进行多维度汇总；</li><li>不需要查询原始明细数据：如驾驶舱报表、用户交易行为分析等，原始数据存储在数据湖中，仅需存储汇总后的数据。</li></ul><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>每一次数据导入会在聚合模型内形成一个版本，在 Compaction 阶段进行版本合并，在查询时会按照主键进行数据聚合：</p><ol><li>数据导入阶段：数据按批次导入，每批次生成一个版本，并对相同聚合键的数据进行初步聚合（如求和、计数）；</li><li>后台文件合并阶段（Compaction）：多个版本文件会定期合并，减少冗余并优化存储；</li><li>查询阶段：查询时，系统会聚合同一聚合键的数据，确保查询结果准确。</li></ol><h3 id="建表说明" tabindex="-1"><a class="header-anchor" href="#建表说明"><span>建表说明</span></a></h3><p>使用 AGGREGATE KEY 关键字在建表时指定聚合模型，并指定 Key 列用于聚合 Value 列。</p><div class="language-sql line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-sql;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">CREATE</span><span style="color:#81A1C1;"> TABLE</span><span style="color:#88C0D0;"> IF</span><span style="color:#81A1C1;"> NOT</span><span style="color:#81A1C1;"> EXISTS</span><span style="color:#D8DEE9FF;"> example_tbl_agg</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    user_id             LARGEINT    </span><span style="color:#81A1C1;">NOT NULL</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    load_dt             </span><span style="color:#81A1C1;">DATE</span><span style="color:#81A1C1;">        NOT NULL</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    city                </span><span style="color:#81A1C1;">VARCHAR</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">20</span><span style="color:#D8DEE9FF;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    last_visit_dt       </span><span style="color:#81A1C1;">DATETIME</span><span style="color:#81A1C1;">    REPLACE</span><span style="color:#81A1C1;"> DEFAULT</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">1970-01-01 00:00:00</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    cost                </span><span style="color:#81A1C1;">BIGINT</span><span style="color:#D8DEE9FF;">      SUM </span><span style="color:#81A1C1;">DEFAULT</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">0</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    max_dwell           </span><span style="color:#81A1C1;">INT</span><span style="color:#D8DEE9FF;">         MAX </span><span style="color:#81A1C1;">DEFAULT</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">0</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">AGGREGATE</span><span style="color:#81A1C1;"> KEY</span><span style="color:#D8DEE9FF;">(user_id, load_dt, city)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">DISTRIBUTED</span><span style="color:#81A1C1;"> BY</span><span style="color:#81A1C1;"> HASH</span><span style="color:#D8DEE9FF;">(user_id) BUCKETS </span><span style="color:#B48EAD;">10</span><span style="color:#D8DEE9FF;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中定义了用户信息和访问行为表，将 user_id、load_date、city 及 age 作为 Key 列进行聚合。数据导入时，Key 列会聚合成一行，Value 列会按照指定的聚合类型进行维度聚合。</p><h3 id="局限性-1" tabindex="-1"><a class="header-anchor" href="#局限性-1"><span>局限性</span></a></h3><h2 id="使用注意" tabindex="-1"><a class="header-anchor" href="#使用注意"><span>使用注意</span></a></h2><h3 id="建表时列类型建议" tabindex="-1"><a class="header-anchor" href="#建表时列类型建议"><span>建表时列类型建议</span></a></h3><ol><li>Key 列必须在所有 Value 列之前。</li><li>尽量选择整型类型。因为整型类型的计算和查找效率远高于字符串。</li><li>对于不同长度的整型类型的选择原则，遵循够用即可。</li><li>对于 VARCHAR 和 STRING 类型的长度，遵循够用即可。</li></ol>`,54)]))}const c=l(i,[["render",p],["__file","表模型.html.vue"]]),t=JSON.parse('{"path":"/md/article/database/doris/%E8%A1%A8%E6%A8%A1%E5%9E%8B.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"表模型分类","slug":"表模型分类","link":"#表模型分类","children":[]},{"level":2,"title":"排序键","slug":"排序键","link":"#排序键","children":[]},{"level":2,"title":"明细模型","slug":"明细模型","link":"#明细模型","children":[{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"主键模型","slug":"主键模型","link":"#主键模型","children":[{"level":3,"title":"使用场景","slug":"使用场景-1","link":"#使用场景-1","children":[]},{"level":3,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":3,"title":"写时合并","slug":"写时合并","link":"#写时合并","children":[]},{"level":3,"title":"读时合并","slug":"读时合并","link":"#读时合并","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"局限性","slug":"局限性","link":"#局限性","children":[]}]},{"level":2,"title":"聚合模型","slug":"聚合模型","link":"#聚合模型","children":[{"level":3,"title":"使用场景","slug":"使用场景-2","link":"#使用场景-2","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"建表说明","slug":"建表说明","link":"#建表说明","children":[]},{"level":3,"title":"局限性","slug":"局限性-1","link":"#局限性-1","children":[]}]},{"level":2,"title":"使用注意","slug":"使用注意","link":"#使用注意","children":[{"level":3,"title":"建表时列类型建议","slug":"建表时列类型建议","link":"#建表时列类型建议","children":[]}]}],"git":{"updatedTime":1510977600000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":1,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/article/database/doris/表模型.md"}');export{c as comp,t as data};
