import{_ as n,c as a,f as l,o as e}from"./app-chPKMbRn.js";const p={};function o(i,s){return e(),a("div",null,s[0]||(s[0]=[l(`<ol><li><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="什么是线程池" tabindex="-1"><a class="header-anchor" href="#什么是线程池"><span>什么是线程池</span></a></h3><p>在面向对象编程中，创建和销毁对象是很费时间的，创建一个对象要获取内存资源或者其它更多资源。Java 虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是“池化资源”技术产生的原因 线程池，就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销 Java 5+ 中的 Executor 接口定义一个执行线程的工具，它的子类型即线程池接口是 ExecutorService。要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，因此在工具类 Executors 面提供了一些静态工厂方法，生成一些常用的线程池：</p><ul><li>newSingleThreadExecutor 创建一个单线程的线程池，这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行</li><li>newFixedThreadPool 创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程</li><li>newCachedThreadPool 创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小</li><li>newScheduledThreadPool 创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求</li></ul><h3 id="为什么要使用线程池" tabindex="-1"><a class="header-anchor" href="#为什么要使用线程池"><span>为什么要使用线程池</span></a></h3><p>避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。</p><h3 id="线程池队列已满会发生什么" tabindex="-1"><a class="header-anchor" href="#线程池队列已满会发生什么"><span>线程池队列已满会发生什么</span></a></h3><ul><li>使用的 LinkedBlockingQueue，也就是无界队列的话，继续添加任务到阻塞队列中等待执行，因为 LinkedBlockingQueue 可以近乎认为是一个无穷大的队列，可以无限存放任务</li><li>使用的是有界队列，如 ArrayBlockingQueue，任务首先会被添加到 ArrayBlockingQueue 中，ArrayBlockingQueue 满了，则会使用拒绝策略 RejectedExecutionHandler 处理满了的任务，默认是 AbortPolicy</li></ul><h3 id="线程池有哪些参数" tabindex="-1"><a class="header-anchor" href="#线程池有哪些参数"><span>线程池有哪些参数？</span></a></h3><ul><li>corePoolSize：核心线程数，线程池中始终存活的线程数</li><li>maximumPoolSize：最大线程数，线程池中允许的最大线程数</li><li>keepAliveTime：存活时间，线程没有任务执行时最多保持多久时间会终止</li><li>unit：单位，参数 keepAliveTime 的时间单位，7 种可选</li><li>workQueue：一个阻塞队列，用来存储等待执行的任务，均为线程安全，7 种可选</li><li>threadFactory：线程工厂，主要用来创建线程，默及正常优先级、非守护线程</li><li>handler：拒绝策略，拒绝处理任务时的策略，4 种可选，默认为 AbortPolicy <ul><li>AbortPolicy：直接丢弃任务，抛出异常，这是默认策略</li><li>CallerRunsPolicy：只用调用者所在的线程来处理任务</li><li>DiscardOldestPolicy：丢弃等待队列中最旧的任务，并执行当前任务</li><li>DiscardPolicy：直接丢弃任务，也不抛出异常</li></ul></li></ul><h3 id="线程池的执行流程" tabindex="-1"><a class="header-anchor" href="#线程池的执行流程"><span>线程池的执行流程</span></a></h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687053962-02fe8165-06c9-41c1-8d4b-63f03628fa58.png#averageHue=%23faf8f6&amp;clientId=u00400ee8-e274-4&amp;from=paste&amp;id=uf6eb3d33&amp;name=image.png&amp;originHeight=1054&amp;originWidth=1154&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=209121&amp;status=done&amp;style=none&amp;taskId=u30ef56a3-c059-4c9f-9167-6432e1b4614&amp;title=" alt="image.png"></p><ul><li>判断线程池中的线程数是否大于设置的核心线程数 <ul><li>如果小于，就创建一个核心线程来执行任务</li><li>如果大于，就会判断缓冲队列是否满了 <ul><li>如果没有满，则放入队列，等待线程空闲时执行任务</li><li>如果队列已经满了，则判断是否达到了线程池设置的最大线程数 <ul><li>如果没有达到，就创建新线程来执行任务</li><li>如果已经达到了最大线程数，则执行指定的拒绝策略</li></ul></li></ul></li></ul></li></ul><h3 id="线程池的拒绝策略有哪些" tabindex="-1"><a class="header-anchor" href="#线程池的拒绝策略有哪些"><span>线程池的拒绝策略有哪些</span></a></h3><ul><li>AbortPolicy：直接丢弃任务，抛出异常，这是默认策略</li><li>CallerRunsPolicy：只用调用者所在的线程来处理任务</li><li>DiscardOldestPolicy：丢弃等待队列中最旧的任务，并执行当前任务</li><li>DiscardPolicy：直接丢弃任务，也不抛出异常</li></ul><h3 id="讲讲线程池的实现原理" tabindex="-1"><a class="header-anchor" href="#讲讲线程池的实现原理"><span>讲讲线程池的实现原理</span></a></h3><p>使用线程池的好处</p><ul><li>线程是稀缺资源，不能频繁的创建。</li><li>应当将其放入一个池子中，可以给其他任务进行复用。</li><li>解耦作用，线程的创建于执行完全分开，方便维护。</li></ul><p>创建一个线程池</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#88C0D0;">ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> corePoolSize</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> int</span><span style="color:#D8DEE9FF;"> maximumPoolSize</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> long</span><span style="color:#D8DEE9FF;"> keepAliveTime</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> TimeUnit</span><span style="color:#D8DEE9FF;"> unit</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> BlockingQueue</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">Runnable</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> workQueue</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> RejectedExecutionHandler</span><span style="color:#D8DEE9FF;"> handler</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>为例：</p><ul><li>corePoolSize 为线程池的基本大小。</li><li>maximumPoolSize 为线程池最大线程大小。</li><li>keepAliveTime 和 unit 则是线程空闲后的存活时间。</li><li>workQueue 用于存放任务的阻塞队列。</li><li>handler 当队列和最大线程池都满了之后的饱和策略。</li></ul><p>处理流程 当提交一个任务到线程池时它的执行流程是怎样的呢？ <img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687053872-c8d4bbec-3a1b-41bb-a7dc-96fabc906a8a.png#averageHue=%23fbfdfa&amp;clientId=u00400ee8-e274-4&amp;from=paste&amp;id=u47de066c&amp;name=image.png&amp;originHeight=293&amp;originWidth=500&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84049&amp;status=done&amp;style=none&amp;taskId=ubd82d4b7-1812-4389-83c8-651f4b36fa8&amp;title=" alt="image.png"> 首先第一步会判断核心线程数有没有达到上限，如果没有则创建线程(会获取全局锁)，满了则会将任务丢进阻塞队列。 如果队列也满了则需要判断最大线程数是否达到上限，如果没有则创建线程(获取全局锁)，如果最大线程数也满了则会根据饱和策略处理。 常用的饱和策略有:</p><ul><li>直接丢弃任务。</li><li>调用者线程处理。</li><li>丢弃队列中的最近任务，执行当前任务。</li></ul><p>所以当线程池完成预热之后都是将任务放入队列，接着由工作线程一个个从队列里取出执行。 合理配置线程池 线程池并不是配置越大越好，而是要根据任务的熟悉来进行划分： 如果是 CPU 密集型任务应当分配较少的线程，比如 CPU 个数相当的大小。 如果是 IO 密集型任务，由于线程并不是一直在运行，所以可以尽可能的多配置线程，比如 CPU 个数 * 2 。 当是一个混合型任务，可以将其拆分为 CPU 密集型任务以及 IO 密集型任务，这样来分别配置。</p></li></ol><h1 id="java-线程池详解" tabindex="-1"><a class="header-anchor" href="#java-线程池详解"><span>Java 线程池详解</span></a></h1><blockquote><p>全面介绍 Java 线程池的概念、原理、使用方法和最佳实践</p></blockquote><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#1-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%9F%BA%E7%A1%80">1. 线程池基础</a></li><li><a href="#2-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">2. 线程池核心参数</a></li><li><a href="#3-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">3. 线程池工作原理</a></li><li><a href="#4-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%B1%BB%E5%9E%8B">4. 线程池类型</a></li><li><a href="#5-%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5">5. 拒绝策略</a></li><li><a href="#6-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%85%8D%E7%BD%AE">6. 线程池配置</a></li><li><a href="#7-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">7. 最佳实践</a></li></ul><hr><h2 id="_1-线程池基础" tabindex="-1"><a class="header-anchor" href="#_1-线程池基础"><span>1. 线程池基础</span></a></h2><h3 id="_1-1-什么是线程池" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是线程池"><span>1.1 什么是线程池</span></a></h3><p>线程池是一种<strong>池化资源技术</strong>，预先创建一定数量的线程并放入池中，需要时从池中获取，使用完毕后归还到池中，从而避免频繁创建和销毁线程的开销。</p><p><strong>核心概念：</strong></p><ul><li><strong>池化思想</strong>：预创建资源，重复利用，减少创建销毁开销</li><li><strong>资源管理</strong>：统一管理线程的生命周期</li><li><strong>任务解耦</strong>：任务提交和线程执行分离</li></ul><h3 id="_1-2-线程池的优势" tabindex="-1"><a class="header-anchor" href="#_1-2-线程池的优势"><span>1.2 线程池的优势</span></a></h3><table><thead><tr><th>优势</th><th>说明</th><th>效果</th></tr></thead><tbody><tr><td><strong>资源复用</strong></td><td>避免频繁创建销毁线程</td><td>减少系统开销</td></tr><tr><td><strong>响应速度</strong></td><td>任务无需等待线程创建</td><td>提高响应效率</td></tr><tr><td><strong>可管理性</strong></td><td>统一分配、调优和监控</td><td>便于资源控制</td></tr><tr><td><strong>稳定性</strong></td><td>控制并发数量</td><td>避免资源耗尽</td></tr></tbody></table><h3 id="_1-3-java-线程池架构" tabindex="-1"><a class="header-anchor" href="#_1-3-java-线程池架构"><span>1.3 Java 线程池架构</span></a></h3><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>Executor (接口)</span></span></span>
<span class="line"><span class="line"><span>    ↓</span></span></span>
<span class="line"><span class="line"><span>ExecutorService (接口)</span></span></span>
<span class="line"><span class="line"><span>    ↓</span></span></span>
<span class="line"><span class="line"><span>AbstractExecutorService (抽象类)</span></span></span>
<span class="line"><span class="line"><span>    ↓</span></span></span>
<span class="line"><span class="line"><span>ThreadPoolExecutor (实现类)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java 5+ 线程池体系：</strong></p><ul><li><p><strong>Executor</strong>：定义执行任务的方法</p></li><li><p><strong>ExecutorService</strong>：扩展 Executor，提供管理方法</p></li><li><p><strong>ThreadPoolExecutor</strong>：线程池的核心实现类</p></li><li><p><strong>Executors</strong>：线程池工厂类，提供常用线程池线程池</p><p>在面向对象编程中，创建和销毁对象是很费时间的，创建一个对象要获取内存资源或者其它更多资源。Java 虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是“池化资源”技术产生的原因 线程池，就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销 Java 5+ 中的 Executor 接口定义一个执行线程的工具，它的子类型即线程池接口是 ExecutorService。要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，因此在工具类 Executors 面提供了一些静态工厂方法，生成一些常用的线程池：</p><ul><li>newSingleThreadExecutor 创建一个单线程的线程池，这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行</li><li>newFixedThreadPool 创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程</li><li>newCachedThreadPool 创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小</li><li>newScheduledThreadPool 创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求</li></ul><h3 id="为什么要使用线程池-1" tabindex="-1"><a class="header-anchor" href="#为什么要使用线程池-1"><span>为什么要使用线程池</span></a></h3><p>避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。</p></li></ul><hr><h2 id="_2-线程池核心参数" tabindex="-1"><a class="header-anchor" href="#_2-线程池核心参数"><span>2. 线程池核心参数</span></a></h2><h3 id="_2-1-threadpoolexecutor-构造方法" tabindex="-1"><a class="header-anchor" href="#_2-1-threadpoolexecutor-构造方法"><span>2.1 ThreadPoolExecutor 构造方法</span></a></h3><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> corePoolSize</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                         int</span><span style="color:#D8DEE9FF;"> maximumPoolSize</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                         long</span><span style="color:#D8DEE9FF;"> keepAliveTime</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                         TimeUnit</span><span style="color:#D8DEE9FF;"> unit</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                         BlockingQueue</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">Runnable</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> workQueue</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                         ThreadFactory</span><span style="color:#D8DEE9FF;"> threadFactory</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                         RejectedExecutionHandler</span><span style="color:#D8DEE9FF;"> handler</span><span style="color:#ECEFF4;">)</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-核心参数详解" tabindex="-1"><a class="header-anchor" href="#_2-2-核心参数详解"><span>2.2 核心参数详解</span></a></h3><table><thead><tr><th>参数</th><th>类型</th><th>说明</th><th>推荐配置</th></tr></thead><tbody><tr><td><strong>corePoolSize</strong></td><td>int</td><td>核心线程数，始终存活的线程数</td><td>CPU 密集型=CPU 核数<br>IO 密集型=CPU 核数 ×2</td></tr><tr><td><strong>maximumPoolSize</strong></td><td>int</td><td>最大线程数，线程池允许的最大线程数</td><td>根据系统负载能力设定</td></tr><tr><td><strong>keepAliveTime</strong></td><td>long</td><td>非核心线程空闲存活时间</td><td>30-60 秒</td></tr><tr><td><strong>unit</strong></td><td>TimeUnit</td><td>keepAliveTime 的时间单位</td><td>TimeUnit.SECONDS</td></tr><tr><td><strong>workQueue</strong></td><td>BlockingQueue</td><td>任务等待队列</td><td>根据业务场景选择</td></tr><tr><td><strong>threadFactory</strong></td><td>ThreadFactory</td><td>线程工厂，用于创建线程</td><td>自定义线程名称</td></tr><tr><td><strong>handler</strong></td><td>RejectedExecutionHandler</td><td>拒绝策略，队列满时的处理方式</td><td>根据业务需求选择</td></tr></tbody></table><h3 id="_2-3-工作队列类型" tabindex="-1"><a class="header-anchor" href="#_2-3-工作队列类型"><span>2.3 工作队列类型</span></a></h3><table><thead><tr><th>队列类型</th><th>容量</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>ArrayBlockingQueue</strong></td><td>有界</td><td>基于数组的 FIFO 队列</td><td>内存敏感，需要限制队列大小</td></tr><tr><td><strong>LinkedBlockingQueue</strong></td><td>有界/无界</td><td>基于链表的 FIFO 队列</td><td>吞吐量优先，允许较大队列</td></tr><tr><td><strong>SynchronousQueue</strong></td><td>0</td><td>不存储元素的同步队列</td><td>任务量不大，需要立即处理</td></tr><tr><td><strong>PriorityBlockingQueue</strong></td><td>无界</td><td>支持优先级的无界队列</td><td>需要按优先级处理任务</td></tr><tr><td><strong>DelayQueue</strong></td><td>无界</td><td>支持延时获取的无界队列</td><td>延时任务、定时任务</td></tr></tbody></table><h3 id="_2-4-队列选择对线程池行为的影响" tabindex="-1"><a class="header-anchor" href="#_2-4-队列选择对线程池行为的影响"><span>2.4 队列选择对线程池行为的影响</span></a></h3><p><strong>队列已满时的处理：</strong></p><ul><li><p><strong>无界队列</strong> (如 LinkedBlockingQueue)</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>任务继续添加到队列 → 等待执行 → 可能导致内存溢出</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>有界队列</strong> (如 ArrayBlockingQueue)</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>任务队列满了 → 创建新线程(直到最大线程数) → 触发拒绝策略</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h2 id="_3-线程池工作原理" tabindex="-1"><a class="header-anchor" href="#_3-线程池工作原理"><span>3. 线程池工作原理</span></a></h2><h3 id="_3-1-任务执行流程" tabindex="-1"><a class="header-anchor" href="#_3-1-任务执行流程"><span>3.1 任务执行流程</span></a></h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29236088/1675687053962-02fe8165-06c9-41c1-8d4b-63f03628fa58.png" alt="线程池执行流程"></p><p><strong>执行步骤详解：</strong></p><ol><li><p><strong>提交任务</strong> → 检查核心线程数</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>当前线程数 &lt; corePoolSize？</span></span></span>
<span class="line"><span class="line"><span>├─ 是：创建核心线程执行任务</span></span></span>
<span class="line"><span class="line"><span>└─ 否：进入步骤2</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>核心线程已满</strong> → 检查工作队列</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>工作队列未满？</span></span></span>
<span class="line"><span class="line"><span>├─ 是：任务加入队列等待</span></span></span>
<span class="line"><span class="line"><span>└─ 否：进入步骤3</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>队列已满</strong> → 检查最大线程数</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>当前线程数 &lt; maximumPoolSize？</span></span></span>
<span class="line"><span class="line"><span>├─ 是：创建非核心线程执行任务</span></span></span>
<span class="line"><span class="line"><span>└─ 否：进入步骤4</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>达到最大线程数</strong> → 执行拒绝策略</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>触发RejectedExecutionHandler处理任务</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="_3-2-线程生命周期管理" tabindex="-1"><a class="header-anchor" href="#_3-2-线程生命周期管理"><span>3.2 线程生命周期管理</span></a></h3><p><strong>核心线程：</strong></p><ul><li>始终保持存活（除非设置 allowCoreThreadTimeOut=true）</li><li>从队列中获取任务执行</li><li>空闲时等待新任务</li></ul><p><strong>非核心线程：</strong></p><ul><li>队列满时临时创建</li><li>空闲超过 keepAliveTime 后销毁</li><li>优先级低于核心线程</li></ul><h3 id="_3-3-线程池状态转换" tabindex="-1"><a class="header-anchor" href="#_3-3-线程池状态转换"><span>3.3 线程池状态转换</span></a></h3><table><thead><tr><th>状态</th><th>说明</th><th>特点</th></tr></thead><tbody><tr><td><strong>RUNNING</strong></td><td>运行状态</td><td>接受新任务，处理队列任务</td></tr><tr><td><strong>SHUTDOWN</strong></td><td>关闭状态</td><td>不接受新任务，处理现有任务</td></tr><tr><td><strong>STOP</strong></td><td>停止状态</td><td>不接受新任务，中断现有任务</td></tr><tr><td><strong>TIDYING</strong></td><td>整理状态</td><td>所有任务终止，线程数为 0</td></tr><tr><td><strong>TERMINATED</strong></td><td>终止状态</td><td>terminated()方法执行完成</td></tr></tbody></table><p><strong>状态转换流程：</strong></p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-text;"><code><span class="line"><span class="line"><span>RUNNING → shutdown() → SHUTDOWN → 队列为空且线程为0 → TIDYING → terminated() → TERMINATED</span></span></span>
<span class="line"><span class="line"><span>    ↓</span></span></span>
<span class="line"><span class="line"><span>shutdownNow() → STOP → 线程中断完成 → TIDYING → terminated() → TERMINATED</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-线程池类型" tabindex="-1"><a class="header-anchor" href="#_4-线程池类型"><span>4. 线程池类型</span></a></h2><h3 id="_4-1-executors-工厂方法" tabindex="-1"><a class="header-anchor" href="#_4-1-executors-工厂方法"><span>4.1 Executors 工厂方法</span></a></h3><p>Java 提供了<code>Executors</code>工厂类来创建常用的线程池类型：</p><table><thead><tr><th>方法</th><th>线程池类型</th><th>核心特点</th><th>适用场景</th></tr></thead><tbody><tr><td><code>newFixedThreadPool(n)</code></td><td>固定线程池</td><td>固定线程数，无界队列</td><td>负载较重的服务器</td></tr><tr><td><code>newSingleThreadExecutor()</code></td><td>单线程池</td><td>单线程，无界队列</td><td>需要顺序执行的任务</td></tr><tr><td><code>newCachedThreadPool()</code></td><td>缓存线程池</td><td>无核心线程，60s 超时</td><td>执行大量短期异步任务</td></tr><tr><td><code>newScheduledThreadPool(n)</code></td><td>定时线程池</td><td>支持定时和周期性任务</td><td>定时任务调度</td></tr></tbody></table><h3 id="_4-2-各类型线程池详解" tabindex="-1"><a class="header-anchor" href="#_4-2-各类型线程池详解"><span>4.2 各类型线程池详解</span></a></h3><h4 id="_4-2-1-fixedthreadpool-固定线程池" tabindex="-1"><a class="header-anchor" href="#_4-2-1-fixedthreadpool-固定线程池"><span>4.2.1 FixedThreadPool - 固定线程池</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> static</span><span style="color:#8FBCBB;"> ExecutorService</span><span style="color:#88C0D0;"> newFixedThreadPool</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> nThreads</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">nThreads</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> nThreads</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">                                 0L</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">MILLISECONDS</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                                 new</span><span style="color:#8FBCBB;"> LinkedBlockingQueue</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#ECEFF4;">&gt;())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>核心线程数 = 最大线程数</li><li>使用无界 LinkedBlockingQueue</li><li>线程不会超时销毁</li></ul><p><strong>适用场景：</strong></p><ul><li>负载比较重的服务器</li><li>需要控制并发数的场景</li></ul><h4 id="_4-2-2-singlethreadexecutor-单线程池" tabindex="-1"><a class="header-anchor" href="#_4-2-2-singlethreadexecutor-单线程池"><span>4.2.2 SingleThreadExecutor - 单线程池</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> static</span><span style="color:#8FBCBB;"> ExecutorService</span><span style="color:#88C0D0;"> newSingleThreadExecutor</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> FinalizableDelegatedExecutorService</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        (</span><span style="color:#81A1C1;">new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">                               0L</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">MILLISECONDS</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                               new</span><span style="color:#8FBCBB;"> LinkedBlockingQueue</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#ECEFF4;">&gt;()))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>只有一个线程执行任务</li><li>保证任务按提交顺序执行</li><li>线程异常终止会创建新线程替代</li></ul><p><strong>适用场景：</strong></p><ul><li>需要顺序执行的任务</li><li>单线程串行处理</li></ul><h4 id="_4-2-3-cachedthreadpool-缓存线程池" tabindex="-1"><a class="header-anchor" href="#_4-2-3-cachedthreadpool-缓存线程池"><span>4.2.3 CachedThreadPool - 缓存线程池</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> static</span><span style="color:#8FBCBB;"> ExecutorService</span><span style="color:#88C0D0;"> newCachedThreadPool</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Integer</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">MAX_VALUE</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">                                 60L</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                                 new</span><span style="color:#8FBCBB;"> SynchronousQueue</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#ECEFF4;">&gt;())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>无核心线程，最大线程数无限制</li><li>使用 SynchronousQueue（容量为 0）</li><li>线程空闲 60 秒后销毁</li></ul><p><strong>适用场景：</strong></p><ul><li>执行大量短期异步任务</li><li>任务执行时间短</li></ul><h4 id="_4-2-4-scheduledthreadpool-定时线程池" tabindex="-1"><a class="header-anchor" href="#_4-2-4-scheduledthreadpool-定时线程池"><span>4.2.4 ScheduledThreadPool - 定时线程池</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> static</span><span style="color:#8FBCBB;"> ScheduledExecutorService</span><span style="color:#88C0D0;"> newScheduledThreadPool</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> corePoolSize</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ScheduledThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">corePoolSize</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>支持定时和周期性任务执行</li><li>使用 DelayedWorkQueue</li><li>核心线程不超时</li></ul><p><strong>使用示例：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">ScheduledExecutorService</span><span style="color:#D8DEE9;"> scheduler</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Executors</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newScheduledThreadPool</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 延时执行</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">scheduler</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">schedule</span><span style="color:#ECEFF4;">(()</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#D8DEE9;"> System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">延时5秒执行</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">),</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 周期性执行</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">scheduler</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">scheduleAtFixedRate</span><span style="color:#ECEFF4;">(()</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#D8DEE9;"> System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">每10秒执行一次</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">                             0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 10</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-为什么不推荐使用-executors" tabindex="-1"><a class="header-anchor" href="#_4-3-为什么不推荐使用-executors"><span>4.3 为什么不推荐使用 Executors</span></a></h3><p><strong>阿里巴巴 Java 开发手册明确规定：</strong></p><blockquote><p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式。</p></blockquote><p><strong>原因分析：</strong></p><table><thead><tr><th>线程池类型</th><th>潜在问题</th><th>风险</th></tr></thead><tbody><tr><td><strong>FixedThreadPool</strong></td><td>LinkedBlockingQueue 无界</td><td>可能导致 OOM</td></tr><tr><td><strong>SingleThreadExecutor</strong></td><td>LinkedBlockingQueue 无界</td><td>可能导致 OOM</td></tr><tr><td><strong>CachedThreadPool</strong></td><td>maximumPoolSize=Integer.MAX_VALUE</td><td>可能创建大量线程导致 OOM</td></tr><tr><td><strong>ScheduledThreadPool</strong></td><td>maximumPoolSize=Integer.MAX_VALUE</td><td>可能创建大量线程导致 OOM</td></tr></tbody></table><p><strong>推荐做法：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">// 推荐：手动创建ThreadPoolExecutor</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">    10</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;">                                    // 核心线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">    20</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;">                                    // 最大线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">    60L</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;">                                   // 空闲线程存活时间</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">    TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;">                      // 时间单位</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#8FBCBB;"> ArrayBlockingQueue</span><span style="color:#ECEFF4;">&lt;&gt;(</span><span style="color:#B48EAD;">1000</span><span style="color:#ECEFF4;">),</span><span style="color:#616E88;">        // 有界队列</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#88C0D0;"> ThreadFactoryBuilder</span><span style="color:#ECEFF4;">()</span><span style="color:#616E88;">             // 自定义线程工厂</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        .</span><span style="color:#88C0D0;">setNameFormat</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">business-pool-%d</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        .</span><span style="color:#88C0D0;">build</span><span style="color:#ECEFF4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#D8DEE9FF;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">CallerRunsPolicy</span><span style="color:#ECEFF4;">()</span><span style="color:#616E88;"> // 拒绝策略</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-拒绝策略" tabindex="-1"><a class="header-anchor" href="#_5-拒绝策略"><span>5. 拒绝策略</span></a></h2><h3 id="_5-1-拒绝策略概述" tabindex="-1"><a class="header-anchor" href="#_5-1-拒绝策略概述"><span>5.1 拒绝策略概述</span></a></h3><p>当线程池达到最大线程数且工作队列已满时，会触发拒绝策略来处理新提交的任务。</p><h3 id="_5-2-内置拒绝策略" tabindex="-1"><a class="header-anchor" href="#_5-2-内置拒绝策略"><span>5.2 内置拒绝策略</span></a></h3><table><thead><tr><th>策略</th><th>行为</th><th>异常</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>AbortPolicy</strong></td><td>直接丢弃任务并抛出异常</td><td>RejectedExecutionException</td><td>默认策略，需要感知任务失败</td></tr><tr><td><strong>CallerRunsPolicy</strong></td><td>调用者线程执行任务</td><td>无</td><td>任务重要，可以降低提交速度</td></tr><tr><td><strong>DiscardPolicy</strong></td><td>静默丢弃任务</td><td>无</td><td>任务不重要，允许丢失</td></tr><tr><td><strong>DiscardOldestPolicy</strong></td><td>丢弃最老任务，执行新任务</td><td>无</td><td>优先处理最新任务</td></tr></tbody></table><h3 id="_5-3-拒绝策略详解" tabindex="-1"><a class="header-anchor" href="#_5-3-拒绝策略详解"><span>5.3 拒绝策略详解</span></a></h3><h4 id="_5-3-1-abortpolicy-中止策略-默认" tabindex="-1"><a class="header-anchor" href="#_5-3-1-abortpolicy-中止策略-默认"><span>5.3.1 AbortPolicy - 中止策略（默认）</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> static</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> AbortPolicy</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;font-weight:bold;"> RejectedExecutionHandler</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> rejectedExecution</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> RejectedExecutionException</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Task </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> +</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                                           &quot;</span><span style="color:#A3BE8C;"> rejected from </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>抛出 RejectedExecutionException 异常</li><li>任务丢失，但能及时感知到拒绝</li><li>需要调用方处理异常</li></ul><p><strong>使用场景：</strong></p><ul><li>任务执行失败需要立即感知</li><li>对任务丢失敏感的场景</li></ul><h4 id="_5-3-2-callerrunspolicy-调用者运行策略" tabindex="-1"><a class="header-anchor" href="#_5-3-2-callerrunspolicy-调用者运行策略"><span>5.3.2 CallerRunsPolicy - 调用者运行策略</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> static</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> CallerRunsPolicy</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;font-weight:bold;"> RejectedExecutionHandler</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> rejectedExecution</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">isShutdown</span><span style="color:#ECEFF4;">())</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            r</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">run</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 在调用者线程中执行</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>由提交任务的线程执行被拒绝的任务</li><li>降低任务提交速度，形成负反馈</li><li>不会丢失任务</li></ul><p><strong>使用场景：</strong></p><ul><li>任务不能丢失</li><li>可以接受性能降低</li></ul><h4 id="_5-3-3-discardpolicy-丢弃策略" tabindex="-1"><a class="header-anchor" href="#_5-3-3-discardpolicy-丢弃策略"><span>5.3.3 DiscardPolicy - 丢弃策略</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> static</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> DiscardPolicy</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;font-weight:bold;"> RejectedExecutionHandler</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> rejectedExecution</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 什么都不做，静默丢弃</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>静默丢弃任务，不抛异常</li><li>无任何通知机制</li><li>性能最好</li></ul><p><strong>使用场景：</strong></p><ul><li>任务可以丢失</li><li>对性能要求极高</li></ul><h4 id="_5-3-4-discardoldestpolicy-丢弃最老策略" tabindex="-1"><a class="header-anchor" href="#_5-3-4-discardoldestpolicy-丢弃最老策略"><span>5.3.4 DiscardOldestPolicy - 丢弃最老策略</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> static</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> DiscardOldestPolicy</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;font-weight:bold;"> RejectedExecutionHandler</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> rejectedExecution</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">isShutdown</span><span style="color:#ECEFF4;">())</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            e</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getQueue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">poll</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 移除最老的任务</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            e</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">execute</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">r</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">        // 重新提交当前任务</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>丢弃队列中最老的任务</li><li>腾出空间给新任务</li><li>优先保证最新任务的执行</li></ul><p><strong>使用场景：</strong></p><ul><li>最新的任务优先级更高</li><li>老任务可以被丢弃</li></ul><h3 id="_5-4-自定义拒绝策略" tabindex="-1"><a class="header-anchor" href="#_5-4-自定义拒绝策略"><span>5.4 自定义拒绝策略</span></a></h3><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> CustomRejectedExecutionHandler</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;font-weight:bold;"> RejectedExecutionHandler</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Override</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> rejectedExecution</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 1. 记录日志</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">warn</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Task {} rejected from {}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">(),</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 2. 保存到数据库或消息队列</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        saveToDatabase</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">r</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 3. 发送告警</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        sendAlert</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Thread pool rejection occurred</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 4. 根据业务需求处理</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#88C0D0;">isImportantTask</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">r</span><span style="color:#ECEFF4;">))</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">            // 重要任务重新提交到其他线程池</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            fallbackExecutor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">execute</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">r</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">            // 非重要任务丢弃</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">info</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Non-important task discarded: {}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> saveToDatabase</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> task</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 实现保存逻辑</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> sendAlert</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> message</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 实现告警逻辑</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> boolean</span><span style="color:#88C0D0;"> isImportantTask</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> task</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 实现重要性判断逻辑</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#D8DEE9FF;"> task </span><span style="color:#81A1C1;">instanceof</span><span style="color:#D8DEE9FF;"> ImportantTask</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-拒绝策略选择建议" tabindex="-1"><a class="header-anchor" href="#_5-5-拒绝策略选择建议"><span>5.5 拒绝策略选择建议</span></a></h3><table><thead><tr><th>业务场景</th><th>推荐策略</th><th>理由</th></tr></thead><tbody><tr><td><strong>金融交易</strong></td><td>AbortPolicy + 重试机制</td><td>不能丢失任务，需要异常处理</td></tr><tr><td><strong>日志记录</strong></td><td>DiscardOldestPolicy</td><td>优先记录最新日志</td></tr><tr><td><strong>监控数据采集</strong></td><td>DiscardPolicy</td><td>可以丢失部分数据点</td></tr><tr><td><strong>用户请求处理</strong></td><td>CallerRunsPolicy</td><td>降低请求频率，保证处理</td></tr><tr><td><strong>批量数据处理</strong></td><td>自定义策略</td><td>保存到队列稍后重试</td></tr></tbody></table><hr><h2 id="_6-线程池配置" tabindex="-1"><a class="header-anchor" href="#_6-线程池配置"><span>6. 线程池配置</span></a></h2><h3 id="_6-1-线程数量配置原则" tabindex="-1"><a class="header-anchor" href="#_6-1-线程数量配置原则"><span>6.1 线程数量配置原则</span></a></h3><p>合理的线程池配置需要根据任务特性来确定，不是越大越好。</p><h4 id="_6-1-1-任务类型分析" tabindex="-1"><a class="header-anchor" href="#_6-1-1-任务类型分析"><span>6.1.1 任务类型分析</span></a></h4><table><thead><tr><th>任务类型</th><th>特征</th><th>线程配置策略</th><th>推荐公式</th></tr></thead><tbody><tr><td><strong>CPU 密集型</strong></td><td>大量计算，很少等待</td><td>线程数 ≈ CPU 核数</td><td><code>CPU核数 + 1</code></td></tr><tr><td><strong>IO 密集型</strong></td><td>频繁 IO 操作，线程常等待</td><td>线程数 &gt; CPU 核数</td><td><code>CPU核数 × 2</code> 或 <code>CPU核数 ÷ (1 - 阻塞系数)</code></td></tr><tr><td><strong>混合型</strong></td><td>既有计算又有 IO</td><td>拆分为不同类型分别处理</td><td>分别配置不同线程池</td></tr></tbody></table><h4 id="_6-1-2-精确配置公式" tabindex="-1"><a class="header-anchor" href="#_6-1-2-精确配置公式"><span>6.1.2 精确配置公式</span></a></h4><p><strong>线程数 = CPU 核数 × 目标 CPU 使用率 × (1 + 平均等待时间/平均工作时间)</strong></p><p><strong>参数获取方法：</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">// 获取CPU核数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> cpuCount</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Runtime</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getRuntime</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">availableProcessors</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 通过性能测试获取平均等待时间和工作时间</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 等待时间：线程等待IO、数据库等操作的时间</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 工作时间：线程实际执行计算的时间</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-1-3-配置示例" tabindex="-1"><a class="header-anchor" href="#_6-1-3-配置示例"><span>6.1.3 配置示例</span></a></h4><p><strong>场景 1：CPU 密集型任务</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">// 图像处理、数学计算等</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> corePoolSize</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Runtime</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getRuntime</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">availableProcessors</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> maximumPoolSize</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> corePoolSize</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    corePoolSize</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> maximumPoolSize</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">    60L</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#8FBCBB;"> ArrayBlockingQueue</span><span style="color:#ECEFF4;">&lt;&gt;(</span><span style="color:#B48EAD;">100</span><span style="color:#ECEFF4;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#88C0D0;"> ThreadFactoryBuilder</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">setNameFormat</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">cpu-task-%d</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">).</span><span style="color:#88C0D0;">build</span><span style="color:#ECEFF4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#D8DEE9FF;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">AbortPolicy</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>场景 2：IO 密集型任务</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">// 文件读写、网络请求、数据库操作等</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> cpuCount</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Runtime</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getRuntime</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">availableProcessors</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> corePoolSize</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> cpuCount </span><span style="color:#81A1C1;">*</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> maximumPoolSize</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> cpuCount </span><span style="color:#81A1C1;">*</span><span style="color:#B48EAD;"> 4</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">    corePoolSize</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> maximumPoolSize</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">    60L</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#8FBCBB;"> LinkedBlockingQueue</span><span style="color:#ECEFF4;">&lt;&gt;(</span><span style="color:#B48EAD;">1000</span><span style="color:#ECEFF4;">),</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#88C0D0;"> ThreadFactoryBuilder</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">setNameFormat</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">io-task-%d</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">).</span><span style="color:#88C0D0;">build</span><span style="color:#ECEFF4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    new</span><span style="color:#D8DEE9FF;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">CallerRunsPolicy</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-线程池大小动态调整" tabindex="-1"><a class="header-anchor" href="#_6-2-线程池大小动态调整"><span>6.2 线程池大小动态调整</span></a></h3><h4 id="_6-2-1-动态调整-api" tabindex="-1"><a class="header-anchor" href="#_6-2-1-动态调整-api"><span>6.2.1 动态调整 API</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#8FBCBB;">ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(...)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 动态调整核心线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setCorePoolSize</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">20</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 动态调整最大线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setMaximumPoolSize</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">50</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 动态调整空闲时间</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setKeepAliveTime</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">120</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">// 允许核心线程超时</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">allowCoreThreadTimeOut</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">true</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-2-自适应线程池实现" tabindex="-1"><a class="header-anchor" href="#_6-2-2-自适应线程池实现"><span>6.2.2 自适应线程池实现</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> AdaptiveThreadPoolExecutor</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;font-weight:bold;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> AtomicInteger</span><span style="color:#D8DEE9;"> submittedTaskCount</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> AtomicInteger</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> volatile</span><span style="color:#81A1C1;"> long</span><span style="color:#D8DEE9;"> lastAdjustTime</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> System</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">currentTimeMillis</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#88C0D0;"> AdaptiveThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> corePoolSize</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> int</span><span style="color:#D8DEE9;"> maximumPoolSize</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                                    long</span><span style="color:#D8DEE9;"> keepAliveTime</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> TimeUnit</span><span style="color:#D8DEE9;"> unit</span><span style="color:#ECEFF4;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                                    BlockingQueue</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> workQueue</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        super</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">corePoolSize</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> maximumPoolSize</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> keepAliveTime</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> unit</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> workQueue</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Override</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> execute</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> command</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        submittedTaskCount</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">incrementAndGet</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        try</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            super</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">execute</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">command</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span><span style="color:#81A1C1;"> finally</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            submittedTaskCount</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">decrementAndGet</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 每30秒调整一次</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">System</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">currentTimeMillis</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> -</span><span style="color:#D8DEE9FF;"> lastAdjustTime </span><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 30000</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">            adjustPoolSize</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9FF;">            lastAdjustTime </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> System</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">currentTimeMillis</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> adjustPoolSize</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        int</span><span style="color:#D8DEE9;"> queueSize</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getQueue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">size</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        int</span><span style="color:#D8DEE9;"> activeThreads</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getActiveCount</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        int</span><span style="color:#D8DEE9;"> coreSize</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getCorePoolSize</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 队列积压严重，增加核心线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">queueSize </span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> coreSize </span><span style="color:#81A1C1;">*</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;"> &amp;&amp;</span><span style="color:#D8DEE9FF;"> coreSize </span><span style="color:#81A1C1;">&lt;</span><span style="color:#88C0D0;"> getMaximumPoolSize</span><span style="color:#ECEFF4;">())</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">            setCorePoolSize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">Math</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">min</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">coreSize </span><span style="color:#81A1C1;">+</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> getMaximumPoolSize</span><span style="color:#ECEFF4;">()))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Increased core pool size to: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#88C0D0;"> getCorePoolSize</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 线程空闲较多，减少核心线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        else</span><span style="color:#81A1C1;"> if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">activeThreads </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> coreSize </span><span style="color:#81A1C1;">/</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;"> &amp;&amp;</span><span style="color:#D8DEE9FF;"> coreSize </span><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">            setCorePoolSize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">Math</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">max</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">coreSize </span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Decreased core pool size to: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#88C0D0;"> getCorePoolSize</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-线程池监控" tabindex="-1"><a class="header-anchor" href="#_6-3-线程池监控"><span>6.3 线程池监控</span></a></h3><h4 id="_6-3-1-关键监控指标" tabindex="-1"><a class="header-anchor" href="#_6-3-1-关键监控指标"><span>6.3.1 关键监控指标</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> ThreadPoolMonitor</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> printThreadPoolStatus</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">=== 线程池状态监控 ===</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">核心线程数: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getCorePoolSize</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">最大线程数: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getMaximumPoolSize</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">当前线程数: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getPoolSize</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">活跃线程数: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getActiveCount</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">队列任务数: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getQueue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">size</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">已完成任务数: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getCompletedTaskCount</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">总任务数: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getTaskCount</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">队列类型: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getQueue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">getClass</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">getSimpleName</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">out</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">拒绝策略: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getRejectedExecutionHandler</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">getClass</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">getSimpleName</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-2-告警机制" tabindex="-1"><a class="header-anchor" href="#_6-3-2-告警机制"><span>6.3.2 告警机制</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Component</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> ThreadPoolAlarmMonitor</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Scheduled</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">fixedRate</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 30000</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> // 30秒检查一次</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> monitorThreadPool</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getBusinessThreadPool</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 队列使用率告警</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        double</span><span style="color:#D8DEE9;"> queueUsageRate</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">double</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getQueue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">size</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> /</span><span style="color:#88C0D0;"> getQueueCapacity</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">queueUsageRate </span><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 0.8</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">            sendAlert</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">线程池队列使用率过高: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">format</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%.2f%%</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> queueUsageRate </span><span style="color:#81A1C1;">*</span><span style="color:#B48EAD;"> 100</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 线程使用率告警</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        double</span><span style="color:#D8DEE9;"> threadUsageRate</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">double</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getActiveCount</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> /</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getMaximumPoolSize</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">threadUsageRate </span><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 0.8</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">            sendAlert</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">线程池线程使用率过高: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">format</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%.2f%%</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> threadUsageRate </span><span style="color:#81A1C1;">*</span><span style="color:#B48EAD;"> 100</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 任务执行速度告警</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        long</span><span style="color:#D8DEE9;"> completedTasks</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getCompletedTaskCount</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#ECEFF4;"> (</span><span style="color:#88C0D0;">isTaskExecutionTooSlow</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">completedTasks</span><span style="color:#ECEFF4;">))</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">            sendAlert</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">线程池任务执行速度过慢</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> sendAlert</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> message</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 发送告警通知</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        System</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ALERT: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> message</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_7-最佳实践" tabindex="-1"><a class="header-anchor" href="#_7-最佳实践"><span>7. 最佳实践</span></a></h2><h3 id="_7-1-线程池创建最佳实践" tabindex="-1"><a class="header-anchor" href="#_7-1-线程池创建最佳实践"><span>7.1 线程池创建最佳实践</span></a></h3><h4 id="_7-1-1-推荐创建方式" tabindex="-1"><a class="header-anchor" href="#_7-1-1-推荐创建方式"><span>7.1.1 推荐创建方式</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">/**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"> * 推荐的线程池创建方式</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"> */</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">Configuration</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> ThreadPoolConfig</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Bean</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">businessThreadPool</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#88C0D0;"> businessThreadPool</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">            10</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;">                                      // 核心线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">            20</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;">                                      // 最大线程数</span></span></span>
<span class="line"><span class="line"><span style="color:#B48EAD;">            60L</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;">                                     // 空闲线程存活时间</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;">                        // 时间单位</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            new</span><span style="color:#8FBCBB;"> ArrayBlockingQueue</span><span style="color:#ECEFF4;">&lt;&gt;(</span><span style="color:#B48EAD;">1000</span><span style="color:#ECEFF4;">),</span><span style="color:#616E88;">          // 有界队列</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            new</span><span style="color:#88C0D0;"> ThreadFactoryBuilder</span><span style="color:#ECEFF4;">()</span><span style="color:#616E88;">               // 自定义线程工厂</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">setNameFormat</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">business-thread-%d</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">setDaemon</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">false</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">setPriority</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">Thread</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">NORM_PRIORITY</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">setUncaughtExceptionHandler</span><span style="color:#ECEFF4;">((</span><span style="color:#D8DEE9FF;">t</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                    log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Thread {} threw exception</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> t</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getName</span><span style="color:#ECEFF4;">(),</span><span style="color:#D8DEE9FF;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                })</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                .</span><span style="color:#88C0D0;">build</span><span style="color:#ECEFF4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            new</span><span style="color:#88C0D0;"> RejectedExecutionHandler</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span><span style="color:#616E88;">         // 自定义拒绝策略</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                @</span><span style="color:#D08770;">Override</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> rejectedExecution</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                    log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">warn</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Task rejected: {}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> r</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                    // 可以保存到数据库或重新提交到备用线程池</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                    try</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                        executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getQueue</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">offer</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">r</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                    }</span><span style="color:#81A1C1;"> catch</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">InterruptedException</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                        Thread</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">currentThread</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">interrupt</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                        throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> RejectedExecutionException</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Task </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> r </span><span style="color:#81A1C1;">+</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;"> rejected</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        )</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-1-2-线程池命名规范" tabindex="-1"><a class="header-anchor" href="#_7-1-2-线程池命名规范"><span>7.1.2 线程池命名规范</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#616E88;">/**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"> * 线程池命名最佳实践</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;"> */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> ThreadPoolNamingExample</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    // 业务线程池命名</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> orderProcessPool</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // ... 其他参数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        new</span><span style="color:#88C0D0;"> ThreadFactoryBuilder</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">setNameFormat</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">order-process-pool-%d</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;">  // 订单处理线程池</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">build</span><span style="color:#ECEFF4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // ... 其他参数</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    )</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> emailSendPool</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // ... 其他参数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        new</span><span style="color:#88C0D0;"> ThreadFactoryBuilder</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">setNameFormat</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">email-send-pool-%d</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;">     // 邮件发送线程池</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">build</span><span style="color:#ECEFF4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // ... 其他参数</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    )</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> fileUploadPool</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> ThreadPoolExecutor</span><span style="color:#ECEFF4;">(</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // ... 其他参数</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        new</span><span style="color:#88C0D0;"> ThreadFactoryBuilder</span><span style="color:#ECEFF4;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">setNameFormat</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">file-upload-pool-%d</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;">    // 文件上传线程池</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">build</span><span style="color:#ECEFF4;">(),</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // ... 其他参数</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    )</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-线程池使用最佳实践" tabindex="-1"><a class="header-anchor" href="#_7-2-线程池使用最佳实践"><span>7.2 线程池使用最佳实践</span></a></h3><h4 id="_7-2-1-合理的任务提交方式" tabindex="-1"><a class="header-anchor" href="#_7-2-1-合理的任务提交方式"><span>7.2.1 合理的任务提交方式</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> ThreadPoolUsageExample</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">Autowired</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> businessThreadPool</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    /**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     * 异步执行无返回值任务</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> executeAsyncTask</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">        businessThreadPool</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">execute</span><span style="color:#ECEFF4;">(()</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            try</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                // 执行业务逻辑</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">                processBusinessLogic</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span><span style="color:#81A1C1;"> catch</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">Exception</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Task execution failed</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                // 异常处理逻辑</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        })</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    /**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     * 异步执行有返回值任务</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> Future</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#88C0D0;"> submitTask</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#D8DEE9;"> businessThreadPool</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">submit</span><span style="color:#ECEFF4;">(()</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            try</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                // 执行业务逻辑并返回结果</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                return</span><span style="color:#88C0D0;"> processBusinessLogicWithResult</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span><span style="color:#81A1C1;"> catch</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">Exception</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Task execution failed</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> RuntimeException</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Task failed</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        })</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    /**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     * 批量任务执行</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Future</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;&gt;</span><span style="color:#88C0D0;"> executeBatchTasks</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> taskParams</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">        List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Future</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;&gt;</span><span style="color:#D8DEE9;"> futures</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> ArrayList</span><span style="color:#ECEFF4;">&lt;&gt;()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9;"> param</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9FF;"> taskParams</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">            Future</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> future</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> businessThreadPool</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">submit</span><span style="color:#ECEFF4;">(()</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                return</span><span style="color:#88C0D0;"> processTask</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">param</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            })</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            futures</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">future</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#D8DEE9FF;"> futures</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-2-优雅关闭线程池" tabindex="-1"><a class="header-anchor" href="#_7-2-2-优雅关闭线程池"><span>7.2.2 优雅关闭线程池</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> ThreadPoolShutdownExample</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    private</span><span style="color:#81A1C1;"> final</span><span style="color:#8FBCBB;"> ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    /**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     * 优雅关闭线程池</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> shutdownGracefully</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        try</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">            // 1. 停止接收新任务</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">shutdown</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">            // 2. 等待已提交任务完成（最多等待60秒）</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            if</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9;">executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">awaitTermination</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">60</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">))</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                // 3. 如果等待超时，强制关闭</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">                List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">Runnable</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> droppedTasks</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">shutdownNow</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">warn</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Dropped {} tasks</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> droppedTasks</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">size</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">                // 4. 再次等待一段时间</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                if</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9;">executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">awaitTermination</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">60</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> TimeUnit</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">SECONDS</span><span style="color:#ECEFF4;">))</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                    log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Thread pool did not terminate gracefully</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">                }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span><span style="color:#81A1C1;"> catch</span><span style="color:#ECEFF4;"> (</span><span style="color:#8FBCBB;">InterruptedException</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">            // 5. 当前线程被中断，强制关闭线程池</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">shutdownNow</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            Thread</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">currentThread</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">interrupt</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    /**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     * Spring容器关闭时自动执行</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     */</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    @</span><span style="color:#D08770;">PreDestroy</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> destroy</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#88C0D0;">        shutdownGracefully</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-性能优化建议" tabindex="-1"><a class="header-anchor" href="#_7-3-性能优化建议"><span>7.3 性能优化建议</span></a></h3><h4 id="_7-3-1-避免常见错误" tabindex="-1"><a class="header-anchor" href="#_7-3-1-避免常见错误"><span>7.3.1 避免常见错误</span></a></h4><table><thead><tr><th>错误做法</th><th>问题</th><th>正确做法</th></tr></thead><tbody><tr><td>使用 Executors 创建线程池</td><td>可能 OOM</td><td>手动创建 ThreadPoolExecutor</td></tr><tr><td>核心线程数设置过大</td><td>浪费资源</td><td>根据任务类型合理配置</td></tr><tr><td>队列设置过大</td><td>内存占用高</td><td>使用有界队列</td></tr><tr><td>忽略拒绝策略</td><td>任务丢失不可控</td><td>自定义拒绝策略</td></tr><tr><td>不设置线程名称</td><td>难以调试</td><td>使用有意义的线程名</td></tr><tr><td>不处理异常</td><td>线程异常终止</td><td>设置异常处理器</td></tr></tbody></table><h4 id="_7-3-2-性能调优技巧" tabindex="-1"><a class="header-anchor" href="#_7-3-2-性能调优技巧"><span>7.3.2 性能调优技巧</span></a></h4><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki nord vp-code" style="background-color:#2e3440ff;color:#d8dee9ff language-java;"><code><span class="line"><span class="line"><span style="color:#81A1C1;">public</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> ThreadPoolPerformanceTips</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    /**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     * 预热线程池</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> warmUpThreadPool</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">ThreadPoolExecutor</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        int</span><span style="color:#D8DEE9;"> corePoolSize</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getCorePoolSize</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> corePoolSize</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prestartCoreThread</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 预启动核心线程</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // 或者预启动所有核心线程</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">        // executor.prestartAllCoreThreads();</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    /**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     * 任务分解：将大任务分解为小任务</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#81A1C1;"> void</span><span style="color:#88C0D0;"> submitLargeTaskOptimized</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;">List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> largeDataSet</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        int</span><span style="color:#D8DEE9;"> batchSize</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 100</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;"> largeDataSet</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">size</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">+=</span><span style="color:#D8DEE9FF;"> batchSize</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">            int</span><span style="color:#D8DEE9;"> end</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Math</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">min</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">i </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> batchSize</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> largeDataSet</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">size</span><span style="color:#ECEFF4;">())</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#8FBCBB;">            List</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9;"> batch</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> largeDataSet</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">subList</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">i</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> end</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">            executor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">submit</span><span style="color:#ECEFF4;">(()</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#88C0D0;"> processBatch</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">batch</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">    /**</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     * 使用CompletableFuture进行异步编排</span></span></span>
<span class="line"><span class="line"><span style="color:#616E88;">     */</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">    public</span><span style="color:#8FBCBB;"> CompletableFuture</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#88C0D0;"> asyncProcessWithDependency</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#8FBCBB;"> CompletableFuture</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">supplyAsync</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">this::</span><span style="color:#D8DEE9FF;">fetchUserInfo</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> executor</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">thenCompose</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">user </span><span style="color:#8FBCBB;">-&gt;</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                CompletableFuture</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">supplyAsync</span><span style="color:#ECEFF4;">(()</span><span style="color:#8FBCBB;"> -&gt;</span><span style="color:#88C0D0;"> processUser</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">user</span><span style="color:#ECEFF4;">),</span><span style="color:#D8DEE9FF;"> executor</span><span style="color:#ECEFF4;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">thenApply</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">this::</span><span style="color:#D8DEE9FF;">formatResult</span><span style="color:#ECEFF4;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            .</span><span style="color:#88C0D0;">exceptionally</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">throwable </span><span style="color:#8FBCBB;">-&gt;</span><span style="color:#ECEFF4;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#D8DEE9;">                log</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Processing failed</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> throwable</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#81A1C1;">                return</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Default result</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">            })</span><span style="color:#81A1C1;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#ECEFF4;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>线程池是 Java 并发编程的核心工具，合理使用线程池可以显著提升应用性能：</p><ol><li><strong>理解核心参数</strong>：正确配置 corePoolSize、maximumPoolSize、workQueue 等参数</li><li><strong>选择合适类型</strong>：根据任务特性选择合适的线程池类型</li><li><strong>配置拒绝策略</strong>：根据业务需求选择或自定义拒绝策略</li><li><strong>动态调优</strong>：监控线程池状态，动态调整参数</li><li><strong>最佳实践</strong>：遵循命名规范、优雅关闭、异常处理等最佳实践</li></ol><p>通过深入理解线程池的工作原理和合理配置，可以在保证系统稳定性的同时，最大化发挥多核 CPU 的性能优势。</p>`,162)]))}const r=n(p,[["render",o],["__file","线程池.html.vue"]]),t=JSON.parse('{"path":"/md/interview/java/basic/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html","title":"Java 线程池详解","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"1. 线程池基础","slug":"_1-线程池基础","link":"#_1-线程池基础","children":[{"level":3,"title":"1.1 什么是线程池","slug":"_1-1-什么是线程池","link":"#_1-1-什么是线程池","children":[]},{"level":3,"title":"1.2 线程池的优势","slug":"_1-2-线程池的优势","link":"#_1-2-线程池的优势","children":[]},{"level":3,"title":"1.3 Java 线程池架构","slug":"_1-3-java-线程池架构","link":"#_1-3-java-线程池架构","children":[]}]},{"level":2,"title":"2. 线程池核心参数","slug":"_2-线程池核心参数","link":"#_2-线程池核心参数","children":[{"level":3,"title":"2.1 ThreadPoolExecutor 构造方法","slug":"_2-1-threadpoolexecutor-构造方法","link":"#_2-1-threadpoolexecutor-构造方法","children":[]},{"level":3,"title":"2.2 核心参数详解","slug":"_2-2-核心参数详解","link":"#_2-2-核心参数详解","children":[]},{"level":3,"title":"2.3 工作队列类型","slug":"_2-3-工作队列类型","link":"#_2-3-工作队列类型","children":[]},{"level":3,"title":"2.4 队列选择对线程池行为的影响","slug":"_2-4-队列选择对线程池行为的影响","link":"#_2-4-队列选择对线程池行为的影响","children":[]}]},{"level":2,"title":"3. 线程池工作原理","slug":"_3-线程池工作原理","link":"#_3-线程池工作原理","children":[{"level":3,"title":"3.1 任务执行流程","slug":"_3-1-任务执行流程","link":"#_3-1-任务执行流程","children":[]},{"level":3,"title":"3.2 线程生命周期管理","slug":"_3-2-线程生命周期管理","link":"#_3-2-线程生命周期管理","children":[]},{"level":3,"title":"3.3 线程池状态转换","slug":"_3-3-线程池状态转换","link":"#_3-3-线程池状态转换","children":[]}]},{"level":2,"title":"4. 线程池类型","slug":"_4-线程池类型","link":"#_4-线程池类型","children":[{"level":3,"title":"4.1 Executors 工厂方法","slug":"_4-1-executors-工厂方法","link":"#_4-1-executors-工厂方法","children":[]},{"level":3,"title":"4.2 各类型线程池详解","slug":"_4-2-各类型线程池详解","link":"#_4-2-各类型线程池详解","children":[]},{"level":3,"title":"4.3 为什么不推荐使用 Executors","slug":"_4-3-为什么不推荐使用-executors","link":"#_4-3-为什么不推荐使用-executors","children":[]}]},{"level":2,"title":"5. 拒绝策略","slug":"_5-拒绝策略","link":"#_5-拒绝策略","children":[{"level":3,"title":"5.1 拒绝策略概述","slug":"_5-1-拒绝策略概述","link":"#_5-1-拒绝策略概述","children":[]},{"level":3,"title":"5.2 内置拒绝策略","slug":"_5-2-内置拒绝策略","link":"#_5-2-内置拒绝策略","children":[]},{"level":3,"title":"5.3 拒绝策略详解","slug":"_5-3-拒绝策略详解","link":"#_5-3-拒绝策略详解","children":[]},{"level":3,"title":"5.4 自定义拒绝策略","slug":"_5-4-自定义拒绝策略","link":"#_5-4-自定义拒绝策略","children":[]},{"level":3,"title":"5.5 拒绝策略选择建议","slug":"_5-5-拒绝策略选择建议","link":"#_5-5-拒绝策略选择建议","children":[]}]},{"level":2,"title":"6. 线程池配置","slug":"_6-线程池配置","link":"#_6-线程池配置","children":[{"level":3,"title":"6.1 线程数量配置原则","slug":"_6-1-线程数量配置原则","link":"#_6-1-线程数量配置原则","children":[]},{"level":3,"title":"6.2 线程池大小动态调整","slug":"_6-2-线程池大小动态调整","link":"#_6-2-线程池大小动态调整","children":[]},{"level":3,"title":"6.3 线程池监控","slug":"_6-3-线程池监控","link":"#_6-3-线程池监控","children":[]}]},{"level":2,"title":"7. 最佳实践","slug":"_7-最佳实践","link":"#_7-最佳实践","children":[{"level":3,"title":"7.1 线程池创建最佳实践","slug":"_7-1-线程池创建最佳实践","link":"#_7-1-线程池创建最佳实践","children":[]},{"level":3,"title":"7.2 线程池使用最佳实践","slug":"_7-2-线程池使用最佳实践","link":"#_7-2-线程池使用最佳实践","children":[]},{"level":3,"title":"7.3 性能优化建议","slug":"_7-3-性能优化建议","link":"#_7-3-性能优化建议","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1711074643000,"contributors":[{"name":"hyfly233","username":"hyfly233","email":"hyfly233@outlook.com","commits":7,"url":"https://github.com/hyfly233"}]},"filePathRelative":"md/interview/java/basic/线程池.md"}');export{r as comp,t as data};
